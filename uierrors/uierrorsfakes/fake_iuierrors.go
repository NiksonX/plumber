// Code generated by counterfeiter. DO NOT EDIT.
package uierrorsfakes

import (
	"context"
	"sync"

	"github.com/batchcorp/plumber-schemas/build/go/protos"
	"github.com/batchcorp/plumber/uierrors"
)

type FakeIUIErrors struct {
	AddErrorStub        func(*protos.ErrorMessage) error
	addErrorMutex       sync.RWMutex
	addErrorArgsForCall []struct {
		arg1 *protos.ErrorMessage
	}
	addErrorReturns struct {
		result1 error
	}
	addErrorReturnsOnCall map[int]struct {
		result1 error
	}
	ConnectClientStub        func(string) *uierrors.AttachedStream
	connectClientMutex       sync.RWMutex
	connectClientArgsForCall []struct {
		arg1 string
	}
	connectClientReturns struct {
		result1 *uierrors.AttachedStream
	}
	connectClientReturnsOnCall map[int]struct {
		result1 *uierrors.AttachedStream
	}
	DisconnectClientStub        func(string)
	disconnectClientMutex       sync.RWMutex
	disconnectClientArgsForCall []struct {
		arg1 string
	}
	GetHistoryStub        func(context.Context) ([]*protos.ErrorMessage, error)
	getHistoryMutex       sync.RWMutex
	getHistoryArgsForCall []struct {
		arg1 context.Context
	}
	getHistoryReturns struct {
		result1 []*protos.ErrorMessage
		result2 error
	}
	getHistoryReturnsOnCall map[int]struct {
		result1 []*protos.ErrorMessage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIUIErrors) AddError(arg1 *protos.ErrorMessage) error {
	fake.addErrorMutex.Lock()
	ret, specificReturn := fake.addErrorReturnsOnCall[len(fake.addErrorArgsForCall)]
	fake.addErrorArgsForCall = append(fake.addErrorArgsForCall, struct {
		arg1 *protos.ErrorMessage
	}{arg1})
	stub := fake.AddErrorStub
	fakeReturns := fake.addErrorReturns
	fake.recordInvocation("AddError", []interface{}{arg1})
	fake.addErrorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIUIErrors) AddErrorCallCount() int {
	fake.addErrorMutex.RLock()
	defer fake.addErrorMutex.RUnlock()
	return len(fake.addErrorArgsForCall)
}

func (fake *FakeIUIErrors) AddErrorCalls(stub func(*protos.ErrorMessage) error) {
	fake.addErrorMutex.Lock()
	defer fake.addErrorMutex.Unlock()
	fake.AddErrorStub = stub
}

func (fake *FakeIUIErrors) AddErrorArgsForCall(i int) *protos.ErrorMessage {
	fake.addErrorMutex.RLock()
	defer fake.addErrorMutex.RUnlock()
	argsForCall := fake.addErrorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIUIErrors) AddErrorReturns(result1 error) {
	fake.addErrorMutex.Lock()
	defer fake.addErrorMutex.Unlock()
	fake.AddErrorStub = nil
	fake.addErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIUIErrors) AddErrorReturnsOnCall(i int, result1 error) {
	fake.addErrorMutex.Lock()
	defer fake.addErrorMutex.Unlock()
	fake.AddErrorStub = nil
	if fake.addErrorReturnsOnCall == nil {
		fake.addErrorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addErrorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIUIErrors) ConnectClient(arg1 string) *uierrors.AttachedStream {
	fake.connectClientMutex.Lock()
	ret, specificReturn := fake.connectClientReturnsOnCall[len(fake.connectClientArgsForCall)]
	fake.connectClientArgsForCall = append(fake.connectClientArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ConnectClientStub
	fakeReturns := fake.connectClientReturns
	fake.recordInvocation("ConnectClient", []interface{}{arg1})
	fake.connectClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIUIErrors) ConnectClientCallCount() int {
	fake.connectClientMutex.RLock()
	defer fake.connectClientMutex.RUnlock()
	return len(fake.connectClientArgsForCall)
}

func (fake *FakeIUIErrors) ConnectClientCalls(stub func(string) *uierrors.AttachedStream) {
	fake.connectClientMutex.Lock()
	defer fake.connectClientMutex.Unlock()
	fake.ConnectClientStub = stub
}

func (fake *FakeIUIErrors) ConnectClientArgsForCall(i int) string {
	fake.connectClientMutex.RLock()
	defer fake.connectClientMutex.RUnlock()
	argsForCall := fake.connectClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIUIErrors) ConnectClientReturns(result1 *uierrors.AttachedStream) {
	fake.connectClientMutex.Lock()
	defer fake.connectClientMutex.Unlock()
	fake.ConnectClientStub = nil
	fake.connectClientReturns = struct {
		result1 *uierrors.AttachedStream
	}{result1}
}

func (fake *FakeIUIErrors) ConnectClientReturnsOnCall(i int, result1 *uierrors.AttachedStream) {
	fake.connectClientMutex.Lock()
	defer fake.connectClientMutex.Unlock()
	fake.ConnectClientStub = nil
	if fake.connectClientReturnsOnCall == nil {
		fake.connectClientReturnsOnCall = make(map[int]struct {
			result1 *uierrors.AttachedStream
		})
	}
	fake.connectClientReturnsOnCall[i] = struct {
		result1 *uierrors.AttachedStream
	}{result1}
}

func (fake *FakeIUIErrors) DisconnectClient(arg1 string) {
	fake.disconnectClientMutex.Lock()
	fake.disconnectClientArgsForCall = append(fake.disconnectClientArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DisconnectClientStub
	fake.recordInvocation("DisconnectClient", []interface{}{arg1})
	fake.disconnectClientMutex.Unlock()
	if stub != nil {
		fake.DisconnectClientStub(arg1)
	}
}

func (fake *FakeIUIErrors) DisconnectClientCallCount() int {
	fake.disconnectClientMutex.RLock()
	defer fake.disconnectClientMutex.RUnlock()
	return len(fake.disconnectClientArgsForCall)
}

func (fake *FakeIUIErrors) DisconnectClientCalls(stub func(string)) {
	fake.disconnectClientMutex.Lock()
	defer fake.disconnectClientMutex.Unlock()
	fake.DisconnectClientStub = stub
}

func (fake *FakeIUIErrors) DisconnectClientArgsForCall(i int) string {
	fake.disconnectClientMutex.RLock()
	defer fake.disconnectClientMutex.RUnlock()
	argsForCall := fake.disconnectClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIUIErrors) GetHistory(arg1 context.Context) ([]*protos.ErrorMessage, error) {
	fake.getHistoryMutex.Lock()
	ret, specificReturn := fake.getHistoryReturnsOnCall[len(fake.getHistoryArgsForCall)]
	fake.getHistoryArgsForCall = append(fake.getHistoryArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetHistoryStub
	fakeReturns := fake.getHistoryReturns
	fake.recordInvocation("GetHistory", []interface{}{arg1})
	fake.getHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIUIErrors) GetHistoryCallCount() int {
	fake.getHistoryMutex.RLock()
	defer fake.getHistoryMutex.RUnlock()
	return len(fake.getHistoryArgsForCall)
}

func (fake *FakeIUIErrors) GetHistoryCalls(stub func(context.Context) ([]*protos.ErrorMessage, error)) {
	fake.getHistoryMutex.Lock()
	defer fake.getHistoryMutex.Unlock()
	fake.GetHistoryStub = stub
}

func (fake *FakeIUIErrors) GetHistoryArgsForCall(i int) context.Context {
	fake.getHistoryMutex.RLock()
	defer fake.getHistoryMutex.RUnlock()
	argsForCall := fake.getHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIUIErrors) GetHistoryReturns(result1 []*protos.ErrorMessage, result2 error) {
	fake.getHistoryMutex.Lock()
	defer fake.getHistoryMutex.Unlock()
	fake.GetHistoryStub = nil
	fake.getHistoryReturns = struct {
		result1 []*protos.ErrorMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeIUIErrors) GetHistoryReturnsOnCall(i int, result1 []*protos.ErrorMessage, result2 error) {
	fake.getHistoryMutex.Lock()
	defer fake.getHistoryMutex.Unlock()
	fake.GetHistoryStub = nil
	if fake.getHistoryReturnsOnCall == nil {
		fake.getHistoryReturnsOnCall = make(map[int]struct {
			result1 []*protos.ErrorMessage
			result2 error
		})
	}
	fake.getHistoryReturnsOnCall[i] = struct {
		result1 []*protos.ErrorMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeIUIErrors) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addErrorMutex.RLock()
	defer fake.addErrorMutex.RUnlock()
	fake.connectClientMutex.RLock()
	defer fake.connectClientMutex.RUnlock()
	fake.disconnectClientMutex.RLock()
	defer fake.disconnectClientMutex.RUnlock()
	fake.getHistoryMutex.RLock()
	defer fake.getHistoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIUIErrors) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uierrors.IUIErrors = new(FakeIUIErrors)
