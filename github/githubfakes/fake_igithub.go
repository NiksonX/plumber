// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"context"
	"net/url"
	"sync"

	"github.com/batchcorp/plumber/github"
)

type FakeIGithub struct {
	GetRepoArchiveStub        func(context.Context, string, string) ([]byte, error)
	getRepoArchiveMutex       sync.RWMutex
	getRepoArchiveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getRepoArchiveReturns struct {
		result1 []byte
		result2 error
	}
	getRepoArchiveReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	PostStub        func(string, url.Values) ([]byte, int, error)
	postMutex       sync.RWMutex
	postArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	postReturns struct {
		result1 []byte
		result2 int
		result3 error
	}
	postReturnsOnCall map[int]struct {
		result1 []byte
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIGithub) GetRepoArchive(arg1 context.Context, arg2 string, arg3 string) ([]byte, error) {
	fake.getRepoArchiveMutex.Lock()
	ret, specificReturn := fake.getRepoArchiveReturnsOnCall[len(fake.getRepoArchiveArgsForCall)]
	fake.getRepoArchiveArgsForCall = append(fake.getRepoArchiveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetRepoArchiveStub
	fakeReturns := fake.getRepoArchiveReturns
	fake.recordInvocation("GetRepoArchive", []interface{}{arg1, arg2, arg3})
	fake.getRepoArchiveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIGithub) GetRepoArchiveCallCount() int {
	fake.getRepoArchiveMutex.RLock()
	defer fake.getRepoArchiveMutex.RUnlock()
	return len(fake.getRepoArchiveArgsForCall)
}

func (fake *FakeIGithub) GetRepoArchiveCalls(stub func(context.Context, string, string) ([]byte, error)) {
	fake.getRepoArchiveMutex.Lock()
	defer fake.getRepoArchiveMutex.Unlock()
	fake.GetRepoArchiveStub = stub
}

func (fake *FakeIGithub) GetRepoArchiveArgsForCall(i int) (context.Context, string, string) {
	fake.getRepoArchiveMutex.RLock()
	defer fake.getRepoArchiveMutex.RUnlock()
	argsForCall := fake.getRepoArchiveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIGithub) GetRepoArchiveReturns(result1 []byte, result2 error) {
	fake.getRepoArchiveMutex.Lock()
	defer fake.getRepoArchiveMutex.Unlock()
	fake.GetRepoArchiveStub = nil
	fake.getRepoArchiveReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIGithub) GetRepoArchiveReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getRepoArchiveMutex.Lock()
	defer fake.getRepoArchiveMutex.Unlock()
	fake.GetRepoArchiveStub = nil
	if fake.getRepoArchiveReturnsOnCall == nil {
		fake.getRepoArchiveReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getRepoArchiveReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIGithub) Post(arg1 string, arg2 url.Values) ([]byte, int, error) {
	fake.postMutex.Lock()
	ret, specificReturn := fake.postReturnsOnCall[len(fake.postArgsForCall)]
	fake.postArgsForCall = append(fake.postArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	stub := fake.PostStub
	fakeReturns := fake.postReturns
	fake.recordInvocation("Post", []interface{}{arg1, arg2})
	fake.postMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeIGithub) PostCallCount() int {
	fake.postMutex.RLock()
	defer fake.postMutex.RUnlock()
	return len(fake.postArgsForCall)
}

func (fake *FakeIGithub) PostCalls(stub func(string, url.Values) ([]byte, int, error)) {
	fake.postMutex.Lock()
	defer fake.postMutex.Unlock()
	fake.PostStub = stub
}

func (fake *FakeIGithub) PostArgsForCall(i int) (string, url.Values) {
	fake.postMutex.RLock()
	defer fake.postMutex.RUnlock()
	argsForCall := fake.postArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIGithub) PostReturns(result1 []byte, result2 int, result3 error) {
	fake.postMutex.Lock()
	defer fake.postMutex.Unlock()
	fake.PostStub = nil
	fake.postReturns = struct {
		result1 []byte
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIGithub) PostReturnsOnCall(i int, result1 []byte, result2 int, result3 error) {
	fake.postMutex.Lock()
	defer fake.postMutex.Unlock()
	fake.PostStub = nil
	if fake.postReturnsOnCall == nil {
		fake.postReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 int
			result3 error
		})
	}
	fake.postReturnsOnCall[i] = struct {
		result1 []byte
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIGithub) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRepoArchiveMutex.RLock()
	defer fake.getRepoArchiveMutex.RUnlock()
	fake.postMutex.RLock()
	defer fake.postMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIGithub) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.IGithub = new(FakeIGithub)
