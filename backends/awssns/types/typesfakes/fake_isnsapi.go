// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sns"
	"github.com/batchcorp/plumber/backends/awssns/types"
)

type FakeISNSAPI struct {
	AddPermissionStub        func(*sns.AddPermissionInput) (*sns.AddPermissionOutput, error)
	addPermissionMutex       sync.RWMutex
	addPermissionArgsForCall []struct {
		arg1 *sns.AddPermissionInput
	}
	addPermissionReturns struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}
	addPermissionReturnsOnCall map[int]struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}
	AddPermissionRequestStub        func(*sns.AddPermissionInput) (*request.Request, *sns.AddPermissionOutput)
	addPermissionRequestMutex       sync.RWMutex
	addPermissionRequestArgsForCall []struct {
		arg1 *sns.AddPermissionInput
	}
	addPermissionRequestReturns struct {
		result1 *request.Request
		result2 *sns.AddPermissionOutput
	}
	addPermissionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.AddPermissionOutput
	}
	AddPermissionWithContextStub        func(context.Context, *sns.AddPermissionInput, ...request.Option) (*sns.AddPermissionOutput, error)
	addPermissionWithContextMutex       sync.RWMutex
	addPermissionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.AddPermissionInput
		arg3 []request.Option
	}
	addPermissionWithContextReturns struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}
	addPermissionWithContextReturnsOnCall map[int]struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}
	CheckIfPhoneNumberIsOptedOutStub        func(*sns.CheckIfPhoneNumberIsOptedOutInput) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error)
	checkIfPhoneNumberIsOptedOutMutex       sync.RWMutex
	checkIfPhoneNumberIsOptedOutArgsForCall []struct {
		arg1 *sns.CheckIfPhoneNumberIsOptedOutInput
	}
	checkIfPhoneNumberIsOptedOutReturns struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}
	checkIfPhoneNumberIsOptedOutReturnsOnCall map[int]struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}
	CheckIfPhoneNumberIsOptedOutRequestStub        func(*sns.CheckIfPhoneNumberIsOptedOutInput) (*request.Request, *sns.CheckIfPhoneNumberIsOptedOutOutput)
	checkIfPhoneNumberIsOptedOutRequestMutex       sync.RWMutex
	checkIfPhoneNumberIsOptedOutRequestArgsForCall []struct {
		arg1 *sns.CheckIfPhoneNumberIsOptedOutInput
	}
	checkIfPhoneNumberIsOptedOutRequestReturns struct {
		result1 *request.Request
		result2 *sns.CheckIfPhoneNumberIsOptedOutOutput
	}
	checkIfPhoneNumberIsOptedOutRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.CheckIfPhoneNumberIsOptedOutOutput
	}
	CheckIfPhoneNumberIsOptedOutWithContextStub        func(context.Context, *sns.CheckIfPhoneNumberIsOptedOutInput, ...request.Option) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error)
	checkIfPhoneNumberIsOptedOutWithContextMutex       sync.RWMutex
	checkIfPhoneNumberIsOptedOutWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.CheckIfPhoneNumberIsOptedOutInput
		arg3 []request.Option
	}
	checkIfPhoneNumberIsOptedOutWithContextReturns struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}
	checkIfPhoneNumberIsOptedOutWithContextReturnsOnCall map[int]struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}
	ConfirmSubscriptionStub        func(*sns.ConfirmSubscriptionInput) (*sns.ConfirmSubscriptionOutput, error)
	confirmSubscriptionMutex       sync.RWMutex
	confirmSubscriptionArgsForCall []struct {
		arg1 *sns.ConfirmSubscriptionInput
	}
	confirmSubscriptionReturns struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}
	confirmSubscriptionReturnsOnCall map[int]struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}
	ConfirmSubscriptionRequestStub        func(*sns.ConfirmSubscriptionInput) (*request.Request, *sns.ConfirmSubscriptionOutput)
	confirmSubscriptionRequestMutex       sync.RWMutex
	confirmSubscriptionRequestArgsForCall []struct {
		arg1 *sns.ConfirmSubscriptionInput
	}
	confirmSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *sns.ConfirmSubscriptionOutput
	}
	confirmSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ConfirmSubscriptionOutput
	}
	ConfirmSubscriptionWithContextStub        func(context.Context, *sns.ConfirmSubscriptionInput, ...request.Option) (*sns.ConfirmSubscriptionOutput, error)
	confirmSubscriptionWithContextMutex       sync.RWMutex
	confirmSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ConfirmSubscriptionInput
		arg3 []request.Option
	}
	confirmSubscriptionWithContextReturns struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}
	confirmSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}
	CreatePlatformApplicationStub        func(*sns.CreatePlatformApplicationInput) (*sns.CreatePlatformApplicationOutput, error)
	createPlatformApplicationMutex       sync.RWMutex
	createPlatformApplicationArgsForCall []struct {
		arg1 *sns.CreatePlatformApplicationInput
	}
	createPlatformApplicationReturns struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}
	createPlatformApplicationReturnsOnCall map[int]struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}
	CreatePlatformApplicationRequestStub        func(*sns.CreatePlatformApplicationInput) (*request.Request, *sns.CreatePlatformApplicationOutput)
	createPlatformApplicationRequestMutex       sync.RWMutex
	createPlatformApplicationRequestArgsForCall []struct {
		arg1 *sns.CreatePlatformApplicationInput
	}
	createPlatformApplicationRequestReturns struct {
		result1 *request.Request
		result2 *sns.CreatePlatformApplicationOutput
	}
	createPlatformApplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.CreatePlatformApplicationOutput
	}
	CreatePlatformApplicationWithContextStub        func(context.Context, *sns.CreatePlatformApplicationInput, ...request.Option) (*sns.CreatePlatformApplicationOutput, error)
	createPlatformApplicationWithContextMutex       sync.RWMutex
	createPlatformApplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.CreatePlatformApplicationInput
		arg3 []request.Option
	}
	createPlatformApplicationWithContextReturns struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}
	createPlatformApplicationWithContextReturnsOnCall map[int]struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}
	CreatePlatformEndpointStub        func(*sns.CreatePlatformEndpointInput) (*sns.CreatePlatformEndpointOutput, error)
	createPlatformEndpointMutex       sync.RWMutex
	createPlatformEndpointArgsForCall []struct {
		arg1 *sns.CreatePlatformEndpointInput
	}
	createPlatformEndpointReturns struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}
	createPlatformEndpointReturnsOnCall map[int]struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}
	CreatePlatformEndpointRequestStub        func(*sns.CreatePlatformEndpointInput) (*request.Request, *sns.CreatePlatformEndpointOutput)
	createPlatformEndpointRequestMutex       sync.RWMutex
	createPlatformEndpointRequestArgsForCall []struct {
		arg1 *sns.CreatePlatformEndpointInput
	}
	createPlatformEndpointRequestReturns struct {
		result1 *request.Request
		result2 *sns.CreatePlatformEndpointOutput
	}
	createPlatformEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.CreatePlatformEndpointOutput
	}
	CreatePlatformEndpointWithContextStub        func(context.Context, *sns.CreatePlatformEndpointInput, ...request.Option) (*sns.CreatePlatformEndpointOutput, error)
	createPlatformEndpointWithContextMutex       sync.RWMutex
	createPlatformEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.CreatePlatformEndpointInput
		arg3 []request.Option
	}
	createPlatformEndpointWithContextReturns struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}
	createPlatformEndpointWithContextReturnsOnCall map[int]struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}
	CreateTopicStub        func(*sns.CreateTopicInput) (*sns.CreateTopicOutput, error)
	createTopicMutex       sync.RWMutex
	createTopicArgsForCall []struct {
		arg1 *sns.CreateTopicInput
	}
	createTopicReturns struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}
	createTopicReturnsOnCall map[int]struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}
	CreateTopicRequestStub        func(*sns.CreateTopicInput) (*request.Request, *sns.CreateTopicOutput)
	createTopicRequestMutex       sync.RWMutex
	createTopicRequestArgsForCall []struct {
		arg1 *sns.CreateTopicInput
	}
	createTopicRequestReturns struct {
		result1 *request.Request
		result2 *sns.CreateTopicOutput
	}
	createTopicRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.CreateTopicOutput
	}
	CreateTopicWithContextStub        func(context.Context, *sns.CreateTopicInput, ...request.Option) (*sns.CreateTopicOutput, error)
	createTopicWithContextMutex       sync.RWMutex
	createTopicWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.CreateTopicInput
		arg3 []request.Option
	}
	createTopicWithContextReturns struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}
	createTopicWithContextReturnsOnCall map[int]struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}
	DeleteEndpointStub        func(*sns.DeleteEndpointInput) (*sns.DeleteEndpointOutput, error)
	deleteEndpointMutex       sync.RWMutex
	deleteEndpointArgsForCall []struct {
		arg1 *sns.DeleteEndpointInput
	}
	deleteEndpointReturns struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}
	deleteEndpointReturnsOnCall map[int]struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}
	DeleteEndpointRequestStub        func(*sns.DeleteEndpointInput) (*request.Request, *sns.DeleteEndpointOutput)
	deleteEndpointRequestMutex       sync.RWMutex
	deleteEndpointRequestArgsForCall []struct {
		arg1 *sns.DeleteEndpointInput
	}
	deleteEndpointRequestReturns struct {
		result1 *request.Request
		result2 *sns.DeleteEndpointOutput
	}
	deleteEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.DeleteEndpointOutput
	}
	DeleteEndpointWithContextStub        func(context.Context, *sns.DeleteEndpointInput, ...request.Option) (*sns.DeleteEndpointOutput, error)
	deleteEndpointWithContextMutex       sync.RWMutex
	deleteEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.DeleteEndpointInput
		arg3 []request.Option
	}
	deleteEndpointWithContextReturns struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}
	deleteEndpointWithContextReturnsOnCall map[int]struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}
	DeletePlatformApplicationStub        func(*sns.DeletePlatformApplicationInput) (*sns.DeletePlatformApplicationOutput, error)
	deletePlatformApplicationMutex       sync.RWMutex
	deletePlatformApplicationArgsForCall []struct {
		arg1 *sns.DeletePlatformApplicationInput
	}
	deletePlatformApplicationReturns struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}
	deletePlatformApplicationReturnsOnCall map[int]struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}
	DeletePlatformApplicationRequestStub        func(*sns.DeletePlatformApplicationInput) (*request.Request, *sns.DeletePlatformApplicationOutput)
	deletePlatformApplicationRequestMutex       sync.RWMutex
	deletePlatformApplicationRequestArgsForCall []struct {
		arg1 *sns.DeletePlatformApplicationInput
	}
	deletePlatformApplicationRequestReturns struct {
		result1 *request.Request
		result2 *sns.DeletePlatformApplicationOutput
	}
	deletePlatformApplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.DeletePlatformApplicationOutput
	}
	DeletePlatformApplicationWithContextStub        func(context.Context, *sns.DeletePlatformApplicationInput, ...request.Option) (*sns.DeletePlatformApplicationOutput, error)
	deletePlatformApplicationWithContextMutex       sync.RWMutex
	deletePlatformApplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.DeletePlatformApplicationInput
		arg3 []request.Option
	}
	deletePlatformApplicationWithContextReturns struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}
	deletePlatformApplicationWithContextReturnsOnCall map[int]struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}
	DeleteTopicStub        func(*sns.DeleteTopicInput) (*sns.DeleteTopicOutput, error)
	deleteTopicMutex       sync.RWMutex
	deleteTopicArgsForCall []struct {
		arg1 *sns.DeleteTopicInput
	}
	deleteTopicReturns struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}
	deleteTopicReturnsOnCall map[int]struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}
	DeleteTopicRequestStub        func(*sns.DeleteTopicInput) (*request.Request, *sns.DeleteTopicOutput)
	deleteTopicRequestMutex       sync.RWMutex
	deleteTopicRequestArgsForCall []struct {
		arg1 *sns.DeleteTopicInput
	}
	deleteTopicRequestReturns struct {
		result1 *request.Request
		result2 *sns.DeleteTopicOutput
	}
	deleteTopicRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.DeleteTopicOutput
	}
	DeleteTopicWithContextStub        func(context.Context, *sns.DeleteTopicInput, ...request.Option) (*sns.DeleteTopicOutput, error)
	deleteTopicWithContextMutex       sync.RWMutex
	deleteTopicWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.DeleteTopicInput
		arg3 []request.Option
	}
	deleteTopicWithContextReturns struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}
	deleteTopicWithContextReturnsOnCall map[int]struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}
	GetEndpointAttributesStub        func(*sns.GetEndpointAttributesInput) (*sns.GetEndpointAttributesOutput, error)
	getEndpointAttributesMutex       sync.RWMutex
	getEndpointAttributesArgsForCall []struct {
		arg1 *sns.GetEndpointAttributesInput
	}
	getEndpointAttributesReturns struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}
	getEndpointAttributesReturnsOnCall map[int]struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}
	GetEndpointAttributesRequestStub        func(*sns.GetEndpointAttributesInput) (*request.Request, *sns.GetEndpointAttributesOutput)
	getEndpointAttributesRequestMutex       sync.RWMutex
	getEndpointAttributesRequestArgsForCall []struct {
		arg1 *sns.GetEndpointAttributesInput
	}
	getEndpointAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.GetEndpointAttributesOutput
	}
	getEndpointAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.GetEndpointAttributesOutput
	}
	GetEndpointAttributesWithContextStub        func(context.Context, *sns.GetEndpointAttributesInput, ...request.Option) (*sns.GetEndpointAttributesOutput, error)
	getEndpointAttributesWithContextMutex       sync.RWMutex
	getEndpointAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.GetEndpointAttributesInput
		arg3 []request.Option
	}
	getEndpointAttributesWithContextReturns struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}
	getEndpointAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}
	GetPlatformApplicationAttributesStub        func(*sns.GetPlatformApplicationAttributesInput) (*sns.GetPlatformApplicationAttributesOutput, error)
	getPlatformApplicationAttributesMutex       sync.RWMutex
	getPlatformApplicationAttributesArgsForCall []struct {
		arg1 *sns.GetPlatformApplicationAttributesInput
	}
	getPlatformApplicationAttributesReturns struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}
	getPlatformApplicationAttributesReturnsOnCall map[int]struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}
	GetPlatformApplicationAttributesRequestStub        func(*sns.GetPlatformApplicationAttributesInput) (*request.Request, *sns.GetPlatformApplicationAttributesOutput)
	getPlatformApplicationAttributesRequestMutex       sync.RWMutex
	getPlatformApplicationAttributesRequestArgsForCall []struct {
		arg1 *sns.GetPlatformApplicationAttributesInput
	}
	getPlatformApplicationAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.GetPlatformApplicationAttributesOutput
	}
	getPlatformApplicationAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.GetPlatformApplicationAttributesOutput
	}
	GetPlatformApplicationAttributesWithContextStub        func(context.Context, *sns.GetPlatformApplicationAttributesInput, ...request.Option) (*sns.GetPlatformApplicationAttributesOutput, error)
	getPlatformApplicationAttributesWithContextMutex       sync.RWMutex
	getPlatformApplicationAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.GetPlatformApplicationAttributesInput
		arg3 []request.Option
	}
	getPlatformApplicationAttributesWithContextReturns struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}
	getPlatformApplicationAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}
	GetSMSAttributesStub        func(*sns.GetSMSAttributesInput) (*sns.GetSMSAttributesOutput, error)
	getSMSAttributesMutex       sync.RWMutex
	getSMSAttributesArgsForCall []struct {
		arg1 *sns.GetSMSAttributesInput
	}
	getSMSAttributesReturns struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}
	getSMSAttributesReturnsOnCall map[int]struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}
	GetSMSAttributesRequestStub        func(*sns.GetSMSAttributesInput) (*request.Request, *sns.GetSMSAttributesOutput)
	getSMSAttributesRequestMutex       sync.RWMutex
	getSMSAttributesRequestArgsForCall []struct {
		arg1 *sns.GetSMSAttributesInput
	}
	getSMSAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.GetSMSAttributesOutput
	}
	getSMSAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.GetSMSAttributesOutput
	}
	GetSMSAttributesWithContextStub        func(context.Context, *sns.GetSMSAttributesInput, ...request.Option) (*sns.GetSMSAttributesOutput, error)
	getSMSAttributesWithContextMutex       sync.RWMutex
	getSMSAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.GetSMSAttributesInput
		arg3 []request.Option
	}
	getSMSAttributesWithContextReturns struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}
	getSMSAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}
	GetSubscriptionAttributesStub        func(*sns.GetSubscriptionAttributesInput) (*sns.GetSubscriptionAttributesOutput, error)
	getSubscriptionAttributesMutex       sync.RWMutex
	getSubscriptionAttributesArgsForCall []struct {
		arg1 *sns.GetSubscriptionAttributesInput
	}
	getSubscriptionAttributesReturns struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}
	getSubscriptionAttributesReturnsOnCall map[int]struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}
	GetSubscriptionAttributesRequestStub        func(*sns.GetSubscriptionAttributesInput) (*request.Request, *sns.GetSubscriptionAttributesOutput)
	getSubscriptionAttributesRequestMutex       sync.RWMutex
	getSubscriptionAttributesRequestArgsForCall []struct {
		arg1 *sns.GetSubscriptionAttributesInput
	}
	getSubscriptionAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.GetSubscriptionAttributesOutput
	}
	getSubscriptionAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.GetSubscriptionAttributesOutput
	}
	GetSubscriptionAttributesWithContextStub        func(context.Context, *sns.GetSubscriptionAttributesInput, ...request.Option) (*sns.GetSubscriptionAttributesOutput, error)
	getSubscriptionAttributesWithContextMutex       sync.RWMutex
	getSubscriptionAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.GetSubscriptionAttributesInput
		arg3 []request.Option
	}
	getSubscriptionAttributesWithContextReturns struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}
	getSubscriptionAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}
	GetTopicAttributesStub        func(*sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error)
	getTopicAttributesMutex       sync.RWMutex
	getTopicAttributesArgsForCall []struct {
		arg1 *sns.GetTopicAttributesInput
	}
	getTopicAttributesReturns struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}
	getTopicAttributesReturnsOnCall map[int]struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}
	GetTopicAttributesRequestStub        func(*sns.GetTopicAttributesInput) (*request.Request, *sns.GetTopicAttributesOutput)
	getTopicAttributesRequestMutex       sync.RWMutex
	getTopicAttributesRequestArgsForCall []struct {
		arg1 *sns.GetTopicAttributesInput
	}
	getTopicAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.GetTopicAttributesOutput
	}
	getTopicAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.GetTopicAttributesOutput
	}
	GetTopicAttributesWithContextStub        func(context.Context, *sns.GetTopicAttributesInput, ...request.Option) (*sns.GetTopicAttributesOutput, error)
	getTopicAttributesWithContextMutex       sync.RWMutex
	getTopicAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.GetTopicAttributesInput
		arg3 []request.Option
	}
	getTopicAttributesWithContextReturns struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}
	getTopicAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}
	ListEndpointsByPlatformApplicationStub        func(*sns.ListEndpointsByPlatformApplicationInput) (*sns.ListEndpointsByPlatformApplicationOutput, error)
	listEndpointsByPlatformApplicationMutex       sync.RWMutex
	listEndpointsByPlatformApplicationArgsForCall []struct {
		arg1 *sns.ListEndpointsByPlatformApplicationInput
	}
	listEndpointsByPlatformApplicationReturns struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}
	listEndpointsByPlatformApplicationReturnsOnCall map[int]struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}
	ListEndpointsByPlatformApplicationPagesStub        func(*sns.ListEndpointsByPlatformApplicationInput, func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool) error
	listEndpointsByPlatformApplicationPagesMutex       sync.RWMutex
	listEndpointsByPlatformApplicationPagesArgsForCall []struct {
		arg1 *sns.ListEndpointsByPlatformApplicationInput
		arg2 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool
	}
	listEndpointsByPlatformApplicationPagesReturns struct {
		result1 error
	}
	listEndpointsByPlatformApplicationPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListEndpointsByPlatformApplicationPagesWithContextStub        func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool, ...request.Option) error
	listEndpointsByPlatformApplicationPagesWithContextMutex       sync.RWMutex
	listEndpointsByPlatformApplicationPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListEndpointsByPlatformApplicationInput
		arg3 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool
		arg4 []request.Option
	}
	listEndpointsByPlatformApplicationPagesWithContextReturns struct {
		result1 error
	}
	listEndpointsByPlatformApplicationPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListEndpointsByPlatformApplicationRequestStub        func(*sns.ListEndpointsByPlatformApplicationInput) (*request.Request, *sns.ListEndpointsByPlatformApplicationOutput)
	listEndpointsByPlatformApplicationRequestMutex       sync.RWMutex
	listEndpointsByPlatformApplicationRequestArgsForCall []struct {
		arg1 *sns.ListEndpointsByPlatformApplicationInput
	}
	listEndpointsByPlatformApplicationRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListEndpointsByPlatformApplicationOutput
	}
	listEndpointsByPlatformApplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListEndpointsByPlatformApplicationOutput
	}
	ListEndpointsByPlatformApplicationWithContextStub        func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, ...request.Option) (*sns.ListEndpointsByPlatformApplicationOutput, error)
	listEndpointsByPlatformApplicationWithContextMutex       sync.RWMutex
	listEndpointsByPlatformApplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListEndpointsByPlatformApplicationInput
		arg3 []request.Option
	}
	listEndpointsByPlatformApplicationWithContextReturns struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}
	listEndpointsByPlatformApplicationWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}
	ListPhoneNumbersOptedOutStub        func(*sns.ListPhoneNumbersOptedOutInput) (*sns.ListPhoneNumbersOptedOutOutput, error)
	listPhoneNumbersOptedOutMutex       sync.RWMutex
	listPhoneNumbersOptedOutArgsForCall []struct {
		arg1 *sns.ListPhoneNumbersOptedOutInput
	}
	listPhoneNumbersOptedOutReturns struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}
	listPhoneNumbersOptedOutReturnsOnCall map[int]struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}
	ListPhoneNumbersOptedOutRequestStub        func(*sns.ListPhoneNumbersOptedOutInput) (*request.Request, *sns.ListPhoneNumbersOptedOutOutput)
	listPhoneNumbersOptedOutRequestMutex       sync.RWMutex
	listPhoneNumbersOptedOutRequestArgsForCall []struct {
		arg1 *sns.ListPhoneNumbersOptedOutInput
	}
	listPhoneNumbersOptedOutRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListPhoneNumbersOptedOutOutput
	}
	listPhoneNumbersOptedOutRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListPhoneNumbersOptedOutOutput
	}
	ListPhoneNumbersOptedOutWithContextStub        func(context.Context, *sns.ListPhoneNumbersOptedOutInput, ...request.Option) (*sns.ListPhoneNumbersOptedOutOutput, error)
	listPhoneNumbersOptedOutWithContextMutex       sync.RWMutex
	listPhoneNumbersOptedOutWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListPhoneNumbersOptedOutInput
		arg3 []request.Option
	}
	listPhoneNumbersOptedOutWithContextReturns struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}
	listPhoneNumbersOptedOutWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}
	ListPlatformApplicationsStub        func(*sns.ListPlatformApplicationsInput) (*sns.ListPlatformApplicationsOutput, error)
	listPlatformApplicationsMutex       sync.RWMutex
	listPlatformApplicationsArgsForCall []struct {
		arg1 *sns.ListPlatformApplicationsInput
	}
	listPlatformApplicationsReturns struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}
	listPlatformApplicationsReturnsOnCall map[int]struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}
	ListPlatformApplicationsPagesStub        func(*sns.ListPlatformApplicationsInput, func(*sns.ListPlatformApplicationsOutput, bool) bool) error
	listPlatformApplicationsPagesMutex       sync.RWMutex
	listPlatformApplicationsPagesArgsForCall []struct {
		arg1 *sns.ListPlatformApplicationsInput
		arg2 func(*sns.ListPlatformApplicationsOutput, bool) bool
	}
	listPlatformApplicationsPagesReturns struct {
		result1 error
	}
	listPlatformApplicationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListPlatformApplicationsPagesWithContextStub        func(context.Context, *sns.ListPlatformApplicationsInput, func(*sns.ListPlatformApplicationsOutput, bool) bool, ...request.Option) error
	listPlatformApplicationsPagesWithContextMutex       sync.RWMutex
	listPlatformApplicationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListPlatformApplicationsInput
		arg3 func(*sns.ListPlatformApplicationsOutput, bool) bool
		arg4 []request.Option
	}
	listPlatformApplicationsPagesWithContextReturns struct {
		result1 error
	}
	listPlatformApplicationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListPlatformApplicationsRequestStub        func(*sns.ListPlatformApplicationsInput) (*request.Request, *sns.ListPlatformApplicationsOutput)
	listPlatformApplicationsRequestMutex       sync.RWMutex
	listPlatformApplicationsRequestArgsForCall []struct {
		arg1 *sns.ListPlatformApplicationsInput
	}
	listPlatformApplicationsRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListPlatformApplicationsOutput
	}
	listPlatformApplicationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListPlatformApplicationsOutput
	}
	ListPlatformApplicationsWithContextStub        func(context.Context, *sns.ListPlatformApplicationsInput, ...request.Option) (*sns.ListPlatformApplicationsOutput, error)
	listPlatformApplicationsWithContextMutex       sync.RWMutex
	listPlatformApplicationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListPlatformApplicationsInput
		arg3 []request.Option
	}
	listPlatformApplicationsWithContextReturns struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}
	listPlatformApplicationsWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}
	ListSubscriptionsStub        func(*sns.ListSubscriptionsInput) (*sns.ListSubscriptionsOutput, error)
	listSubscriptionsMutex       sync.RWMutex
	listSubscriptionsArgsForCall []struct {
		arg1 *sns.ListSubscriptionsInput
	}
	listSubscriptionsReturns struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}
	listSubscriptionsReturnsOnCall map[int]struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}
	ListSubscriptionsByTopicStub        func(*sns.ListSubscriptionsByTopicInput) (*sns.ListSubscriptionsByTopicOutput, error)
	listSubscriptionsByTopicMutex       sync.RWMutex
	listSubscriptionsByTopicArgsForCall []struct {
		arg1 *sns.ListSubscriptionsByTopicInput
	}
	listSubscriptionsByTopicReturns struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}
	listSubscriptionsByTopicReturnsOnCall map[int]struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}
	ListSubscriptionsByTopicPagesStub        func(*sns.ListSubscriptionsByTopicInput, func(*sns.ListSubscriptionsByTopicOutput, bool) bool) error
	listSubscriptionsByTopicPagesMutex       sync.RWMutex
	listSubscriptionsByTopicPagesArgsForCall []struct {
		arg1 *sns.ListSubscriptionsByTopicInput
		arg2 func(*sns.ListSubscriptionsByTopicOutput, bool) bool
	}
	listSubscriptionsByTopicPagesReturns struct {
		result1 error
	}
	listSubscriptionsByTopicPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListSubscriptionsByTopicPagesWithContextStub        func(context.Context, *sns.ListSubscriptionsByTopicInput, func(*sns.ListSubscriptionsByTopicOutput, bool) bool, ...request.Option) error
	listSubscriptionsByTopicPagesWithContextMutex       sync.RWMutex
	listSubscriptionsByTopicPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsByTopicInput
		arg3 func(*sns.ListSubscriptionsByTopicOutput, bool) bool
		arg4 []request.Option
	}
	listSubscriptionsByTopicPagesWithContextReturns struct {
		result1 error
	}
	listSubscriptionsByTopicPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListSubscriptionsByTopicRequestStub        func(*sns.ListSubscriptionsByTopicInput) (*request.Request, *sns.ListSubscriptionsByTopicOutput)
	listSubscriptionsByTopicRequestMutex       sync.RWMutex
	listSubscriptionsByTopicRequestArgsForCall []struct {
		arg1 *sns.ListSubscriptionsByTopicInput
	}
	listSubscriptionsByTopicRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsByTopicOutput
	}
	listSubscriptionsByTopicRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsByTopicOutput
	}
	ListSubscriptionsByTopicWithContextStub        func(context.Context, *sns.ListSubscriptionsByTopicInput, ...request.Option) (*sns.ListSubscriptionsByTopicOutput, error)
	listSubscriptionsByTopicWithContextMutex       sync.RWMutex
	listSubscriptionsByTopicWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsByTopicInput
		arg3 []request.Option
	}
	listSubscriptionsByTopicWithContextReturns struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}
	listSubscriptionsByTopicWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}
	ListSubscriptionsPagesStub        func(*sns.ListSubscriptionsInput, func(*sns.ListSubscriptionsOutput, bool) bool) error
	listSubscriptionsPagesMutex       sync.RWMutex
	listSubscriptionsPagesArgsForCall []struct {
		arg1 *sns.ListSubscriptionsInput
		arg2 func(*sns.ListSubscriptionsOutput, bool) bool
	}
	listSubscriptionsPagesReturns struct {
		result1 error
	}
	listSubscriptionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListSubscriptionsPagesWithContextStub        func(context.Context, *sns.ListSubscriptionsInput, func(*sns.ListSubscriptionsOutput, bool) bool, ...request.Option) error
	listSubscriptionsPagesWithContextMutex       sync.RWMutex
	listSubscriptionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsInput
		arg3 func(*sns.ListSubscriptionsOutput, bool) bool
		arg4 []request.Option
	}
	listSubscriptionsPagesWithContextReturns struct {
		result1 error
	}
	listSubscriptionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListSubscriptionsRequestStub        func(*sns.ListSubscriptionsInput) (*request.Request, *sns.ListSubscriptionsOutput)
	listSubscriptionsRequestMutex       sync.RWMutex
	listSubscriptionsRequestArgsForCall []struct {
		arg1 *sns.ListSubscriptionsInput
	}
	listSubscriptionsRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsOutput
	}
	listSubscriptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsOutput
	}
	ListSubscriptionsWithContextStub        func(context.Context, *sns.ListSubscriptionsInput, ...request.Option) (*sns.ListSubscriptionsOutput, error)
	listSubscriptionsWithContextMutex       sync.RWMutex
	listSubscriptionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsInput
		arg3 []request.Option
	}
	listSubscriptionsWithContextReturns struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}
	listSubscriptionsWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}
	ListTagsForResourceStub        func(*sns.ListTagsForResourceInput) (*sns.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *sns.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*sns.ListTagsForResourceInput) (*request.Request, *sns.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *sns.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListTagsForResourceOutput
	}
	ListTagsForResourceWithContextStub        func(context.Context, *sns.ListTagsForResourceInput, ...request.Option) (*sns.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}
	ListTopicsStub        func(*sns.ListTopicsInput) (*sns.ListTopicsOutput, error)
	listTopicsMutex       sync.RWMutex
	listTopicsArgsForCall []struct {
		arg1 *sns.ListTopicsInput
	}
	listTopicsReturns struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}
	listTopicsReturnsOnCall map[int]struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}
	ListTopicsPagesStub        func(*sns.ListTopicsInput, func(*sns.ListTopicsOutput, bool) bool) error
	listTopicsPagesMutex       sync.RWMutex
	listTopicsPagesArgsForCall []struct {
		arg1 *sns.ListTopicsInput
		arg2 func(*sns.ListTopicsOutput, bool) bool
	}
	listTopicsPagesReturns struct {
		result1 error
	}
	listTopicsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListTopicsPagesWithContextStub        func(context.Context, *sns.ListTopicsInput, func(*sns.ListTopicsOutput, bool) bool, ...request.Option) error
	listTopicsPagesWithContextMutex       sync.RWMutex
	listTopicsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListTopicsInput
		arg3 func(*sns.ListTopicsOutput, bool) bool
		arg4 []request.Option
	}
	listTopicsPagesWithContextReturns struct {
		result1 error
	}
	listTopicsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTopicsRequestStub        func(*sns.ListTopicsInput) (*request.Request, *sns.ListTopicsOutput)
	listTopicsRequestMutex       sync.RWMutex
	listTopicsRequestArgsForCall []struct {
		arg1 *sns.ListTopicsInput
	}
	listTopicsRequestReturns struct {
		result1 *request.Request
		result2 *sns.ListTopicsOutput
	}
	listTopicsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.ListTopicsOutput
	}
	ListTopicsWithContextStub        func(context.Context, *sns.ListTopicsInput, ...request.Option) (*sns.ListTopicsOutput, error)
	listTopicsWithContextMutex       sync.RWMutex
	listTopicsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.ListTopicsInput
		arg3 []request.Option
	}
	listTopicsWithContextReturns struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}
	listTopicsWithContextReturnsOnCall map[int]struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}
	OptInPhoneNumberStub        func(*sns.OptInPhoneNumberInput) (*sns.OptInPhoneNumberOutput, error)
	optInPhoneNumberMutex       sync.RWMutex
	optInPhoneNumberArgsForCall []struct {
		arg1 *sns.OptInPhoneNumberInput
	}
	optInPhoneNumberReturns struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}
	optInPhoneNumberReturnsOnCall map[int]struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}
	OptInPhoneNumberRequestStub        func(*sns.OptInPhoneNumberInput) (*request.Request, *sns.OptInPhoneNumberOutput)
	optInPhoneNumberRequestMutex       sync.RWMutex
	optInPhoneNumberRequestArgsForCall []struct {
		arg1 *sns.OptInPhoneNumberInput
	}
	optInPhoneNumberRequestReturns struct {
		result1 *request.Request
		result2 *sns.OptInPhoneNumberOutput
	}
	optInPhoneNumberRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.OptInPhoneNumberOutput
	}
	OptInPhoneNumberWithContextStub        func(context.Context, *sns.OptInPhoneNumberInput, ...request.Option) (*sns.OptInPhoneNumberOutput, error)
	optInPhoneNumberWithContextMutex       sync.RWMutex
	optInPhoneNumberWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.OptInPhoneNumberInput
		arg3 []request.Option
	}
	optInPhoneNumberWithContextReturns struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}
	optInPhoneNumberWithContextReturnsOnCall map[int]struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}
	PublishStub        func(*sns.PublishInput) (*sns.PublishOutput, error)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 *sns.PublishInput
	}
	publishReturns struct {
		result1 *sns.PublishOutput
		result2 error
	}
	publishReturnsOnCall map[int]struct {
		result1 *sns.PublishOutput
		result2 error
	}
	PublishRequestStub        func(*sns.PublishInput) (*request.Request, *sns.PublishOutput)
	publishRequestMutex       sync.RWMutex
	publishRequestArgsForCall []struct {
		arg1 *sns.PublishInput
	}
	publishRequestReturns struct {
		result1 *request.Request
		result2 *sns.PublishOutput
	}
	publishRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.PublishOutput
	}
	PublishWithContextStub        func(context.Context, *sns.PublishInput, ...request.Option) (*sns.PublishOutput, error)
	publishWithContextMutex       sync.RWMutex
	publishWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.PublishInput
		arg3 []request.Option
	}
	publishWithContextReturns struct {
		result1 *sns.PublishOutput
		result2 error
	}
	publishWithContextReturnsOnCall map[int]struct {
		result1 *sns.PublishOutput
		result2 error
	}
	RemovePermissionStub        func(*sns.RemovePermissionInput) (*sns.RemovePermissionOutput, error)
	removePermissionMutex       sync.RWMutex
	removePermissionArgsForCall []struct {
		arg1 *sns.RemovePermissionInput
	}
	removePermissionReturns struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}
	removePermissionReturnsOnCall map[int]struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}
	RemovePermissionRequestStub        func(*sns.RemovePermissionInput) (*request.Request, *sns.RemovePermissionOutput)
	removePermissionRequestMutex       sync.RWMutex
	removePermissionRequestArgsForCall []struct {
		arg1 *sns.RemovePermissionInput
	}
	removePermissionRequestReturns struct {
		result1 *request.Request
		result2 *sns.RemovePermissionOutput
	}
	removePermissionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.RemovePermissionOutput
	}
	RemovePermissionWithContextStub        func(context.Context, *sns.RemovePermissionInput, ...request.Option) (*sns.RemovePermissionOutput, error)
	removePermissionWithContextMutex       sync.RWMutex
	removePermissionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.RemovePermissionInput
		arg3 []request.Option
	}
	removePermissionWithContextReturns struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}
	removePermissionWithContextReturnsOnCall map[int]struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}
	SetEndpointAttributesStub        func(*sns.SetEndpointAttributesInput) (*sns.SetEndpointAttributesOutput, error)
	setEndpointAttributesMutex       sync.RWMutex
	setEndpointAttributesArgsForCall []struct {
		arg1 *sns.SetEndpointAttributesInput
	}
	setEndpointAttributesReturns struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}
	setEndpointAttributesReturnsOnCall map[int]struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}
	SetEndpointAttributesRequestStub        func(*sns.SetEndpointAttributesInput) (*request.Request, *sns.SetEndpointAttributesOutput)
	setEndpointAttributesRequestMutex       sync.RWMutex
	setEndpointAttributesRequestArgsForCall []struct {
		arg1 *sns.SetEndpointAttributesInput
	}
	setEndpointAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.SetEndpointAttributesOutput
	}
	setEndpointAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.SetEndpointAttributesOutput
	}
	SetEndpointAttributesWithContextStub        func(context.Context, *sns.SetEndpointAttributesInput, ...request.Option) (*sns.SetEndpointAttributesOutput, error)
	setEndpointAttributesWithContextMutex       sync.RWMutex
	setEndpointAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.SetEndpointAttributesInput
		arg3 []request.Option
	}
	setEndpointAttributesWithContextReturns struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}
	setEndpointAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}
	SetPlatformApplicationAttributesStub        func(*sns.SetPlatformApplicationAttributesInput) (*sns.SetPlatformApplicationAttributesOutput, error)
	setPlatformApplicationAttributesMutex       sync.RWMutex
	setPlatformApplicationAttributesArgsForCall []struct {
		arg1 *sns.SetPlatformApplicationAttributesInput
	}
	setPlatformApplicationAttributesReturns struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}
	setPlatformApplicationAttributesReturnsOnCall map[int]struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}
	SetPlatformApplicationAttributesRequestStub        func(*sns.SetPlatformApplicationAttributesInput) (*request.Request, *sns.SetPlatformApplicationAttributesOutput)
	setPlatformApplicationAttributesRequestMutex       sync.RWMutex
	setPlatformApplicationAttributesRequestArgsForCall []struct {
		arg1 *sns.SetPlatformApplicationAttributesInput
	}
	setPlatformApplicationAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.SetPlatformApplicationAttributesOutput
	}
	setPlatformApplicationAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.SetPlatformApplicationAttributesOutput
	}
	SetPlatformApplicationAttributesWithContextStub        func(context.Context, *sns.SetPlatformApplicationAttributesInput, ...request.Option) (*sns.SetPlatformApplicationAttributesOutput, error)
	setPlatformApplicationAttributesWithContextMutex       sync.RWMutex
	setPlatformApplicationAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.SetPlatformApplicationAttributesInput
		arg3 []request.Option
	}
	setPlatformApplicationAttributesWithContextReturns struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}
	setPlatformApplicationAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}
	SetSMSAttributesStub        func(*sns.SetSMSAttributesInput) (*sns.SetSMSAttributesOutput, error)
	setSMSAttributesMutex       sync.RWMutex
	setSMSAttributesArgsForCall []struct {
		arg1 *sns.SetSMSAttributesInput
	}
	setSMSAttributesReturns struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}
	setSMSAttributesReturnsOnCall map[int]struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}
	SetSMSAttributesRequestStub        func(*sns.SetSMSAttributesInput) (*request.Request, *sns.SetSMSAttributesOutput)
	setSMSAttributesRequestMutex       sync.RWMutex
	setSMSAttributesRequestArgsForCall []struct {
		arg1 *sns.SetSMSAttributesInput
	}
	setSMSAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.SetSMSAttributesOutput
	}
	setSMSAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.SetSMSAttributesOutput
	}
	SetSMSAttributesWithContextStub        func(context.Context, *sns.SetSMSAttributesInput, ...request.Option) (*sns.SetSMSAttributesOutput, error)
	setSMSAttributesWithContextMutex       sync.RWMutex
	setSMSAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.SetSMSAttributesInput
		arg3 []request.Option
	}
	setSMSAttributesWithContextReturns struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}
	setSMSAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}
	SetSubscriptionAttributesStub        func(*sns.SetSubscriptionAttributesInput) (*sns.SetSubscriptionAttributesOutput, error)
	setSubscriptionAttributesMutex       sync.RWMutex
	setSubscriptionAttributesArgsForCall []struct {
		arg1 *sns.SetSubscriptionAttributesInput
	}
	setSubscriptionAttributesReturns struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}
	setSubscriptionAttributesReturnsOnCall map[int]struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}
	SetSubscriptionAttributesRequestStub        func(*sns.SetSubscriptionAttributesInput) (*request.Request, *sns.SetSubscriptionAttributesOutput)
	setSubscriptionAttributesRequestMutex       sync.RWMutex
	setSubscriptionAttributesRequestArgsForCall []struct {
		arg1 *sns.SetSubscriptionAttributesInput
	}
	setSubscriptionAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.SetSubscriptionAttributesOutput
	}
	setSubscriptionAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.SetSubscriptionAttributesOutput
	}
	SetSubscriptionAttributesWithContextStub        func(context.Context, *sns.SetSubscriptionAttributesInput, ...request.Option) (*sns.SetSubscriptionAttributesOutput, error)
	setSubscriptionAttributesWithContextMutex       sync.RWMutex
	setSubscriptionAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.SetSubscriptionAttributesInput
		arg3 []request.Option
	}
	setSubscriptionAttributesWithContextReturns struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}
	setSubscriptionAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}
	SetTopicAttributesStub        func(*sns.SetTopicAttributesInput) (*sns.SetTopicAttributesOutput, error)
	setTopicAttributesMutex       sync.RWMutex
	setTopicAttributesArgsForCall []struct {
		arg1 *sns.SetTopicAttributesInput
	}
	setTopicAttributesReturns struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}
	setTopicAttributesReturnsOnCall map[int]struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}
	SetTopicAttributesRequestStub        func(*sns.SetTopicAttributesInput) (*request.Request, *sns.SetTopicAttributesOutput)
	setTopicAttributesRequestMutex       sync.RWMutex
	setTopicAttributesRequestArgsForCall []struct {
		arg1 *sns.SetTopicAttributesInput
	}
	setTopicAttributesRequestReturns struct {
		result1 *request.Request
		result2 *sns.SetTopicAttributesOutput
	}
	setTopicAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.SetTopicAttributesOutput
	}
	SetTopicAttributesWithContextStub        func(context.Context, *sns.SetTopicAttributesInput, ...request.Option) (*sns.SetTopicAttributesOutput, error)
	setTopicAttributesWithContextMutex       sync.RWMutex
	setTopicAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.SetTopicAttributesInput
		arg3 []request.Option
	}
	setTopicAttributesWithContextReturns struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}
	setTopicAttributesWithContextReturnsOnCall map[int]struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}
	SubscribeStub        func(*sns.SubscribeInput) (*sns.SubscribeOutput, error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 *sns.SubscribeInput
	}
	subscribeReturns struct {
		result1 *sns.SubscribeOutput
		result2 error
	}
	subscribeReturnsOnCall map[int]struct {
		result1 *sns.SubscribeOutput
		result2 error
	}
	SubscribeRequestStub        func(*sns.SubscribeInput) (*request.Request, *sns.SubscribeOutput)
	subscribeRequestMutex       sync.RWMutex
	subscribeRequestArgsForCall []struct {
		arg1 *sns.SubscribeInput
	}
	subscribeRequestReturns struct {
		result1 *request.Request
		result2 *sns.SubscribeOutput
	}
	subscribeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.SubscribeOutput
	}
	SubscribeWithContextStub        func(context.Context, *sns.SubscribeInput, ...request.Option) (*sns.SubscribeOutput, error)
	subscribeWithContextMutex       sync.RWMutex
	subscribeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.SubscribeInput
		arg3 []request.Option
	}
	subscribeWithContextReturns struct {
		result1 *sns.SubscribeOutput
		result2 error
	}
	subscribeWithContextReturnsOnCall map[int]struct {
		result1 *sns.SubscribeOutput
		result2 error
	}
	TagResourceStub        func(*sns.TagResourceInput) (*sns.TagResourceOutput, error)
	tagResourceMutex       sync.RWMutex
	tagResourceArgsForCall []struct {
		arg1 *sns.TagResourceInput
	}
	tagResourceReturns struct {
		result1 *sns.TagResourceOutput
		result2 error
	}
	tagResourceReturnsOnCall map[int]struct {
		result1 *sns.TagResourceOutput
		result2 error
	}
	TagResourceRequestStub        func(*sns.TagResourceInput) (*request.Request, *sns.TagResourceOutput)
	tagResourceRequestMutex       sync.RWMutex
	tagResourceRequestArgsForCall []struct {
		arg1 *sns.TagResourceInput
	}
	tagResourceRequestReturns struct {
		result1 *request.Request
		result2 *sns.TagResourceOutput
	}
	tagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.TagResourceOutput
	}
	TagResourceWithContextStub        func(context.Context, *sns.TagResourceInput, ...request.Option) (*sns.TagResourceOutput, error)
	tagResourceWithContextMutex       sync.RWMutex
	tagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.TagResourceInput
		arg3 []request.Option
	}
	tagResourceWithContextReturns struct {
		result1 *sns.TagResourceOutput
		result2 error
	}
	tagResourceWithContextReturnsOnCall map[int]struct {
		result1 *sns.TagResourceOutput
		result2 error
	}
	UnsubscribeStub        func(*sns.UnsubscribeInput) (*sns.UnsubscribeOutput, error)
	unsubscribeMutex       sync.RWMutex
	unsubscribeArgsForCall []struct {
		arg1 *sns.UnsubscribeInput
	}
	unsubscribeReturns struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}
	unsubscribeReturnsOnCall map[int]struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}
	UnsubscribeRequestStub        func(*sns.UnsubscribeInput) (*request.Request, *sns.UnsubscribeOutput)
	unsubscribeRequestMutex       sync.RWMutex
	unsubscribeRequestArgsForCall []struct {
		arg1 *sns.UnsubscribeInput
	}
	unsubscribeRequestReturns struct {
		result1 *request.Request
		result2 *sns.UnsubscribeOutput
	}
	unsubscribeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.UnsubscribeOutput
	}
	UnsubscribeWithContextStub        func(context.Context, *sns.UnsubscribeInput, ...request.Option) (*sns.UnsubscribeOutput, error)
	unsubscribeWithContextMutex       sync.RWMutex
	unsubscribeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.UnsubscribeInput
		arg3 []request.Option
	}
	unsubscribeWithContextReturns struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}
	unsubscribeWithContextReturnsOnCall map[int]struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}
	UntagResourceStub        func(*sns.UntagResourceInput) (*sns.UntagResourceOutput, error)
	untagResourceMutex       sync.RWMutex
	untagResourceArgsForCall []struct {
		arg1 *sns.UntagResourceInput
	}
	untagResourceReturns struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}
	untagResourceReturnsOnCall map[int]struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}
	UntagResourceRequestStub        func(*sns.UntagResourceInput) (*request.Request, *sns.UntagResourceOutput)
	untagResourceRequestMutex       sync.RWMutex
	untagResourceRequestArgsForCall []struct {
		arg1 *sns.UntagResourceInput
	}
	untagResourceRequestReturns struct {
		result1 *request.Request
		result2 *sns.UntagResourceOutput
	}
	untagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *sns.UntagResourceOutput
	}
	UntagResourceWithContextStub        func(context.Context, *sns.UntagResourceInput, ...request.Option) (*sns.UntagResourceOutput, error)
	untagResourceWithContextMutex       sync.RWMutex
	untagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *sns.UntagResourceInput
		arg3 []request.Option
	}
	untagResourceWithContextReturns struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}
	untagResourceWithContextReturnsOnCall map[int]struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeISNSAPI) AddPermission(arg1 *sns.AddPermissionInput) (*sns.AddPermissionOutput, error) {
	fake.addPermissionMutex.Lock()
	ret, specificReturn := fake.addPermissionReturnsOnCall[len(fake.addPermissionArgsForCall)]
	fake.addPermissionArgsForCall = append(fake.addPermissionArgsForCall, struct {
		arg1 *sns.AddPermissionInput
	}{arg1})
	stub := fake.AddPermissionStub
	fakeReturns := fake.addPermissionReturns
	fake.recordInvocation("AddPermission", []interface{}{arg1})
	fake.addPermissionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) AddPermissionCallCount() int {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	return len(fake.addPermissionArgsForCall)
}

func (fake *FakeISNSAPI) AddPermissionCalls(stub func(*sns.AddPermissionInput) (*sns.AddPermissionOutput, error)) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = stub
}

func (fake *FakeISNSAPI) AddPermissionArgsForCall(i int) *sns.AddPermissionInput {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	argsForCall := fake.addPermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) AddPermissionReturns(result1 *sns.AddPermissionOutput, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	fake.addPermissionReturns = struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) AddPermissionReturnsOnCall(i int, result1 *sns.AddPermissionOutput, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	if fake.addPermissionReturnsOnCall == nil {
		fake.addPermissionReturnsOnCall = make(map[int]struct {
			result1 *sns.AddPermissionOutput
			result2 error
		})
	}
	fake.addPermissionReturnsOnCall[i] = struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) AddPermissionRequest(arg1 *sns.AddPermissionInput) (*request.Request, *sns.AddPermissionOutput) {
	fake.addPermissionRequestMutex.Lock()
	ret, specificReturn := fake.addPermissionRequestReturnsOnCall[len(fake.addPermissionRequestArgsForCall)]
	fake.addPermissionRequestArgsForCall = append(fake.addPermissionRequestArgsForCall, struct {
		arg1 *sns.AddPermissionInput
	}{arg1})
	stub := fake.AddPermissionRequestStub
	fakeReturns := fake.addPermissionRequestReturns
	fake.recordInvocation("AddPermissionRequest", []interface{}{arg1})
	fake.addPermissionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) AddPermissionRequestCallCount() int {
	fake.addPermissionRequestMutex.RLock()
	defer fake.addPermissionRequestMutex.RUnlock()
	return len(fake.addPermissionRequestArgsForCall)
}

func (fake *FakeISNSAPI) AddPermissionRequestCalls(stub func(*sns.AddPermissionInput) (*request.Request, *sns.AddPermissionOutput)) {
	fake.addPermissionRequestMutex.Lock()
	defer fake.addPermissionRequestMutex.Unlock()
	fake.AddPermissionRequestStub = stub
}

func (fake *FakeISNSAPI) AddPermissionRequestArgsForCall(i int) *sns.AddPermissionInput {
	fake.addPermissionRequestMutex.RLock()
	defer fake.addPermissionRequestMutex.RUnlock()
	argsForCall := fake.addPermissionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) AddPermissionRequestReturns(result1 *request.Request, result2 *sns.AddPermissionOutput) {
	fake.addPermissionRequestMutex.Lock()
	defer fake.addPermissionRequestMutex.Unlock()
	fake.AddPermissionRequestStub = nil
	fake.addPermissionRequestReturns = struct {
		result1 *request.Request
		result2 *sns.AddPermissionOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) AddPermissionRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.AddPermissionOutput) {
	fake.addPermissionRequestMutex.Lock()
	defer fake.addPermissionRequestMutex.Unlock()
	fake.AddPermissionRequestStub = nil
	if fake.addPermissionRequestReturnsOnCall == nil {
		fake.addPermissionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.AddPermissionOutput
		})
	}
	fake.addPermissionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.AddPermissionOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) AddPermissionWithContext(arg1 context.Context, arg2 *sns.AddPermissionInput, arg3 ...request.Option) (*sns.AddPermissionOutput, error) {
	fake.addPermissionWithContextMutex.Lock()
	ret, specificReturn := fake.addPermissionWithContextReturnsOnCall[len(fake.addPermissionWithContextArgsForCall)]
	fake.addPermissionWithContextArgsForCall = append(fake.addPermissionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.AddPermissionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddPermissionWithContextStub
	fakeReturns := fake.addPermissionWithContextReturns
	fake.recordInvocation("AddPermissionWithContext", []interface{}{arg1, arg2, arg3})
	fake.addPermissionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) AddPermissionWithContextCallCount() int {
	fake.addPermissionWithContextMutex.RLock()
	defer fake.addPermissionWithContextMutex.RUnlock()
	return len(fake.addPermissionWithContextArgsForCall)
}

func (fake *FakeISNSAPI) AddPermissionWithContextCalls(stub func(context.Context, *sns.AddPermissionInput, ...request.Option) (*sns.AddPermissionOutput, error)) {
	fake.addPermissionWithContextMutex.Lock()
	defer fake.addPermissionWithContextMutex.Unlock()
	fake.AddPermissionWithContextStub = stub
}

func (fake *FakeISNSAPI) AddPermissionWithContextArgsForCall(i int) (context.Context, *sns.AddPermissionInput, []request.Option) {
	fake.addPermissionWithContextMutex.RLock()
	defer fake.addPermissionWithContextMutex.RUnlock()
	argsForCall := fake.addPermissionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) AddPermissionWithContextReturns(result1 *sns.AddPermissionOutput, result2 error) {
	fake.addPermissionWithContextMutex.Lock()
	defer fake.addPermissionWithContextMutex.Unlock()
	fake.AddPermissionWithContextStub = nil
	fake.addPermissionWithContextReturns = struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) AddPermissionWithContextReturnsOnCall(i int, result1 *sns.AddPermissionOutput, result2 error) {
	fake.addPermissionWithContextMutex.Lock()
	defer fake.addPermissionWithContextMutex.Unlock()
	fake.AddPermissionWithContextStub = nil
	if fake.addPermissionWithContextReturnsOnCall == nil {
		fake.addPermissionWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.AddPermissionOutput
			result2 error
		})
	}
	fake.addPermissionWithContextReturnsOnCall[i] = struct {
		result1 *sns.AddPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOut(arg1 *sns.CheckIfPhoneNumberIsOptedOutInput) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	fake.checkIfPhoneNumberIsOptedOutMutex.Lock()
	ret, specificReturn := fake.checkIfPhoneNumberIsOptedOutReturnsOnCall[len(fake.checkIfPhoneNumberIsOptedOutArgsForCall)]
	fake.checkIfPhoneNumberIsOptedOutArgsForCall = append(fake.checkIfPhoneNumberIsOptedOutArgsForCall, struct {
		arg1 *sns.CheckIfPhoneNumberIsOptedOutInput
	}{arg1})
	stub := fake.CheckIfPhoneNumberIsOptedOutStub
	fakeReturns := fake.checkIfPhoneNumberIsOptedOutReturns
	fake.recordInvocation("CheckIfPhoneNumberIsOptedOut", []interface{}{arg1})
	fake.checkIfPhoneNumberIsOptedOutMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutCallCount() int {
	fake.checkIfPhoneNumberIsOptedOutMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutMutex.RUnlock()
	return len(fake.checkIfPhoneNumberIsOptedOutArgsForCall)
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutCalls(stub func(*sns.CheckIfPhoneNumberIsOptedOutInput) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error)) {
	fake.checkIfPhoneNumberIsOptedOutMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutStub = stub
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutArgsForCall(i int) *sns.CheckIfPhoneNumberIsOptedOutInput {
	fake.checkIfPhoneNumberIsOptedOutMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutMutex.RUnlock()
	argsForCall := fake.checkIfPhoneNumberIsOptedOutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutReturns(result1 *sns.CheckIfPhoneNumberIsOptedOutOutput, result2 error) {
	fake.checkIfPhoneNumberIsOptedOutMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutStub = nil
	fake.checkIfPhoneNumberIsOptedOutReturns = struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutReturnsOnCall(i int, result1 *sns.CheckIfPhoneNumberIsOptedOutOutput, result2 error) {
	fake.checkIfPhoneNumberIsOptedOutMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutStub = nil
	if fake.checkIfPhoneNumberIsOptedOutReturnsOnCall == nil {
		fake.checkIfPhoneNumberIsOptedOutReturnsOnCall = make(map[int]struct {
			result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
			result2 error
		})
	}
	fake.checkIfPhoneNumberIsOptedOutReturnsOnCall[i] = struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutRequest(arg1 *sns.CheckIfPhoneNumberIsOptedOutInput) (*request.Request, *sns.CheckIfPhoneNumberIsOptedOutOutput) {
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.Lock()
	ret, specificReturn := fake.checkIfPhoneNumberIsOptedOutRequestReturnsOnCall[len(fake.checkIfPhoneNumberIsOptedOutRequestArgsForCall)]
	fake.checkIfPhoneNumberIsOptedOutRequestArgsForCall = append(fake.checkIfPhoneNumberIsOptedOutRequestArgsForCall, struct {
		arg1 *sns.CheckIfPhoneNumberIsOptedOutInput
	}{arg1})
	stub := fake.CheckIfPhoneNumberIsOptedOutRequestStub
	fakeReturns := fake.checkIfPhoneNumberIsOptedOutRequestReturns
	fake.recordInvocation("CheckIfPhoneNumberIsOptedOutRequest", []interface{}{arg1})
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutRequestCallCount() int {
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutRequestMutex.RUnlock()
	return len(fake.checkIfPhoneNumberIsOptedOutRequestArgsForCall)
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutRequestCalls(stub func(*sns.CheckIfPhoneNumberIsOptedOutInput) (*request.Request, *sns.CheckIfPhoneNumberIsOptedOutOutput)) {
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutRequestMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutRequestStub = stub
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutRequestArgsForCall(i int) *sns.CheckIfPhoneNumberIsOptedOutInput {
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutRequestMutex.RUnlock()
	argsForCall := fake.checkIfPhoneNumberIsOptedOutRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutRequestReturns(result1 *request.Request, result2 *sns.CheckIfPhoneNumberIsOptedOutOutput) {
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutRequestMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutRequestStub = nil
	fake.checkIfPhoneNumberIsOptedOutRequestReturns = struct {
		result1 *request.Request
		result2 *sns.CheckIfPhoneNumberIsOptedOutOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.CheckIfPhoneNumberIsOptedOutOutput) {
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutRequestMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutRequestStub = nil
	if fake.checkIfPhoneNumberIsOptedOutRequestReturnsOnCall == nil {
		fake.checkIfPhoneNumberIsOptedOutRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.CheckIfPhoneNumberIsOptedOutOutput
		})
	}
	fake.checkIfPhoneNumberIsOptedOutRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.CheckIfPhoneNumberIsOptedOutOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutWithContext(arg1 context.Context, arg2 *sns.CheckIfPhoneNumberIsOptedOutInput, arg3 ...request.Option) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Lock()
	ret, specificReturn := fake.checkIfPhoneNumberIsOptedOutWithContextReturnsOnCall[len(fake.checkIfPhoneNumberIsOptedOutWithContextArgsForCall)]
	fake.checkIfPhoneNumberIsOptedOutWithContextArgsForCall = append(fake.checkIfPhoneNumberIsOptedOutWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.CheckIfPhoneNumberIsOptedOutInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CheckIfPhoneNumberIsOptedOutWithContextStub
	fakeReturns := fake.checkIfPhoneNumberIsOptedOutWithContextReturns
	fake.recordInvocation("CheckIfPhoneNumberIsOptedOutWithContext", []interface{}{arg1, arg2, arg3})
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutWithContextCallCount() int {
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutWithContextMutex.RUnlock()
	return len(fake.checkIfPhoneNumberIsOptedOutWithContextArgsForCall)
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutWithContextCalls(stub func(context.Context, *sns.CheckIfPhoneNumberIsOptedOutInput, ...request.Option) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error)) {
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutWithContextStub = stub
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutWithContextArgsForCall(i int) (context.Context, *sns.CheckIfPhoneNumberIsOptedOutInput, []request.Option) {
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutWithContextMutex.RUnlock()
	argsForCall := fake.checkIfPhoneNumberIsOptedOutWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutWithContextReturns(result1 *sns.CheckIfPhoneNumberIsOptedOutOutput, result2 error) {
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutWithContextStub = nil
	fake.checkIfPhoneNumberIsOptedOutWithContextReturns = struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CheckIfPhoneNumberIsOptedOutWithContextReturnsOnCall(i int, result1 *sns.CheckIfPhoneNumberIsOptedOutOutput, result2 error) {
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Lock()
	defer fake.checkIfPhoneNumberIsOptedOutWithContextMutex.Unlock()
	fake.CheckIfPhoneNumberIsOptedOutWithContextStub = nil
	if fake.checkIfPhoneNumberIsOptedOutWithContextReturnsOnCall == nil {
		fake.checkIfPhoneNumberIsOptedOutWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
			result2 error
		})
	}
	fake.checkIfPhoneNumberIsOptedOutWithContextReturnsOnCall[i] = struct {
		result1 *sns.CheckIfPhoneNumberIsOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ConfirmSubscription(arg1 *sns.ConfirmSubscriptionInput) (*sns.ConfirmSubscriptionOutput, error) {
	fake.confirmSubscriptionMutex.Lock()
	ret, specificReturn := fake.confirmSubscriptionReturnsOnCall[len(fake.confirmSubscriptionArgsForCall)]
	fake.confirmSubscriptionArgsForCall = append(fake.confirmSubscriptionArgsForCall, struct {
		arg1 *sns.ConfirmSubscriptionInput
	}{arg1})
	stub := fake.ConfirmSubscriptionStub
	fakeReturns := fake.confirmSubscriptionReturns
	fake.recordInvocation("ConfirmSubscription", []interface{}{arg1})
	fake.confirmSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ConfirmSubscriptionCallCount() int {
	fake.confirmSubscriptionMutex.RLock()
	defer fake.confirmSubscriptionMutex.RUnlock()
	return len(fake.confirmSubscriptionArgsForCall)
}

func (fake *FakeISNSAPI) ConfirmSubscriptionCalls(stub func(*sns.ConfirmSubscriptionInput) (*sns.ConfirmSubscriptionOutput, error)) {
	fake.confirmSubscriptionMutex.Lock()
	defer fake.confirmSubscriptionMutex.Unlock()
	fake.ConfirmSubscriptionStub = stub
}

func (fake *FakeISNSAPI) ConfirmSubscriptionArgsForCall(i int) *sns.ConfirmSubscriptionInput {
	fake.confirmSubscriptionMutex.RLock()
	defer fake.confirmSubscriptionMutex.RUnlock()
	argsForCall := fake.confirmSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ConfirmSubscriptionReturns(result1 *sns.ConfirmSubscriptionOutput, result2 error) {
	fake.confirmSubscriptionMutex.Lock()
	defer fake.confirmSubscriptionMutex.Unlock()
	fake.ConfirmSubscriptionStub = nil
	fake.confirmSubscriptionReturns = struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ConfirmSubscriptionReturnsOnCall(i int, result1 *sns.ConfirmSubscriptionOutput, result2 error) {
	fake.confirmSubscriptionMutex.Lock()
	defer fake.confirmSubscriptionMutex.Unlock()
	fake.ConfirmSubscriptionStub = nil
	if fake.confirmSubscriptionReturnsOnCall == nil {
		fake.confirmSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *sns.ConfirmSubscriptionOutput
			result2 error
		})
	}
	fake.confirmSubscriptionReturnsOnCall[i] = struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ConfirmSubscriptionRequest(arg1 *sns.ConfirmSubscriptionInput) (*request.Request, *sns.ConfirmSubscriptionOutput) {
	fake.confirmSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.confirmSubscriptionRequestReturnsOnCall[len(fake.confirmSubscriptionRequestArgsForCall)]
	fake.confirmSubscriptionRequestArgsForCall = append(fake.confirmSubscriptionRequestArgsForCall, struct {
		arg1 *sns.ConfirmSubscriptionInput
	}{arg1})
	stub := fake.ConfirmSubscriptionRequestStub
	fakeReturns := fake.confirmSubscriptionRequestReturns
	fake.recordInvocation("ConfirmSubscriptionRequest", []interface{}{arg1})
	fake.confirmSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ConfirmSubscriptionRequestCallCount() int {
	fake.confirmSubscriptionRequestMutex.RLock()
	defer fake.confirmSubscriptionRequestMutex.RUnlock()
	return len(fake.confirmSubscriptionRequestArgsForCall)
}

func (fake *FakeISNSAPI) ConfirmSubscriptionRequestCalls(stub func(*sns.ConfirmSubscriptionInput) (*request.Request, *sns.ConfirmSubscriptionOutput)) {
	fake.confirmSubscriptionRequestMutex.Lock()
	defer fake.confirmSubscriptionRequestMutex.Unlock()
	fake.ConfirmSubscriptionRequestStub = stub
}

func (fake *FakeISNSAPI) ConfirmSubscriptionRequestArgsForCall(i int) *sns.ConfirmSubscriptionInput {
	fake.confirmSubscriptionRequestMutex.RLock()
	defer fake.confirmSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.confirmSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ConfirmSubscriptionRequestReturns(result1 *request.Request, result2 *sns.ConfirmSubscriptionOutput) {
	fake.confirmSubscriptionRequestMutex.Lock()
	defer fake.confirmSubscriptionRequestMutex.Unlock()
	fake.ConfirmSubscriptionRequestStub = nil
	fake.confirmSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ConfirmSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ConfirmSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ConfirmSubscriptionOutput) {
	fake.confirmSubscriptionRequestMutex.Lock()
	defer fake.confirmSubscriptionRequestMutex.Unlock()
	fake.ConfirmSubscriptionRequestStub = nil
	if fake.confirmSubscriptionRequestReturnsOnCall == nil {
		fake.confirmSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ConfirmSubscriptionOutput
		})
	}
	fake.confirmSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ConfirmSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ConfirmSubscriptionWithContext(arg1 context.Context, arg2 *sns.ConfirmSubscriptionInput, arg3 ...request.Option) (*sns.ConfirmSubscriptionOutput, error) {
	fake.confirmSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.confirmSubscriptionWithContextReturnsOnCall[len(fake.confirmSubscriptionWithContextArgsForCall)]
	fake.confirmSubscriptionWithContextArgsForCall = append(fake.confirmSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ConfirmSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ConfirmSubscriptionWithContextStub
	fakeReturns := fake.confirmSubscriptionWithContextReturns
	fake.recordInvocation("ConfirmSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.confirmSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ConfirmSubscriptionWithContextCallCount() int {
	fake.confirmSubscriptionWithContextMutex.RLock()
	defer fake.confirmSubscriptionWithContextMutex.RUnlock()
	return len(fake.confirmSubscriptionWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ConfirmSubscriptionWithContextCalls(stub func(context.Context, *sns.ConfirmSubscriptionInput, ...request.Option) (*sns.ConfirmSubscriptionOutput, error)) {
	fake.confirmSubscriptionWithContextMutex.Lock()
	defer fake.confirmSubscriptionWithContextMutex.Unlock()
	fake.ConfirmSubscriptionWithContextStub = stub
}

func (fake *FakeISNSAPI) ConfirmSubscriptionWithContextArgsForCall(i int) (context.Context, *sns.ConfirmSubscriptionInput, []request.Option) {
	fake.confirmSubscriptionWithContextMutex.RLock()
	defer fake.confirmSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.confirmSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ConfirmSubscriptionWithContextReturns(result1 *sns.ConfirmSubscriptionOutput, result2 error) {
	fake.confirmSubscriptionWithContextMutex.Lock()
	defer fake.confirmSubscriptionWithContextMutex.Unlock()
	fake.ConfirmSubscriptionWithContextStub = nil
	fake.confirmSubscriptionWithContextReturns = struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ConfirmSubscriptionWithContextReturnsOnCall(i int, result1 *sns.ConfirmSubscriptionOutput, result2 error) {
	fake.confirmSubscriptionWithContextMutex.Lock()
	defer fake.confirmSubscriptionWithContextMutex.Unlock()
	fake.ConfirmSubscriptionWithContextStub = nil
	if fake.confirmSubscriptionWithContextReturnsOnCall == nil {
		fake.confirmSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ConfirmSubscriptionOutput
			result2 error
		})
	}
	fake.confirmSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *sns.ConfirmSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformApplication(arg1 *sns.CreatePlatformApplicationInput) (*sns.CreatePlatformApplicationOutput, error) {
	fake.createPlatformApplicationMutex.Lock()
	ret, specificReturn := fake.createPlatformApplicationReturnsOnCall[len(fake.createPlatformApplicationArgsForCall)]
	fake.createPlatformApplicationArgsForCall = append(fake.createPlatformApplicationArgsForCall, struct {
		arg1 *sns.CreatePlatformApplicationInput
	}{arg1})
	stub := fake.CreatePlatformApplicationStub
	fakeReturns := fake.createPlatformApplicationReturns
	fake.recordInvocation("CreatePlatformApplication", []interface{}{arg1})
	fake.createPlatformApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreatePlatformApplicationCallCount() int {
	fake.createPlatformApplicationMutex.RLock()
	defer fake.createPlatformApplicationMutex.RUnlock()
	return len(fake.createPlatformApplicationArgsForCall)
}

func (fake *FakeISNSAPI) CreatePlatformApplicationCalls(stub func(*sns.CreatePlatformApplicationInput) (*sns.CreatePlatformApplicationOutput, error)) {
	fake.createPlatformApplicationMutex.Lock()
	defer fake.createPlatformApplicationMutex.Unlock()
	fake.CreatePlatformApplicationStub = stub
}

func (fake *FakeISNSAPI) CreatePlatformApplicationArgsForCall(i int) *sns.CreatePlatformApplicationInput {
	fake.createPlatformApplicationMutex.RLock()
	defer fake.createPlatformApplicationMutex.RUnlock()
	argsForCall := fake.createPlatformApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CreatePlatformApplicationReturns(result1 *sns.CreatePlatformApplicationOutput, result2 error) {
	fake.createPlatformApplicationMutex.Lock()
	defer fake.createPlatformApplicationMutex.Unlock()
	fake.CreatePlatformApplicationStub = nil
	fake.createPlatformApplicationReturns = struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformApplicationReturnsOnCall(i int, result1 *sns.CreatePlatformApplicationOutput, result2 error) {
	fake.createPlatformApplicationMutex.Lock()
	defer fake.createPlatformApplicationMutex.Unlock()
	fake.CreatePlatformApplicationStub = nil
	if fake.createPlatformApplicationReturnsOnCall == nil {
		fake.createPlatformApplicationReturnsOnCall = make(map[int]struct {
			result1 *sns.CreatePlatformApplicationOutput
			result2 error
		})
	}
	fake.createPlatformApplicationReturnsOnCall[i] = struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformApplicationRequest(arg1 *sns.CreatePlatformApplicationInput) (*request.Request, *sns.CreatePlatformApplicationOutput) {
	fake.createPlatformApplicationRequestMutex.Lock()
	ret, specificReturn := fake.createPlatformApplicationRequestReturnsOnCall[len(fake.createPlatformApplicationRequestArgsForCall)]
	fake.createPlatformApplicationRequestArgsForCall = append(fake.createPlatformApplicationRequestArgsForCall, struct {
		arg1 *sns.CreatePlatformApplicationInput
	}{arg1})
	stub := fake.CreatePlatformApplicationRequestStub
	fakeReturns := fake.createPlatformApplicationRequestReturns
	fake.recordInvocation("CreatePlatformApplicationRequest", []interface{}{arg1})
	fake.createPlatformApplicationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreatePlatformApplicationRequestCallCount() int {
	fake.createPlatformApplicationRequestMutex.RLock()
	defer fake.createPlatformApplicationRequestMutex.RUnlock()
	return len(fake.createPlatformApplicationRequestArgsForCall)
}

func (fake *FakeISNSAPI) CreatePlatformApplicationRequestCalls(stub func(*sns.CreatePlatformApplicationInput) (*request.Request, *sns.CreatePlatformApplicationOutput)) {
	fake.createPlatformApplicationRequestMutex.Lock()
	defer fake.createPlatformApplicationRequestMutex.Unlock()
	fake.CreatePlatformApplicationRequestStub = stub
}

func (fake *FakeISNSAPI) CreatePlatformApplicationRequestArgsForCall(i int) *sns.CreatePlatformApplicationInput {
	fake.createPlatformApplicationRequestMutex.RLock()
	defer fake.createPlatformApplicationRequestMutex.RUnlock()
	argsForCall := fake.createPlatformApplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CreatePlatformApplicationRequestReturns(result1 *request.Request, result2 *sns.CreatePlatformApplicationOutput) {
	fake.createPlatformApplicationRequestMutex.Lock()
	defer fake.createPlatformApplicationRequestMutex.Unlock()
	fake.CreatePlatformApplicationRequestStub = nil
	fake.createPlatformApplicationRequestReturns = struct {
		result1 *request.Request
		result2 *sns.CreatePlatformApplicationOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformApplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.CreatePlatformApplicationOutput) {
	fake.createPlatformApplicationRequestMutex.Lock()
	defer fake.createPlatformApplicationRequestMutex.Unlock()
	fake.CreatePlatformApplicationRequestStub = nil
	if fake.createPlatformApplicationRequestReturnsOnCall == nil {
		fake.createPlatformApplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.CreatePlatformApplicationOutput
		})
	}
	fake.createPlatformApplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.CreatePlatformApplicationOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformApplicationWithContext(arg1 context.Context, arg2 *sns.CreatePlatformApplicationInput, arg3 ...request.Option) (*sns.CreatePlatformApplicationOutput, error) {
	fake.createPlatformApplicationWithContextMutex.Lock()
	ret, specificReturn := fake.createPlatformApplicationWithContextReturnsOnCall[len(fake.createPlatformApplicationWithContextArgsForCall)]
	fake.createPlatformApplicationWithContextArgsForCall = append(fake.createPlatformApplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.CreatePlatformApplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreatePlatformApplicationWithContextStub
	fakeReturns := fake.createPlatformApplicationWithContextReturns
	fake.recordInvocation("CreatePlatformApplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPlatformApplicationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreatePlatformApplicationWithContextCallCount() int {
	fake.createPlatformApplicationWithContextMutex.RLock()
	defer fake.createPlatformApplicationWithContextMutex.RUnlock()
	return len(fake.createPlatformApplicationWithContextArgsForCall)
}

func (fake *FakeISNSAPI) CreatePlatformApplicationWithContextCalls(stub func(context.Context, *sns.CreatePlatformApplicationInput, ...request.Option) (*sns.CreatePlatformApplicationOutput, error)) {
	fake.createPlatformApplicationWithContextMutex.Lock()
	defer fake.createPlatformApplicationWithContextMutex.Unlock()
	fake.CreatePlatformApplicationWithContextStub = stub
}

func (fake *FakeISNSAPI) CreatePlatformApplicationWithContextArgsForCall(i int) (context.Context, *sns.CreatePlatformApplicationInput, []request.Option) {
	fake.createPlatformApplicationWithContextMutex.RLock()
	defer fake.createPlatformApplicationWithContextMutex.RUnlock()
	argsForCall := fake.createPlatformApplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) CreatePlatformApplicationWithContextReturns(result1 *sns.CreatePlatformApplicationOutput, result2 error) {
	fake.createPlatformApplicationWithContextMutex.Lock()
	defer fake.createPlatformApplicationWithContextMutex.Unlock()
	fake.CreatePlatformApplicationWithContextStub = nil
	fake.createPlatformApplicationWithContextReturns = struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformApplicationWithContextReturnsOnCall(i int, result1 *sns.CreatePlatformApplicationOutput, result2 error) {
	fake.createPlatformApplicationWithContextMutex.Lock()
	defer fake.createPlatformApplicationWithContextMutex.Unlock()
	fake.CreatePlatformApplicationWithContextStub = nil
	if fake.createPlatformApplicationWithContextReturnsOnCall == nil {
		fake.createPlatformApplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.CreatePlatformApplicationOutput
			result2 error
		})
	}
	fake.createPlatformApplicationWithContextReturnsOnCall[i] = struct {
		result1 *sns.CreatePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformEndpoint(arg1 *sns.CreatePlatformEndpointInput) (*sns.CreatePlatformEndpointOutput, error) {
	fake.createPlatformEndpointMutex.Lock()
	ret, specificReturn := fake.createPlatformEndpointReturnsOnCall[len(fake.createPlatformEndpointArgsForCall)]
	fake.createPlatformEndpointArgsForCall = append(fake.createPlatformEndpointArgsForCall, struct {
		arg1 *sns.CreatePlatformEndpointInput
	}{arg1})
	stub := fake.CreatePlatformEndpointStub
	fakeReturns := fake.createPlatformEndpointReturns
	fake.recordInvocation("CreatePlatformEndpoint", []interface{}{arg1})
	fake.createPlatformEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreatePlatformEndpointCallCount() int {
	fake.createPlatformEndpointMutex.RLock()
	defer fake.createPlatformEndpointMutex.RUnlock()
	return len(fake.createPlatformEndpointArgsForCall)
}

func (fake *FakeISNSAPI) CreatePlatformEndpointCalls(stub func(*sns.CreatePlatformEndpointInput) (*sns.CreatePlatformEndpointOutput, error)) {
	fake.createPlatformEndpointMutex.Lock()
	defer fake.createPlatformEndpointMutex.Unlock()
	fake.CreatePlatformEndpointStub = stub
}

func (fake *FakeISNSAPI) CreatePlatformEndpointArgsForCall(i int) *sns.CreatePlatformEndpointInput {
	fake.createPlatformEndpointMutex.RLock()
	defer fake.createPlatformEndpointMutex.RUnlock()
	argsForCall := fake.createPlatformEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CreatePlatformEndpointReturns(result1 *sns.CreatePlatformEndpointOutput, result2 error) {
	fake.createPlatformEndpointMutex.Lock()
	defer fake.createPlatformEndpointMutex.Unlock()
	fake.CreatePlatformEndpointStub = nil
	fake.createPlatformEndpointReturns = struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformEndpointReturnsOnCall(i int, result1 *sns.CreatePlatformEndpointOutput, result2 error) {
	fake.createPlatformEndpointMutex.Lock()
	defer fake.createPlatformEndpointMutex.Unlock()
	fake.CreatePlatformEndpointStub = nil
	if fake.createPlatformEndpointReturnsOnCall == nil {
		fake.createPlatformEndpointReturnsOnCall = make(map[int]struct {
			result1 *sns.CreatePlatformEndpointOutput
			result2 error
		})
	}
	fake.createPlatformEndpointReturnsOnCall[i] = struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformEndpointRequest(arg1 *sns.CreatePlatformEndpointInput) (*request.Request, *sns.CreatePlatformEndpointOutput) {
	fake.createPlatformEndpointRequestMutex.Lock()
	ret, specificReturn := fake.createPlatformEndpointRequestReturnsOnCall[len(fake.createPlatformEndpointRequestArgsForCall)]
	fake.createPlatformEndpointRequestArgsForCall = append(fake.createPlatformEndpointRequestArgsForCall, struct {
		arg1 *sns.CreatePlatformEndpointInput
	}{arg1})
	stub := fake.CreatePlatformEndpointRequestStub
	fakeReturns := fake.createPlatformEndpointRequestReturns
	fake.recordInvocation("CreatePlatformEndpointRequest", []interface{}{arg1})
	fake.createPlatformEndpointRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreatePlatformEndpointRequestCallCount() int {
	fake.createPlatformEndpointRequestMutex.RLock()
	defer fake.createPlatformEndpointRequestMutex.RUnlock()
	return len(fake.createPlatformEndpointRequestArgsForCall)
}

func (fake *FakeISNSAPI) CreatePlatformEndpointRequestCalls(stub func(*sns.CreatePlatformEndpointInput) (*request.Request, *sns.CreatePlatformEndpointOutput)) {
	fake.createPlatformEndpointRequestMutex.Lock()
	defer fake.createPlatformEndpointRequestMutex.Unlock()
	fake.CreatePlatformEndpointRequestStub = stub
}

func (fake *FakeISNSAPI) CreatePlatformEndpointRequestArgsForCall(i int) *sns.CreatePlatformEndpointInput {
	fake.createPlatformEndpointRequestMutex.RLock()
	defer fake.createPlatformEndpointRequestMutex.RUnlock()
	argsForCall := fake.createPlatformEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CreatePlatformEndpointRequestReturns(result1 *request.Request, result2 *sns.CreatePlatformEndpointOutput) {
	fake.createPlatformEndpointRequestMutex.Lock()
	defer fake.createPlatformEndpointRequestMutex.Unlock()
	fake.CreatePlatformEndpointRequestStub = nil
	fake.createPlatformEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *sns.CreatePlatformEndpointOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.CreatePlatformEndpointOutput) {
	fake.createPlatformEndpointRequestMutex.Lock()
	defer fake.createPlatformEndpointRequestMutex.Unlock()
	fake.CreatePlatformEndpointRequestStub = nil
	if fake.createPlatformEndpointRequestReturnsOnCall == nil {
		fake.createPlatformEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.CreatePlatformEndpointOutput
		})
	}
	fake.createPlatformEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.CreatePlatformEndpointOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformEndpointWithContext(arg1 context.Context, arg2 *sns.CreatePlatformEndpointInput, arg3 ...request.Option) (*sns.CreatePlatformEndpointOutput, error) {
	fake.createPlatformEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.createPlatformEndpointWithContextReturnsOnCall[len(fake.createPlatformEndpointWithContextArgsForCall)]
	fake.createPlatformEndpointWithContextArgsForCall = append(fake.createPlatformEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.CreatePlatformEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreatePlatformEndpointWithContextStub
	fakeReturns := fake.createPlatformEndpointWithContextReturns
	fake.recordInvocation("CreatePlatformEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPlatformEndpointWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreatePlatformEndpointWithContextCallCount() int {
	fake.createPlatformEndpointWithContextMutex.RLock()
	defer fake.createPlatformEndpointWithContextMutex.RUnlock()
	return len(fake.createPlatformEndpointWithContextArgsForCall)
}

func (fake *FakeISNSAPI) CreatePlatformEndpointWithContextCalls(stub func(context.Context, *sns.CreatePlatformEndpointInput, ...request.Option) (*sns.CreatePlatformEndpointOutput, error)) {
	fake.createPlatformEndpointWithContextMutex.Lock()
	defer fake.createPlatformEndpointWithContextMutex.Unlock()
	fake.CreatePlatformEndpointWithContextStub = stub
}

func (fake *FakeISNSAPI) CreatePlatformEndpointWithContextArgsForCall(i int) (context.Context, *sns.CreatePlatformEndpointInput, []request.Option) {
	fake.createPlatformEndpointWithContextMutex.RLock()
	defer fake.createPlatformEndpointWithContextMutex.RUnlock()
	argsForCall := fake.createPlatformEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) CreatePlatformEndpointWithContextReturns(result1 *sns.CreatePlatformEndpointOutput, result2 error) {
	fake.createPlatformEndpointWithContextMutex.Lock()
	defer fake.createPlatformEndpointWithContextMutex.Unlock()
	fake.CreatePlatformEndpointWithContextStub = nil
	fake.createPlatformEndpointWithContextReturns = struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreatePlatformEndpointWithContextReturnsOnCall(i int, result1 *sns.CreatePlatformEndpointOutput, result2 error) {
	fake.createPlatformEndpointWithContextMutex.Lock()
	defer fake.createPlatformEndpointWithContextMutex.Unlock()
	fake.CreatePlatformEndpointWithContextStub = nil
	if fake.createPlatformEndpointWithContextReturnsOnCall == nil {
		fake.createPlatformEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.CreatePlatformEndpointOutput
			result2 error
		})
	}
	fake.createPlatformEndpointWithContextReturnsOnCall[i] = struct {
		result1 *sns.CreatePlatformEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreateTopic(arg1 *sns.CreateTopicInput) (*sns.CreateTopicOutput, error) {
	fake.createTopicMutex.Lock()
	ret, specificReturn := fake.createTopicReturnsOnCall[len(fake.createTopicArgsForCall)]
	fake.createTopicArgsForCall = append(fake.createTopicArgsForCall, struct {
		arg1 *sns.CreateTopicInput
	}{arg1})
	stub := fake.CreateTopicStub
	fakeReturns := fake.createTopicReturns
	fake.recordInvocation("CreateTopic", []interface{}{arg1})
	fake.createTopicMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreateTopicCallCount() int {
	fake.createTopicMutex.RLock()
	defer fake.createTopicMutex.RUnlock()
	return len(fake.createTopicArgsForCall)
}

func (fake *FakeISNSAPI) CreateTopicCalls(stub func(*sns.CreateTopicInput) (*sns.CreateTopicOutput, error)) {
	fake.createTopicMutex.Lock()
	defer fake.createTopicMutex.Unlock()
	fake.CreateTopicStub = stub
}

func (fake *FakeISNSAPI) CreateTopicArgsForCall(i int) *sns.CreateTopicInput {
	fake.createTopicMutex.RLock()
	defer fake.createTopicMutex.RUnlock()
	argsForCall := fake.createTopicArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CreateTopicReturns(result1 *sns.CreateTopicOutput, result2 error) {
	fake.createTopicMutex.Lock()
	defer fake.createTopicMutex.Unlock()
	fake.CreateTopicStub = nil
	fake.createTopicReturns = struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreateTopicReturnsOnCall(i int, result1 *sns.CreateTopicOutput, result2 error) {
	fake.createTopicMutex.Lock()
	defer fake.createTopicMutex.Unlock()
	fake.CreateTopicStub = nil
	if fake.createTopicReturnsOnCall == nil {
		fake.createTopicReturnsOnCall = make(map[int]struct {
			result1 *sns.CreateTopicOutput
			result2 error
		})
	}
	fake.createTopicReturnsOnCall[i] = struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreateTopicRequest(arg1 *sns.CreateTopicInput) (*request.Request, *sns.CreateTopicOutput) {
	fake.createTopicRequestMutex.Lock()
	ret, specificReturn := fake.createTopicRequestReturnsOnCall[len(fake.createTopicRequestArgsForCall)]
	fake.createTopicRequestArgsForCall = append(fake.createTopicRequestArgsForCall, struct {
		arg1 *sns.CreateTopicInput
	}{arg1})
	stub := fake.CreateTopicRequestStub
	fakeReturns := fake.createTopicRequestReturns
	fake.recordInvocation("CreateTopicRequest", []interface{}{arg1})
	fake.createTopicRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreateTopicRequestCallCount() int {
	fake.createTopicRequestMutex.RLock()
	defer fake.createTopicRequestMutex.RUnlock()
	return len(fake.createTopicRequestArgsForCall)
}

func (fake *FakeISNSAPI) CreateTopicRequestCalls(stub func(*sns.CreateTopicInput) (*request.Request, *sns.CreateTopicOutput)) {
	fake.createTopicRequestMutex.Lock()
	defer fake.createTopicRequestMutex.Unlock()
	fake.CreateTopicRequestStub = stub
}

func (fake *FakeISNSAPI) CreateTopicRequestArgsForCall(i int) *sns.CreateTopicInput {
	fake.createTopicRequestMutex.RLock()
	defer fake.createTopicRequestMutex.RUnlock()
	argsForCall := fake.createTopicRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) CreateTopicRequestReturns(result1 *request.Request, result2 *sns.CreateTopicOutput) {
	fake.createTopicRequestMutex.Lock()
	defer fake.createTopicRequestMutex.Unlock()
	fake.CreateTopicRequestStub = nil
	fake.createTopicRequestReturns = struct {
		result1 *request.Request
		result2 *sns.CreateTopicOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreateTopicRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.CreateTopicOutput) {
	fake.createTopicRequestMutex.Lock()
	defer fake.createTopicRequestMutex.Unlock()
	fake.CreateTopicRequestStub = nil
	if fake.createTopicRequestReturnsOnCall == nil {
		fake.createTopicRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.CreateTopicOutput
		})
	}
	fake.createTopicRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.CreateTopicOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreateTopicWithContext(arg1 context.Context, arg2 *sns.CreateTopicInput, arg3 ...request.Option) (*sns.CreateTopicOutput, error) {
	fake.createTopicWithContextMutex.Lock()
	ret, specificReturn := fake.createTopicWithContextReturnsOnCall[len(fake.createTopicWithContextArgsForCall)]
	fake.createTopicWithContextArgsForCall = append(fake.createTopicWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.CreateTopicInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateTopicWithContextStub
	fakeReturns := fake.createTopicWithContextReturns
	fake.recordInvocation("CreateTopicWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTopicWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) CreateTopicWithContextCallCount() int {
	fake.createTopicWithContextMutex.RLock()
	defer fake.createTopicWithContextMutex.RUnlock()
	return len(fake.createTopicWithContextArgsForCall)
}

func (fake *FakeISNSAPI) CreateTopicWithContextCalls(stub func(context.Context, *sns.CreateTopicInput, ...request.Option) (*sns.CreateTopicOutput, error)) {
	fake.createTopicWithContextMutex.Lock()
	defer fake.createTopicWithContextMutex.Unlock()
	fake.CreateTopicWithContextStub = stub
}

func (fake *FakeISNSAPI) CreateTopicWithContextArgsForCall(i int) (context.Context, *sns.CreateTopicInput, []request.Option) {
	fake.createTopicWithContextMutex.RLock()
	defer fake.createTopicWithContextMutex.RUnlock()
	argsForCall := fake.createTopicWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) CreateTopicWithContextReturns(result1 *sns.CreateTopicOutput, result2 error) {
	fake.createTopicWithContextMutex.Lock()
	defer fake.createTopicWithContextMutex.Unlock()
	fake.CreateTopicWithContextStub = nil
	fake.createTopicWithContextReturns = struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) CreateTopicWithContextReturnsOnCall(i int, result1 *sns.CreateTopicOutput, result2 error) {
	fake.createTopicWithContextMutex.Lock()
	defer fake.createTopicWithContextMutex.Unlock()
	fake.CreateTopicWithContextStub = nil
	if fake.createTopicWithContextReturnsOnCall == nil {
		fake.createTopicWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.CreateTopicOutput
			result2 error
		})
	}
	fake.createTopicWithContextReturnsOnCall[i] = struct {
		result1 *sns.CreateTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteEndpoint(arg1 *sns.DeleteEndpointInput) (*sns.DeleteEndpointOutput, error) {
	fake.deleteEndpointMutex.Lock()
	ret, specificReturn := fake.deleteEndpointReturnsOnCall[len(fake.deleteEndpointArgsForCall)]
	fake.deleteEndpointArgsForCall = append(fake.deleteEndpointArgsForCall, struct {
		arg1 *sns.DeleteEndpointInput
	}{arg1})
	stub := fake.DeleteEndpointStub
	fakeReturns := fake.deleteEndpointReturns
	fake.recordInvocation("DeleteEndpoint", []interface{}{arg1})
	fake.deleteEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeleteEndpointCallCount() int {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	return len(fake.deleteEndpointArgsForCall)
}

func (fake *FakeISNSAPI) DeleteEndpointCalls(stub func(*sns.DeleteEndpointInput) (*sns.DeleteEndpointOutput, error)) {
	fake.deleteEndpointMutex.Lock()
	defer fake.deleteEndpointMutex.Unlock()
	fake.DeleteEndpointStub = stub
}

func (fake *FakeISNSAPI) DeleteEndpointArgsForCall(i int) *sns.DeleteEndpointInput {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	argsForCall := fake.deleteEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) DeleteEndpointReturns(result1 *sns.DeleteEndpointOutput, result2 error) {
	fake.deleteEndpointMutex.Lock()
	defer fake.deleteEndpointMutex.Unlock()
	fake.DeleteEndpointStub = nil
	fake.deleteEndpointReturns = struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteEndpointReturnsOnCall(i int, result1 *sns.DeleteEndpointOutput, result2 error) {
	fake.deleteEndpointMutex.Lock()
	defer fake.deleteEndpointMutex.Unlock()
	fake.DeleteEndpointStub = nil
	if fake.deleteEndpointReturnsOnCall == nil {
		fake.deleteEndpointReturnsOnCall = make(map[int]struct {
			result1 *sns.DeleteEndpointOutput
			result2 error
		})
	}
	fake.deleteEndpointReturnsOnCall[i] = struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteEndpointRequest(arg1 *sns.DeleteEndpointInput) (*request.Request, *sns.DeleteEndpointOutput) {
	fake.deleteEndpointRequestMutex.Lock()
	ret, specificReturn := fake.deleteEndpointRequestReturnsOnCall[len(fake.deleteEndpointRequestArgsForCall)]
	fake.deleteEndpointRequestArgsForCall = append(fake.deleteEndpointRequestArgsForCall, struct {
		arg1 *sns.DeleteEndpointInput
	}{arg1})
	stub := fake.DeleteEndpointRequestStub
	fakeReturns := fake.deleteEndpointRequestReturns
	fake.recordInvocation("DeleteEndpointRequest", []interface{}{arg1})
	fake.deleteEndpointRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeleteEndpointRequestCallCount() int {
	fake.deleteEndpointRequestMutex.RLock()
	defer fake.deleteEndpointRequestMutex.RUnlock()
	return len(fake.deleteEndpointRequestArgsForCall)
}

func (fake *FakeISNSAPI) DeleteEndpointRequestCalls(stub func(*sns.DeleteEndpointInput) (*request.Request, *sns.DeleteEndpointOutput)) {
	fake.deleteEndpointRequestMutex.Lock()
	defer fake.deleteEndpointRequestMutex.Unlock()
	fake.DeleteEndpointRequestStub = stub
}

func (fake *FakeISNSAPI) DeleteEndpointRequestArgsForCall(i int) *sns.DeleteEndpointInput {
	fake.deleteEndpointRequestMutex.RLock()
	defer fake.deleteEndpointRequestMutex.RUnlock()
	argsForCall := fake.deleteEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) DeleteEndpointRequestReturns(result1 *request.Request, result2 *sns.DeleteEndpointOutput) {
	fake.deleteEndpointRequestMutex.Lock()
	defer fake.deleteEndpointRequestMutex.Unlock()
	fake.DeleteEndpointRequestStub = nil
	fake.deleteEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *sns.DeleteEndpointOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.DeleteEndpointOutput) {
	fake.deleteEndpointRequestMutex.Lock()
	defer fake.deleteEndpointRequestMutex.Unlock()
	fake.DeleteEndpointRequestStub = nil
	if fake.deleteEndpointRequestReturnsOnCall == nil {
		fake.deleteEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.DeleteEndpointOutput
		})
	}
	fake.deleteEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.DeleteEndpointOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteEndpointWithContext(arg1 context.Context, arg2 *sns.DeleteEndpointInput, arg3 ...request.Option) (*sns.DeleteEndpointOutput, error) {
	fake.deleteEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.deleteEndpointWithContextReturnsOnCall[len(fake.deleteEndpointWithContextArgsForCall)]
	fake.deleteEndpointWithContextArgsForCall = append(fake.deleteEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.DeleteEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteEndpointWithContextStub
	fakeReturns := fake.deleteEndpointWithContextReturns
	fake.recordInvocation("DeleteEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteEndpointWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeleteEndpointWithContextCallCount() int {
	fake.deleteEndpointWithContextMutex.RLock()
	defer fake.deleteEndpointWithContextMutex.RUnlock()
	return len(fake.deleteEndpointWithContextArgsForCall)
}

func (fake *FakeISNSAPI) DeleteEndpointWithContextCalls(stub func(context.Context, *sns.DeleteEndpointInput, ...request.Option) (*sns.DeleteEndpointOutput, error)) {
	fake.deleteEndpointWithContextMutex.Lock()
	defer fake.deleteEndpointWithContextMutex.Unlock()
	fake.DeleteEndpointWithContextStub = stub
}

func (fake *FakeISNSAPI) DeleteEndpointWithContextArgsForCall(i int) (context.Context, *sns.DeleteEndpointInput, []request.Option) {
	fake.deleteEndpointWithContextMutex.RLock()
	defer fake.deleteEndpointWithContextMutex.RUnlock()
	argsForCall := fake.deleteEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) DeleteEndpointWithContextReturns(result1 *sns.DeleteEndpointOutput, result2 error) {
	fake.deleteEndpointWithContextMutex.Lock()
	defer fake.deleteEndpointWithContextMutex.Unlock()
	fake.DeleteEndpointWithContextStub = nil
	fake.deleteEndpointWithContextReturns = struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteEndpointWithContextReturnsOnCall(i int, result1 *sns.DeleteEndpointOutput, result2 error) {
	fake.deleteEndpointWithContextMutex.Lock()
	defer fake.deleteEndpointWithContextMutex.Unlock()
	fake.DeleteEndpointWithContextStub = nil
	if fake.deleteEndpointWithContextReturnsOnCall == nil {
		fake.deleteEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.DeleteEndpointOutput
			result2 error
		})
	}
	fake.deleteEndpointWithContextReturnsOnCall[i] = struct {
		result1 *sns.DeleteEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeletePlatformApplication(arg1 *sns.DeletePlatformApplicationInput) (*sns.DeletePlatformApplicationOutput, error) {
	fake.deletePlatformApplicationMutex.Lock()
	ret, specificReturn := fake.deletePlatformApplicationReturnsOnCall[len(fake.deletePlatformApplicationArgsForCall)]
	fake.deletePlatformApplicationArgsForCall = append(fake.deletePlatformApplicationArgsForCall, struct {
		arg1 *sns.DeletePlatformApplicationInput
	}{arg1})
	stub := fake.DeletePlatformApplicationStub
	fakeReturns := fake.deletePlatformApplicationReturns
	fake.recordInvocation("DeletePlatformApplication", []interface{}{arg1})
	fake.deletePlatformApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeletePlatformApplicationCallCount() int {
	fake.deletePlatformApplicationMutex.RLock()
	defer fake.deletePlatformApplicationMutex.RUnlock()
	return len(fake.deletePlatformApplicationArgsForCall)
}

func (fake *FakeISNSAPI) DeletePlatformApplicationCalls(stub func(*sns.DeletePlatformApplicationInput) (*sns.DeletePlatformApplicationOutput, error)) {
	fake.deletePlatformApplicationMutex.Lock()
	defer fake.deletePlatformApplicationMutex.Unlock()
	fake.DeletePlatformApplicationStub = stub
}

func (fake *FakeISNSAPI) DeletePlatformApplicationArgsForCall(i int) *sns.DeletePlatformApplicationInput {
	fake.deletePlatformApplicationMutex.RLock()
	defer fake.deletePlatformApplicationMutex.RUnlock()
	argsForCall := fake.deletePlatformApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) DeletePlatformApplicationReturns(result1 *sns.DeletePlatformApplicationOutput, result2 error) {
	fake.deletePlatformApplicationMutex.Lock()
	defer fake.deletePlatformApplicationMutex.Unlock()
	fake.DeletePlatformApplicationStub = nil
	fake.deletePlatformApplicationReturns = struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeletePlatformApplicationReturnsOnCall(i int, result1 *sns.DeletePlatformApplicationOutput, result2 error) {
	fake.deletePlatformApplicationMutex.Lock()
	defer fake.deletePlatformApplicationMutex.Unlock()
	fake.DeletePlatformApplicationStub = nil
	if fake.deletePlatformApplicationReturnsOnCall == nil {
		fake.deletePlatformApplicationReturnsOnCall = make(map[int]struct {
			result1 *sns.DeletePlatformApplicationOutput
			result2 error
		})
	}
	fake.deletePlatformApplicationReturnsOnCall[i] = struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeletePlatformApplicationRequest(arg1 *sns.DeletePlatformApplicationInput) (*request.Request, *sns.DeletePlatformApplicationOutput) {
	fake.deletePlatformApplicationRequestMutex.Lock()
	ret, specificReturn := fake.deletePlatformApplicationRequestReturnsOnCall[len(fake.deletePlatformApplicationRequestArgsForCall)]
	fake.deletePlatformApplicationRequestArgsForCall = append(fake.deletePlatformApplicationRequestArgsForCall, struct {
		arg1 *sns.DeletePlatformApplicationInput
	}{arg1})
	stub := fake.DeletePlatformApplicationRequestStub
	fakeReturns := fake.deletePlatformApplicationRequestReturns
	fake.recordInvocation("DeletePlatformApplicationRequest", []interface{}{arg1})
	fake.deletePlatformApplicationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeletePlatformApplicationRequestCallCount() int {
	fake.deletePlatformApplicationRequestMutex.RLock()
	defer fake.deletePlatformApplicationRequestMutex.RUnlock()
	return len(fake.deletePlatformApplicationRequestArgsForCall)
}

func (fake *FakeISNSAPI) DeletePlatformApplicationRequestCalls(stub func(*sns.DeletePlatformApplicationInput) (*request.Request, *sns.DeletePlatformApplicationOutput)) {
	fake.deletePlatformApplicationRequestMutex.Lock()
	defer fake.deletePlatformApplicationRequestMutex.Unlock()
	fake.DeletePlatformApplicationRequestStub = stub
}

func (fake *FakeISNSAPI) DeletePlatformApplicationRequestArgsForCall(i int) *sns.DeletePlatformApplicationInput {
	fake.deletePlatformApplicationRequestMutex.RLock()
	defer fake.deletePlatformApplicationRequestMutex.RUnlock()
	argsForCall := fake.deletePlatformApplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) DeletePlatformApplicationRequestReturns(result1 *request.Request, result2 *sns.DeletePlatformApplicationOutput) {
	fake.deletePlatformApplicationRequestMutex.Lock()
	defer fake.deletePlatformApplicationRequestMutex.Unlock()
	fake.DeletePlatformApplicationRequestStub = nil
	fake.deletePlatformApplicationRequestReturns = struct {
		result1 *request.Request
		result2 *sns.DeletePlatformApplicationOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeletePlatformApplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.DeletePlatformApplicationOutput) {
	fake.deletePlatformApplicationRequestMutex.Lock()
	defer fake.deletePlatformApplicationRequestMutex.Unlock()
	fake.DeletePlatformApplicationRequestStub = nil
	if fake.deletePlatformApplicationRequestReturnsOnCall == nil {
		fake.deletePlatformApplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.DeletePlatformApplicationOutput
		})
	}
	fake.deletePlatformApplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.DeletePlatformApplicationOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeletePlatformApplicationWithContext(arg1 context.Context, arg2 *sns.DeletePlatformApplicationInput, arg3 ...request.Option) (*sns.DeletePlatformApplicationOutput, error) {
	fake.deletePlatformApplicationWithContextMutex.Lock()
	ret, specificReturn := fake.deletePlatformApplicationWithContextReturnsOnCall[len(fake.deletePlatformApplicationWithContextArgsForCall)]
	fake.deletePlatformApplicationWithContextArgsForCall = append(fake.deletePlatformApplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.DeletePlatformApplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeletePlatformApplicationWithContextStub
	fakeReturns := fake.deletePlatformApplicationWithContextReturns
	fake.recordInvocation("DeletePlatformApplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePlatformApplicationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeletePlatformApplicationWithContextCallCount() int {
	fake.deletePlatformApplicationWithContextMutex.RLock()
	defer fake.deletePlatformApplicationWithContextMutex.RUnlock()
	return len(fake.deletePlatformApplicationWithContextArgsForCall)
}

func (fake *FakeISNSAPI) DeletePlatformApplicationWithContextCalls(stub func(context.Context, *sns.DeletePlatformApplicationInput, ...request.Option) (*sns.DeletePlatformApplicationOutput, error)) {
	fake.deletePlatformApplicationWithContextMutex.Lock()
	defer fake.deletePlatformApplicationWithContextMutex.Unlock()
	fake.DeletePlatformApplicationWithContextStub = stub
}

func (fake *FakeISNSAPI) DeletePlatformApplicationWithContextArgsForCall(i int) (context.Context, *sns.DeletePlatformApplicationInput, []request.Option) {
	fake.deletePlatformApplicationWithContextMutex.RLock()
	defer fake.deletePlatformApplicationWithContextMutex.RUnlock()
	argsForCall := fake.deletePlatformApplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) DeletePlatformApplicationWithContextReturns(result1 *sns.DeletePlatformApplicationOutput, result2 error) {
	fake.deletePlatformApplicationWithContextMutex.Lock()
	defer fake.deletePlatformApplicationWithContextMutex.Unlock()
	fake.DeletePlatformApplicationWithContextStub = nil
	fake.deletePlatformApplicationWithContextReturns = struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeletePlatformApplicationWithContextReturnsOnCall(i int, result1 *sns.DeletePlatformApplicationOutput, result2 error) {
	fake.deletePlatformApplicationWithContextMutex.Lock()
	defer fake.deletePlatformApplicationWithContextMutex.Unlock()
	fake.DeletePlatformApplicationWithContextStub = nil
	if fake.deletePlatformApplicationWithContextReturnsOnCall == nil {
		fake.deletePlatformApplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.DeletePlatformApplicationOutput
			result2 error
		})
	}
	fake.deletePlatformApplicationWithContextReturnsOnCall[i] = struct {
		result1 *sns.DeletePlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteTopic(arg1 *sns.DeleteTopicInput) (*sns.DeleteTopicOutput, error) {
	fake.deleteTopicMutex.Lock()
	ret, specificReturn := fake.deleteTopicReturnsOnCall[len(fake.deleteTopicArgsForCall)]
	fake.deleteTopicArgsForCall = append(fake.deleteTopicArgsForCall, struct {
		arg1 *sns.DeleteTopicInput
	}{arg1})
	stub := fake.DeleteTopicStub
	fakeReturns := fake.deleteTopicReturns
	fake.recordInvocation("DeleteTopic", []interface{}{arg1})
	fake.deleteTopicMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeleteTopicCallCount() int {
	fake.deleteTopicMutex.RLock()
	defer fake.deleteTopicMutex.RUnlock()
	return len(fake.deleteTopicArgsForCall)
}

func (fake *FakeISNSAPI) DeleteTopicCalls(stub func(*sns.DeleteTopicInput) (*sns.DeleteTopicOutput, error)) {
	fake.deleteTopicMutex.Lock()
	defer fake.deleteTopicMutex.Unlock()
	fake.DeleteTopicStub = stub
}

func (fake *FakeISNSAPI) DeleteTopicArgsForCall(i int) *sns.DeleteTopicInput {
	fake.deleteTopicMutex.RLock()
	defer fake.deleteTopicMutex.RUnlock()
	argsForCall := fake.deleteTopicArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) DeleteTopicReturns(result1 *sns.DeleteTopicOutput, result2 error) {
	fake.deleteTopicMutex.Lock()
	defer fake.deleteTopicMutex.Unlock()
	fake.DeleteTopicStub = nil
	fake.deleteTopicReturns = struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteTopicReturnsOnCall(i int, result1 *sns.DeleteTopicOutput, result2 error) {
	fake.deleteTopicMutex.Lock()
	defer fake.deleteTopicMutex.Unlock()
	fake.DeleteTopicStub = nil
	if fake.deleteTopicReturnsOnCall == nil {
		fake.deleteTopicReturnsOnCall = make(map[int]struct {
			result1 *sns.DeleteTopicOutput
			result2 error
		})
	}
	fake.deleteTopicReturnsOnCall[i] = struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteTopicRequest(arg1 *sns.DeleteTopicInput) (*request.Request, *sns.DeleteTopicOutput) {
	fake.deleteTopicRequestMutex.Lock()
	ret, specificReturn := fake.deleteTopicRequestReturnsOnCall[len(fake.deleteTopicRequestArgsForCall)]
	fake.deleteTopicRequestArgsForCall = append(fake.deleteTopicRequestArgsForCall, struct {
		arg1 *sns.DeleteTopicInput
	}{arg1})
	stub := fake.DeleteTopicRequestStub
	fakeReturns := fake.deleteTopicRequestReturns
	fake.recordInvocation("DeleteTopicRequest", []interface{}{arg1})
	fake.deleteTopicRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeleteTopicRequestCallCount() int {
	fake.deleteTopicRequestMutex.RLock()
	defer fake.deleteTopicRequestMutex.RUnlock()
	return len(fake.deleteTopicRequestArgsForCall)
}

func (fake *FakeISNSAPI) DeleteTopicRequestCalls(stub func(*sns.DeleteTopicInput) (*request.Request, *sns.DeleteTopicOutput)) {
	fake.deleteTopicRequestMutex.Lock()
	defer fake.deleteTopicRequestMutex.Unlock()
	fake.DeleteTopicRequestStub = stub
}

func (fake *FakeISNSAPI) DeleteTopicRequestArgsForCall(i int) *sns.DeleteTopicInput {
	fake.deleteTopicRequestMutex.RLock()
	defer fake.deleteTopicRequestMutex.RUnlock()
	argsForCall := fake.deleteTopicRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) DeleteTopicRequestReturns(result1 *request.Request, result2 *sns.DeleteTopicOutput) {
	fake.deleteTopicRequestMutex.Lock()
	defer fake.deleteTopicRequestMutex.Unlock()
	fake.DeleteTopicRequestStub = nil
	fake.deleteTopicRequestReturns = struct {
		result1 *request.Request
		result2 *sns.DeleteTopicOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteTopicRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.DeleteTopicOutput) {
	fake.deleteTopicRequestMutex.Lock()
	defer fake.deleteTopicRequestMutex.Unlock()
	fake.DeleteTopicRequestStub = nil
	if fake.deleteTopicRequestReturnsOnCall == nil {
		fake.deleteTopicRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.DeleteTopicOutput
		})
	}
	fake.deleteTopicRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.DeleteTopicOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteTopicWithContext(arg1 context.Context, arg2 *sns.DeleteTopicInput, arg3 ...request.Option) (*sns.DeleteTopicOutput, error) {
	fake.deleteTopicWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTopicWithContextReturnsOnCall[len(fake.deleteTopicWithContextArgsForCall)]
	fake.deleteTopicWithContextArgsForCall = append(fake.deleteTopicWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.DeleteTopicInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteTopicWithContextStub
	fakeReturns := fake.deleteTopicWithContextReturns
	fake.recordInvocation("DeleteTopicWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTopicWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) DeleteTopicWithContextCallCount() int {
	fake.deleteTopicWithContextMutex.RLock()
	defer fake.deleteTopicWithContextMutex.RUnlock()
	return len(fake.deleteTopicWithContextArgsForCall)
}

func (fake *FakeISNSAPI) DeleteTopicWithContextCalls(stub func(context.Context, *sns.DeleteTopicInput, ...request.Option) (*sns.DeleteTopicOutput, error)) {
	fake.deleteTopicWithContextMutex.Lock()
	defer fake.deleteTopicWithContextMutex.Unlock()
	fake.DeleteTopicWithContextStub = stub
}

func (fake *FakeISNSAPI) DeleteTopicWithContextArgsForCall(i int) (context.Context, *sns.DeleteTopicInput, []request.Option) {
	fake.deleteTopicWithContextMutex.RLock()
	defer fake.deleteTopicWithContextMutex.RUnlock()
	argsForCall := fake.deleteTopicWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) DeleteTopicWithContextReturns(result1 *sns.DeleteTopicOutput, result2 error) {
	fake.deleteTopicWithContextMutex.Lock()
	defer fake.deleteTopicWithContextMutex.Unlock()
	fake.DeleteTopicWithContextStub = nil
	fake.deleteTopicWithContextReturns = struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) DeleteTopicWithContextReturnsOnCall(i int, result1 *sns.DeleteTopicOutput, result2 error) {
	fake.deleteTopicWithContextMutex.Lock()
	defer fake.deleteTopicWithContextMutex.Unlock()
	fake.DeleteTopicWithContextStub = nil
	if fake.deleteTopicWithContextReturnsOnCall == nil {
		fake.deleteTopicWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.DeleteTopicOutput
			result2 error
		})
	}
	fake.deleteTopicWithContextReturnsOnCall[i] = struct {
		result1 *sns.DeleteTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetEndpointAttributes(arg1 *sns.GetEndpointAttributesInput) (*sns.GetEndpointAttributesOutput, error) {
	fake.getEndpointAttributesMutex.Lock()
	ret, specificReturn := fake.getEndpointAttributesReturnsOnCall[len(fake.getEndpointAttributesArgsForCall)]
	fake.getEndpointAttributesArgsForCall = append(fake.getEndpointAttributesArgsForCall, struct {
		arg1 *sns.GetEndpointAttributesInput
	}{arg1})
	stub := fake.GetEndpointAttributesStub
	fakeReturns := fake.getEndpointAttributesReturns
	fake.recordInvocation("GetEndpointAttributes", []interface{}{arg1})
	fake.getEndpointAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetEndpointAttributesCallCount() int {
	fake.getEndpointAttributesMutex.RLock()
	defer fake.getEndpointAttributesMutex.RUnlock()
	return len(fake.getEndpointAttributesArgsForCall)
}

func (fake *FakeISNSAPI) GetEndpointAttributesCalls(stub func(*sns.GetEndpointAttributesInput) (*sns.GetEndpointAttributesOutput, error)) {
	fake.getEndpointAttributesMutex.Lock()
	defer fake.getEndpointAttributesMutex.Unlock()
	fake.GetEndpointAttributesStub = stub
}

func (fake *FakeISNSAPI) GetEndpointAttributesArgsForCall(i int) *sns.GetEndpointAttributesInput {
	fake.getEndpointAttributesMutex.RLock()
	defer fake.getEndpointAttributesMutex.RUnlock()
	argsForCall := fake.getEndpointAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetEndpointAttributesReturns(result1 *sns.GetEndpointAttributesOutput, result2 error) {
	fake.getEndpointAttributesMutex.Lock()
	defer fake.getEndpointAttributesMutex.Unlock()
	fake.GetEndpointAttributesStub = nil
	fake.getEndpointAttributesReturns = struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetEndpointAttributesReturnsOnCall(i int, result1 *sns.GetEndpointAttributesOutput, result2 error) {
	fake.getEndpointAttributesMutex.Lock()
	defer fake.getEndpointAttributesMutex.Unlock()
	fake.GetEndpointAttributesStub = nil
	if fake.getEndpointAttributesReturnsOnCall == nil {
		fake.getEndpointAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.GetEndpointAttributesOutput
			result2 error
		})
	}
	fake.getEndpointAttributesReturnsOnCall[i] = struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetEndpointAttributesRequest(arg1 *sns.GetEndpointAttributesInput) (*request.Request, *sns.GetEndpointAttributesOutput) {
	fake.getEndpointAttributesRequestMutex.Lock()
	ret, specificReturn := fake.getEndpointAttributesRequestReturnsOnCall[len(fake.getEndpointAttributesRequestArgsForCall)]
	fake.getEndpointAttributesRequestArgsForCall = append(fake.getEndpointAttributesRequestArgsForCall, struct {
		arg1 *sns.GetEndpointAttributesInput
	}{arg1})
	stub := fake.GetEndpointAttributesRequestStub
	fakeReturns := fake.getEndpointAttributesRequestReturns
	fake.recordInvocation("GetEndpointAttributesRequest", []interface{}{arg1})
	fake.getEndpointAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetEndpointAttributesRequestCallCount() int {
	fake.getEndpointAttributesRequestMutex.RLock()
	defer fake.getEndpointAttributesRequestMutex.RUnlock()
	return len(fake.getEndpointAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) GetEndpointAttributesRequestCalls(stub func(*sns.GetEndpointAttributesInput) (*request.Request, *sns.GetEndpointAttributesOutput)) {
	fake.getEndpointAttributesRequestMutex.Lock()
	defer fake.getEndpointAttributesRequestMutex.Unlock()
	fake.GetEndpointAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) GetEndpointAttributesRequestArgsForCall(i int) *sns.GetEndpointAttributesInput {
	fake.getEndpointAttributesRequestMutex.RLock()
	defer fake.getEndpointAttributesRequestMutex.RUnlock()
	argsForCall := fake.getEndpointAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetEndpointAttributesRequestReturns(result1 *request.Request, result2 *sns.GetEndpointAttributesOutput) {
	fake.getEndpointAttributesRequestMutex.Lock()
	defer fake.getEndpointAttributesRequestMutex.Unlock()
	fake.GetEndpointAttributesRequestStub = nil
	fake.getEndpointAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.GetEndpointAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetEndpointAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.GetEndpointAttributesOutput) {
	fake.getEndpointAttributesRequestMutex.Lock()
	defer fake.getEndpointAttributesRequestMutex.Unlock()
	fake.GetEndpointAttributesRequestStub = nil
	if fake.getEndpointAttributesRequestReturnsOnCall == nil {
		fake.getEndpointAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.GetEndpointAttributesOutput
		})
	}
	fake.getEndpointAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.GetEndpointAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetEndpointAttributesWithContext(arg1 context.Context, arg2 *sns.GetEndpointAttributesInput, arg3 ...request.Option) (*sns.GetEndpointAttributesOutput, error) {
	fake.getEndpointAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.getEndpointAttributesWithContextReturnsOnCall[len(fake.getEndpointAttributesWithContextArgsForCall)]
	fake.getEndpointAttributesWithContextArgsForCall = append(fake.getEndpointAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.GetEndpointAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetEndpointAttributesWithContextStub
	fakeReturns := fake.getEndpointAttributesWithContextReturns
	fake.recordInvocation("GetEndpointAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.getEndpointAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetEndpointAttributesWithContextCallCount() int {
	fake.getEndpointAttributesWithContextMutex.RLock()
	defer fake.getEndpointAttributesWithContextMutex.RUnlock()
	return len(fake.getEndpointAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) GetEndpointAttributesWithContextCalls(stub func(context.Context, *sns.GetEndpointAttributesInput, ...request.Option) (*sns.GetEndpointAttributesOutput, error)) {
	fake.getEndpointAttributesWithContextMutex.Lock()
	defer fake.getEndpointAttributesWithContextMutex.Unlock()
	fake.GetEndpointAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) GetEndpointAttributesWithContextArgsForCall(i int) (context.Context, *sns.GetEndpointAttributesInput, []request.Option) {
	fake.getEndpointAttributesWithContextMutex.RLock()
	defer fake.getEndpointAttributesWithContextMutex.RUnlock()
	argsForCall := fake.getEndpointAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) GetEndpointAttributesWithContextReturns(result1 *sns.GetEndpointAttributesOutput, result2 error) {
	fake.getEndpointAttributesWithContextMutex.Lock()
	defer fake.getEndpointAttributesWithContextMutex.Unlock()
	fake.GetEndpointAttributesWithContextStub = nil
	fake.getEndpointAttributesWithContextReturns = struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetEndpointAttributesWithContextReturnsOnCall(i int, result1 *sns.GetEndpointAttributesOutput, result2 error) {
	fake.getEndpointAttributesWithContextMutex.Lock()
	defer fake.getEndpointAttributesWithContextMutex.Unlock()
	fake.GetEndpointAttributesWithContextStub = nil
	if fake.getEndpointAttributesWithContextReturnsOnCall == nil {
		fake.getEndpointAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.GetEndpointAttributesOutput
			result2 error
		})
	}
	fake.getEndpointAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.GetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributes(arg1 *sns.GetPlatformApplicationAttributesInput) (*sns.GetPlatformApplicationAttributesOutput, error) {
	fake.getPlatformApplicationAttributesMutex.Lock()
	ret, specificReturn := fake.getPlatformApplicationAttributesReturnsOnCall[len(fake.getPlatformApplicationAttributesArgsForCall)]
	fake.getPlatformApplicationAttributesArgsForCall = append(fake.getPlatformApplicationAttributesArgsForCall, struct {
		arg1 *sns.GetPlatformApplicationAttributesInput
	}{arg1})
	stub := fake.GetPlatformApplicationAttributesStub
	fakeReturns := fake.getPlatformApplicationAttributesReturns
	fake.recordInvocation("GetPlatformApplicationAttributes", []interface{}{arg1})
	fake.getPlatformApplicationAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesCallCount() int {
	fake.getPlatformApplicationAttributesMutex.RLock()
	defer fake.getPlatformApplicationAttributesMutex.RUnlock()
	return len(fake.getPlatformApplicationAttributesArgsForCall)
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesCalls(stub func(*sns.GetPlatformApplicationAttributesInput) (*sns.GetPlatformApplicationAttributesOutput, error)) {
	fake.getPlatformApplicationAttributesMutex.Lock()
	defer fake.getPlatformApplicationAttributesMutex.Unlock()
	fake.GetPlatformApplicationAttributesStub = stub
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesArgsForCall(i int) *sns.GetPlatformApplicationAttributesInput {
	fake.getPlatformApplicationAttributesMutex.RLock()
	defer fake.getPlatformApplicationAttributesMutex.RUnlock()
	argsForCall := fake.getPlatformApplicationAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesReturns(result1 *sns.GetPlatformApplicationAttributesOutput, result2 error) {
	fake.getPlatformApplicationAttributesMutex.Lock()
	defer fake.getPlatformApplicationAttributesMutex.Unlock()
	fake.GetPlatformApplicationAttributesStub = nil
	fake.getPlatformApplicationAttributesReturns = struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesReturnsOnCall(i int, result1 *sns.GetPlatformApplicationAttributesOutput, result2 error) {
	fake.getPlatformApplicationAttributesMutex.Lock()
	defer fake.getPlatformApplicationAttributesMutex.Unlock()
	fake.GetPlatformApplicationAttributesStub = nil
	if fake.getPlatformApplicationAttributesReturnsOnCall == nil {
		fake.getPlatformApplicationAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.GetPlatformApplicationAttributesOutput
			result2 error
		})
	}
	fake.getPlatformApplicationAttributesReturnsOnCall[i] = struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesRequest(arg1 *sns.GetPlatformApplicationAttributesInput) (*request.Request, *sns.GetPlatformApplicationAttributesOutput) {
	fake.getPlatformApplicationAttributesRequestMutex.Lock()
	ret, specificReturn := fake.getPlatformApplicationAttributesRequestReturnsOnCall[len(fake.getPlatformApplicationAttributesRequestArgsForCall)]
	fake.getPlatformApplicationAttributesRequestArgsForCall = append(fake.getPlatformApplicationAttributesRequestArgsForCall, struct {
		arg1 *sns.GetPlatformApplicationAttributesInput
	}{arg1})
	stub := fake.GetPlatformApplicationAttributesRequestStub
	fakeReturns := fake.getPlatformApplicationAttributesRequestReturns
	fake.recordInvocation("GetPlatformApplicationAttributesRequest", []interface{}{arg1})
	fake.getPlatformApplicationAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesRequestCallCount() int {
	fake.getPlatformApplicationAttributesRequestMutex.RLock()
	defer fake.getPlatformApplicationAttributesRequestMutex.RUnlock()
	return len(fake.getPlatformApplicationAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesRequestCalls(stub func(*sns.GetPlatformApplicationAttributesInput) (*request.Request, *sns.GetPlatformApplicationAttributesOutput)) {
	fake.getPlatformApplicationAttributesRequestMutex.Lock()
	defer fake.getPlatformApplicationAttributesRequestMutex.Unlock()
	fake.GetPlatformApplicationAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesRequestArgsForCall(i int) *sns.GetPlatformApplicationAttributesInput {
	fake.getPlatformApplicationAttributesRequestMutex.RLock()
	defer fake.getPlatformApplicationAttributesRequestMutex.RUnlock()
	argsForCall := fake.getPlatformApplicationAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesRequestReturns(result1 *request.Request, result2 *sns.GetPlatformApplicationAttributesOutput) {
	fake.getPlatformApplicationAttributesRequestMutex.Lock()
	defer fake.getPlatformApplicationAttributesRequestMutex.Unlock()
	fake.GetPlatformApplicationAttributesRequestStub = nil
	fake.getPlatformApplicationAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.GetPlatformApplicationAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.GetPlatformApplicationAttributesOutput) {
	fake.getPlatformApplicationAttributesRequestMutex.Lock()
	defer fake.getPlatformApplicationAttributesRequestMutex.Unlock()
	fake.GetPlatformApplicationAttributesRequestStub = nil
	if fake.getPlatformApplicationAttributesRequestReturnsOnCall == nil {
		fake.getPlatformApplicationAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.GetPlatformApplicationAttributesOutput
		})
	}
	fake.getPlatformApplicationAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.GetPlatformApplicationAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesWithContext(arg1 context.Context, arg2 *sns.GetPlatformApplicationAttributesInput, arg3 ...request.Option) (*sns.GetPlatformApplicationAttributesOutput, error) {
	fake.getPlatformApplicationAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.getPlatformApplicationAttributesWithContextReturnsOnCall[len(fake.getPlatformApplicationAttributesWithContextArgsForCall)]
	fake.getPlatformApplicationAttributesWithContextArgsForCall = append(fake.getPlatformApplicationAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.GetPlatformApplicationAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetPlatformApplicationAttributesWithContextStub
	fakeReturns := fake.getPlatformApplicationAttributesWithContextReturns
	fake.recordInvocation("GetPlatformApplicationAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPlatformApplicationAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesWithContextCallCount() int {
	fake.getPlatformApplicationAttributesWithContextMutex.RLock()
	defer fake.getPlatformApplicationAttributesWithContextMutex.RUnlock()
	return len(fake.getPlatformApplicationAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesWithContextCalls(stub func(context.Context, *sns.GetPlatformApplicationAttributesInput, ...request.Option) (*sns.GetPlatformApplicationAttributesOutput, error)) {
	fake.getPlatformApplicationAttributesWithContextMutex.Lock()
	defer fake.getPlatformApplicationAttributesWithContextMutex.Unlock()
	fake.GetPlatformApplicationAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesWithContextArgsForCall(i int) (context.Context, *sns.GetPlatformApplicationAttributesInput, []request.Option) {
	fake.getPlatformApplicationAttributesWithContextMutex.RLock()
	defer fake.getPlatformApplicationAttributesWithContextMutex.RUnlock()
	argsForCall := fake.getPlatformApplicationAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesWithContextReturns(result1 *sns.GetPlatformApplicationAttributesOutput, result2 error) {
	fake.getPlatformApplicationAttributesWithContextMutex.Lock()
	defer fake.getPlatformApplicationAttributesWithContextMutex.Unlock()
	fake.GetPlatformApplicationAttributesWithContextStub = nil
	fake.getPlatformApplicationAttributesWithContextReturns = struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetPlatformApplicationAttributesWithContextReturnsOnCall(i int, result1 *sns.GetPlatformApplicationAttributesOutput, result2 error) {
	fake.getPlatformApplicationAttributesWithContextMutex.Lock()
	defer fake.getPlatformApplicationAttributesWithContextMutex.Unlock()
	fake.GetPlatformApplicationAttributesWithContextStub = nil
	if fake.getPlatformApplicationAttributesWithContextReturnsOnCall == nil {
		fake.getPlatformApplicationAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.GetPlatformApplicationAttributesOutput
			result2 error
		})
	}
	fake.getPlatformApplicationAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.GetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSMSAttributes(arg1 *sns.GetSMSAttributesInput) (*sns.GetSMSAttributesOutput, error) {
	fake.getSMSAttributesMutex.Lock()
	ret, specificReturn := fake.getSMSAttributesReturnsOnCall[len(fake.getSMSAttributesArgsForCall)]
	fake.getSMSAttributesArgsForCall = append(fake.getSMSAttributesArgsForCall, struct {
		arg1 *sns.GetSMSAttributesInput
	}{arg1})
	stub := fake.GetSMSAttributesStub
	fakeReturns := fake.getSMSAttributesReturns
	fake.recordInvocation("GetSMSAttributes", []interface{}{arg1})
	fake.getSMSAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetSMSAttributesCallCount() int {
	fake.getSMSAttributesMutex.RLock()
	defer fake.getSMSAttributesMutex.RUnlock()
	return len(fake.getSMSAttributesArgsForCall)
}

func (fake *FakeISNSAPI) GetSMSAttributesCalls(stub func(*sns.GetSMSAttributesInput) (*sns.GetSMSAttributesOutput, error)) {
	fake.getSMSAttributesMutex.Lock()
	defer fake.getSMSAttributesMutex.Unlock()
	fake.GetSMSAttributesStub = stub
}

func (fake *FakeISNSAPI) GetSMSAttributesArgsForCall(i int) *sns.GetSMSAttributesInput {
	fake.getSMSAttributesMutex.RLock()
	defer fake.getSMSAttributesMutex.RUnlock()
	argsForCall := fake.getSMSAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetSMSAttributesReturns(result1 *sns.GetSMSAttributesOutput, result2 error) {
	fake.getSMSAttributesMutex.Lock()
	defer fake.getSMSAttributesMutex.Unlock()
	fake.GetSMSAttributesStub = nil
	fake.getSMSAttributesReturns = struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSMSAttributesReturnsOnCall(i int, result1 *sns.GetSMSAttributesOutput, result2 error) {
	fake.getSMSAttributesMutex.Lock()
	defer fake.getSMSAttributesMutex.Unlock()
	fake.GetSMSAttributesStub = nil
	if fake.getSMSAttributesReturnsOnCall == nil {
		fake.getSMSAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.GetSMSAttributesOutput
			result2 error
		})
	}
	fake.getSMSAttributesReturnsOnCall[i] = struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSMSAttributesRequest(arg1 *sns.GetSMSAttributesInput) (*request.Request, *sns.GetSMSAttributesOutput) {
	fake.getSMSAttributesRequestMutex.Lock()
	ret, specificReturn := fake.getSMSAttributesRequestReturnsOnCall[len(fake.getSMSAttributesRequestArgsForCall)]
	fake.getSMSAttributesRequestArgsForCall = append(fake.getSMSAttributesRequestArgsForCall, struct {
		arg1 *sns.GetSMSAttributesInput
	}{arg1})
	stub := fake.GetSMSAttributesRequestStub
	fakeReturns := fake.getSMSAttributesRequestReturns
	fake.recordInvocation("GetSMSAttributesRequest", []interface{}{arg1})
	fake.getSMSAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetSMSAttributesRequestCallCount() int {
	fake.getSMSAttributesRequestMutex.RLock()
	defer fake.getSMSAttributesRequestMutex.RUnlock()
	return len(fake.getSMSAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) GetSMSAttributesRequestCalls(stub func(*sns.GetSMSAttributesInput) (*request.Request, *sns.GetSMSAttributesOutput)) {
	fake.getSMSAttributesRequestMutex.Lock()
	defer fake.getSMSAttributesRequestMutex.Unlock()
	fake.GetSMSAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) GetSMSAttributesRequestArgsForCall(i int) *sns.GetSMSAttributesInput {
	fake.getSMSAttributesRequestMutex.RLock()
	defer fake.getSMSAttributesRequestMutex.RUnlock()
	argsForCall := fake.getSMSAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetSMSAttributesRequestReturns(result1 *request.Request, result2 *sns.GetSMSAttributesOutput) {
	fake.getSMSAttributesRequestMutex.Lock()
	defer fake.getSMSAttributesRequestMutex.Unlock()
	fake.GetSMSAttributesRequestStub = nil
	fake.getSMSAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.GetSMSAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSMSAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.GetSMSAttributesOutput) {
	fake.getSMSAttributesRequestMutex.Lock()
	defer fake.getSMSAttributesRequestMutex.Unlock()
	fake.GetSMSAttributesRequestStub = nil
	if fake.getSMSAttributesRequestReturnsOnCall == nil {
		fake.getSMSAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.GetSMSAttributesOutput
		})
	}
	fake.getSMSAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.GetSMSAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSMSAttributesWithContext(arg1 context.Context, arg2 *sns.GetSMSAttributesInput, arg3 ...request.Option) (*sns.GetSMSAttributesOutput, error) {
	fake.getSMSAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.getSMSAttributesWithContextReturnsOnCall[len(fake.getSMSAttributesWithContextArgsForCall)]
	fake.getSMSAttributesWithContextArgsForCall = append(fake.getSMSAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.GetSMSAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetSMSAttributesWithContextStub
	fakeReturns := fake.getSMSAttributesWithContextReturns
	fake.recordInvocation("GetSMSAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.getSMSAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetSMSAttributesWithContextCallCount() int {
	fake.getSMSAttributesWithContextMutex.RLock()
	defer fake.getSMSAttributesWithContextMutex.RUnlock()
	return len(fake.getSMSAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) GetSMSAttributesWithContextCalls(stub func(context.Context, *sns.GetSMSAttributesInput, ...request.Option) (*sns.GetSMSAttributesOutput, error)) {
	fake.getSMSAttributesWithContextMutex.Lock()
	defer fake.getSMSAttributesWithContextMutex.Unlock()
	fake.GetSMSAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) GetSMSAttributesWithContextArgsForCall(i int) (context.Context, *sns.GetSMSAttributesInput, []request.Option) {
	fake.getSMSAttributesWithContextMutex.RLock()
	defer fake.getSMSAttributesWithContextMutex.RUnlock()
	argsForCall := fake.getSMSAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) GetSMSAttributesWithContextReturns(result1 *sns.GetSMSAttributesOutput, result2 error) {
	fake.getSMSAttributesWithContextMutex.Lock()
	defer fake.getSMSAttributesWithContextMutex.Unlock()
	fake.GetSMSAttributesWithContextStub = nil
	fake.getSMSAttributesWithContextReturns = struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSMSAttributesWithContextReturnsOnCall(i int, result1 *sns.GetSMSAttributesOutput, result2 error) {
	fake.getSMSAttributesWithContextMutex.Lock()
	defer fake.getSMSAttributesWithContextMutex.Unlock()
	fake.GetSMSAttributesWithContextStub = nil
	if fake.getSMSAttributesWithContextReturnsOnCall == nil {
		fake.getSMSAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.GetSMSAttributesOutput
			result2 error
		})
	}
	fake.getSMSAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.GetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSubscriptionAttributes(arg1 *sns.GetSubscriptionAttributesInput) (*sns.GetSubscriptionAttributesOutput, error) {
	fake.getSubscriptionAttributesMutex.Lock()
	ret, specificReturn := fake.getSubscriptionAttributesReturnsOnCall[len(fake.getSubscriptionAttributesArgsForCall)]
	fake.getSubscriptionAttributesArgsForCall = append(fake.getSubscriptionAttributesArgsForCall, struct {
		arg1 *sns.GetSubscriptionAttributesInput
	}{arg1})
	stub := fake.GetSubscriptionAttributesStub
	fakeReturns := fake.getSubscriptionAttributesReturns
	fake.recordInvocation("GetSubscriptionAttributes", []interface{}{arg1})
	fake.getSubscriptionAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesCallCount() int {
	fake.getSubscriptionAttributesMutex.RLock()
	defer fake.getSubscriptionAttributesMutex.RUnlock()
	return len(fake.getSubscriptionAttributesArgsForCall)
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesCalls(stub func(*sns.GetSubscriptionAttributesInput) (*sns.GetSubscriptionAttributesOutput, error)) {
	fake.getSubscriptionAttributesMutex.Lock()
	defer fake.getSubscriptionAttributesMutex.Unlock()
	fake.GetSubscriptionAttributesStub = stub
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesArgsForCall(i int) *sns.GetSubscriptionAttributesInput {
	fake.getSubscriptionAttributesMutex.RLock()
	defer fake.getSubscriptionAttributesMutex.RUnlock()
	argsForCall := fake.getSubscriptionAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesReturns(result1 *sns.GetSubscriptionAttributesOutput, result2 error) {
	fake.getSubscriptionAttributesMutex.Lock()
	defer fake.getSubscriptionAttributesMutex.Unlock()
	fake.GetSubscriptionAttributesStub = nil
	fake.getSubscriptionAttributesReturns = struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesReturnsOnCall(i int, result1 *sns.GetSubscriptionAttributesOutput, result2 error) {
	fake.getSubscriptionAttributesMutex.Lock()
	defer fake.getSubscriptionAttributesMutex.Unlock()
	fake.GetSubscriptionAttributesStub = nil
	if fake.getSubscriptionAttributesReturnsOnCall == nil {
		fake.getSubscriptionAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.GetSubscriptionAttributesOutput
			result2 error
		})
	}
	fake.getSubscriptionAttributesReturnsOnCall[i] = struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesRequest(arg1 *sns.GetSubscriptionAttributesInput) (*request.Request, *sns.GetSubscriptionAttributesOutput) {
	fake.getSubscriptionAttributesRequestMutex.Lock()
	ret, specificReturn := fake.getSubscriptionAttributesRequestReturnsOnCall[len(fake.getSubscriptionAttributesRequestArgsForCall)]
	fake.getSubscriptionAttributesRequestArgsForCall = append(fake.getSubscriptionAttributesRequestArgsForCall, struct {
		arg1 *sns.GetSubscriptionAttributesInput
	}{arg1})
	stub := fake.GetSubscriptionAttributesRequestStub
	fakeReturns := fake.getSubscriptionAttributesRequestReturns
	fake.recordInvocation("GetSubscriptionAttributesRequest", []interface{}{arg1})
	fake.getSubscriptionAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesRequestCallCount() int {
	fake.getSubscriptionAttributesRequestMutex.RLock()
	defer fake.getSubscriptionAttributesRequestMutex.RUnlock()
	return len(fake.getSubscriptionAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesRequestCalls(stub func(*sns.GetSubscriptionAttributesInput) (*request.Request, *sns.GetSubscriptionAttributesOutput)) {
	fake.getSubscriptionAttributesRequestMutex.Lock()
	defer fake.getSubscriptionAttributesRequestMutex.Unlock()
	fake.GetSubscriptionAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesRequestArgsForCall(i int) *sns.GetSubscriptionAttributesInput {
	fake.getSubscriptionAttributesRequestMutex.RLock()
	defer fake.getSubscriptionAttributesRequestMutex.RUnlock()
	argsForCall := fake.getSubscriptionAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesRequestReturns(result1 *request.Request, result2 *sns.GetSubscriptionAttributesOutput) {
	fake.getSubscriptionAttributesRequestMutex.Lock()
	defer fake.getSubscriptionAttributesRequestMutex.Unlock()
	fake.GetSubscriptionAttributesRequestStub = nil
	fake.getSubscriptionAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.GetSubscriptionAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.GetSubscriptionAttributesOutput) {
	fake.getSubscriptionAttributesRequestMutex.Lock()
	defer fake.getSubscriptionAttributesRequestMutex.Unlock()
	fake.GetSubscriptionAttributesRequestStub = nil
	if fake.getSubscriptionAttributesRequestReturnsOnCall == nil {
		fake.getSubscriptionAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.GetSubscriptionAttributesOutput
		})
	}
	fake.getSubscriptionAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.GetSubscriptionAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesWithContext(arg1 context.Context, arg2 *sns.GetSubscriptionAttributesInput, arg3 ...request.Option) (*sns.GetSubscriptionAttributesOutput, error) {
	fake.getSubscriptionAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.getSubscriptionAttributesWithContextReturnsOnCall[len(fake.getSubscriptionAttributesWithContextArgsForCall)]
	fake.getSubscriptionAttributesWithContextArgsForCall = append(fake.getSubscriptionAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.GetSubscriptionAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetSubscriptionAttributesWithContextStub
	fakeReturns := fake.getSubscriptionAttributesWithContextReturns
	fake.recordInvocation("GetSubscriptionAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.getSubscriptionAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesWithContextCallCount() int {
	fake.getSubscriptionAttributesWithContextMutex.RLock()
	defer fake.getSubscriptionAttributesWithContextMutex.RUnlock()
	return len(fake.getSubscriptionAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesWithContextCalls(stub func(context.Context, *sns.GetSubscriptionAttributesInput, ...request.Option) (*sns.GetSubscriptionAttributesOutput, error)) {
	fake.getSubscriptionAttributesWithContextMutex.Lock()
	defer fake.getSubscriptionAttributesWithContextMutex.Unlock()
	fake.GetSubscriptionAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesWithContextArgsForCall(i int) (context.Context, *sns.GetSubscriptionAttributesInput, []request.Option) {
	fake.getSubscriptionAttributesWithContextMutex.RLock()
	defer fake.getSubscriptionAttributesWithContextMutex.RUnlock()
	argsForCall := fake.getSubscriptionAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesWithContextReturns(result1 *sns.GetSubscriptionAttributesOutput, result2 error) {
	fake.getSubscriptionAttributesWithContextMutex.Lock()
	defer fake.getSubscriptionAttributesWithContextMutex.Unlock()
	fake.GetSubscriptionAttributesWithContextStub = nil
	fake.getSubscriptionAttributesWithContextReturns = struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetSubscriptionAttributesWithContextReturnsOnCall(i int, result1 *sns.GetSubscriptionAttributesOutput, result2 error) {
	fake.getSubscriptionAttributesWithContextMutex.Lock()
	defer fake.getSubscriptionAttributesWithContextMutex.Unlock()
	fake.GetSubscriptionAttributesWithContextStub = nil
	if fake.getSubscriptionAttributesWithContextReturnsOnCall == nil {
		fake.getSubscriptionAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.GetSubscriptionAttributesOutput
			result2 error
		})
	}
	fake.getSubscriptionAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.GetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetTopicAttributes(arg1 *sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error) {
	fake.getTopicAttributesMutex.Lock()
	ret, specificReturn := fake.getTopicAttributesReturnsOnCall[len(fake.getTopicAttributesArgsForCall)]
	fake.getTopicAttributesArgsForCall = append(fake.getTopicAttributesArgsForCall, struct {
		arg1 *sns.GetTopicAttributesInput
	}{arg1})
	stub := fake.GetTopicAttributesStub
	fakeReturns := fake.getTopicAttributesReturns
	fake.recordInvocation("GetTopicAttributes", []interface{}{arg1})
	fake.getTopicAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetTopicAttributesCallCount() int {
	fake.getTopicAttributesMutex.RLock()
	defer fake.getTopicAttributesMutex.RUnlock()
	return len(fake.getTopicAttributesArgsForCall)
}

func (fake *FakeISNSAPI) GetTopicAttributesCalls(stub func(*sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error)) {
	fake.getTopicAttributesMutex.Lock()
	defer fake.getTopicAttributesMutex.Unlock()
	fake.GetTopicAttributesStub = stub
}

func (fake *FakeISNSAPI) GetTopicAttributesArgsForCall(i int) *sns.GetTopicAttributesInput {
	fake.getTopicAttributesMutex.RLock()
	defer fake.getTopicAttributesMutex.RUnlock()
	argsForCall := fake.getTopicAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetTopicAttributesReturns(result1 *sns.GetTopicAttributesOutput, result2 error) {
	fake.getTopicAttributesMutex.Lock()
	defer fake.getTopicAttributesMutex.Unlock()
	fake.GetTopicAttributesStub = nil
	fake.getTopicAttributesReturns = struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetTopicAttributesReturnsOnCall(i int, result1 *sns.GetTopicAttributesOutput, result2 error) {
	fake.getTopicAttributesMutex.Lock()
	defer fake.getTopicAttributesMutex.Unlock()
	fake.GetTopicAttributesStub = nil
	if fake.getTopicAttributesReturnsOnCall == nil {
		fake.getTopicAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.GetTopicAttributesOutput
			result2 error
		})
	}
	fake.getTopicAttributesReturnsOnCall[i] = struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetTopicAttributesRequest(arg1 *sns.GetTopicAttributesInput) (*request.Request, *sns.GetTopicAttributesOutput) {
	fake.getTopicAttributesRequestMutex.Lock()
	ret, specificReturn := fake.getTopicAttributesRequestReturnsOnCall[len(fake.getTopicAttributesRequestArgsForCall)]
	fake.getTopicAttributesRequestArgsForCall = append(fake.getTopicAttributesRequestArgsForCall, struct {
		arg1 *sns.GetTopicAttributesInput
	}{arg1})
	stub := fake.GetTopicAttributesRequestStub
	fakeReturns := fake.getTopicAttributesRequestReturns
	fake.recordInvocation("GetTopicAttributesRequest", []interface{}{arg1})
	fake.getTopicAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetTopicAttributesRequestCallCount() int {
	fake.getTopicAttributesRequestMutex.RLock()
	defer fake.getTopicAttributesRequestMutex.RUnlock()
	return len(fake.getTopicAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) GetTopicAttributesRequestCalls(stub func(*sns.GetTopicAttributesInput) (*request.Request, *sns.GetTopicAttributesOutput)) {
	fake.getTopicAttributesRequestMutex.Lock()
	defer fake.getTopicAttributesRequestMutex.Unlock()
	fake.GetTopicAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) GetTopicAttributesRequestArgsForCall(i int) *sns.GetTopicAttributesInput {
	fake.getTopicAttributesRequestMutex.RLock()
	defer fake.getTopicAttributesRequestMutex.RUnlock()
	argsForCall := fake.getTopicAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) GetTopicAttributesRequestReturns(result1 *request.Request, result2 *sns.GetTopicAttributesOutput) {
	fake.getTopicAttributesRequestMutex.Lock()
	defer fake.getTopicAttributesRequestMutex.Unlock()
	fake.GetTopicAttributesRequestStub = nil
	fake.getTopicAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.GetTopicAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetTopicAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.GetTopicAttributesOutput) {
	fake.getTopicAttributesRequestMutex.Lock()
	defer fake.getTopicAttributesRequestMutex.Unlock()
	fake.GetTopicAttributesRequestStub = nil
	if fake.getTopicAttributesRequestReturnsOnCall == nil {
		fake.getTopicAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.GetTopicAttributesOutput
		})
	}
	fake.getTopicAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.GetTopicAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetTopicAttributesWithContext(arg1 context.Context, arg2 *sns.GetTopicAttributesInput, arg3 ...request.Option) (*sns.GetTopicAttributesOutput, error) {
	fake.getTopicAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.getTopicAttributesWithContextReturnsOnCall[len(fake.getTopicAttributesWithContextArgsForCall)]
	fake.getTopicAttributesWithContextArgsForCall = append(fake.getTopicAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.GetTopicAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetTopicAttributesWithContextStub
	fakeReturns := fake.getTopicAttributesWithContextReturns
	fake.recordInvocation("GetTopicAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.getTopicAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) GetTopicAttributesWithContextCallCount() int {
	fake.getTopicAttributesWithContextMutex.RLock()
	defer fake.getTopicAttributesWithContextMutex.RUnlock()
	return len(fake.getTopicAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) GetTopicAttributesWithContextCalls(stub func(context.Context, *sns.GetTopicAttributesInput, ...request.Option) (*sns.GetTopicAttributesOutput, error)) {
	fake.getTopicAttributesWithContextMutex.Lock()
	defer fake.getTopicAttributesWithContextMutex.Unlock()
	fake.GetTopicAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) GetTopicAttributesWithContextArgsForCall(i int) (context.Context, *sns.GetTopicAttributesInput, []request.Option) {
	fake.getTopicAttributesWithContextMutex.RLock()
	defer fake.getTopicAttributesWithContextMutex.RUnlock()
	argsForCall := fake.getTopicAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) GetTopicAttributesWithContextReturns(result1 *sns.GetTopicAttributesOutput, result2 error) {
	fake.getTopicAttributesWithContextMutex.Lock()
	defer fake.getTopicAttributesWithContextMutex.Unlock()
	fake.GetTopicAttributesWithContextStub = nil
	fake.getTopicAttributesWithContextReturns = struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) GetTopicAttributesWithContextReturnsOnCall(i int, result1 *sns.GetTopicAttributesOutput, result2 error) {
	fake.getTopicAttributesWithContextMutex.Lock()
	defer fake.getTopicAttributesWithContextMutex.Unlock()
	fake.GetTopicAttributesWithContextStub = nil
	if fake.getTopicAttributesWithContextReturnsOnCall == nil {
		fake.getTopicAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.GetTopicAttributesOutput
			result2 error
		})
	}
	fake.getTopicAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.GetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplication(arg1 *sns.ListEndpointsByPlatformApplicationInput) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	fake.listEndpointsByPlatformApplicationMutex.Lock()
	ret, specificReturn := fake.listEndpointsByPlatformApplicationReturnsOnCall[len(fake.listEndpointsByPlatformApplicationArgsForCall)]
	fake.listEndpointsByPlatformApplicationArgsForCall = append(fake.listEndpointsByPlatformApplicationArgsForCall, struct {
		arg1 *sns.ListEndpointsByPlatformApplicationInput
	}{arg1})
	stub := fake.ListEndpointsByPlatformApplicationStub
	fakeReturns := fake.listEndpointsByPlatformApplicationReturns
	fake.recordInvocation("ListEndpointsByPlatformApplication", []interface{}{arg1})
	fake.listEndpointsByPlatformApplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationCallCount() int {
	fake.listEndpointsByPlatformApplicationMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationMutex.RUnlock()
	return len(fake.listEndpointsByPlatformApplicationArgsForCall)
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationCalls(stub func(*sns.ListEndpointsByPlatformApplicationInput) (*sns.ListEndpointsByPlatformApplicationOutput, error)) {
	fake.listEndpointsByPlatformApplicationMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationStub = stub
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationArgsForCall(i int) *sns.ListEndpointsByPlatformApplicationInput {
	fake.listEndpointsByPlatformApplicationMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationMutex.RUnlock()
	argsForCall := fake.listEndpointsByPlatformApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationReturns(result1 *sns.ListEndpointsByPlatformApplicationOutput, result2 error) {
	fake.listEndpointsByPlatformApplicationMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationStub = nil
	fake.listEndpointsByPlatformApplicationReturns = struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationReturnsOnCall(i int, result1 *sns.ListEndpointsByPlatformApplicationOutput, result2 error) {
	fake.listEndpointsByPlatformApplicationMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationStub = nil
	if fake.listEndpointsByPlatformApplicationReturnsOnCall == nil {
		fake.listEndpointsByPlatformApplicationReturnsOnCall = make(map[int]struct {
			result1 *sns.ListEndpointsByPlatformApplicationOutput
			result2 error
		})
	}
	fake.listEndpointsByPlatformApplicationReturnsOnCall[i] = struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPages(arg1 *sns.ListEndpointsByPlatformApplicationInput, arg2 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool) error {
	fake.listEndpointsByPlatformApplicationPagesMutex.Lock()
	ret, specificReturn := fake.listEndpointsByPlatformApplicationPagesReturnsOnCall[len(fake.listEndpointsByPlatformApplicationPagesArgsForCall)]
	fake.listEndpointsByPlatformApplicationPagesArgsForCall = append(fake.listEndpointsByPlatformApplicationPagesArgsForCall, struct {
		arg1 *sns.ListEndpointsByPlatformApplicationInput
		arg2 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListEndpointsByPlatformApplicationPagesStub
	fakeReturns := fake.listEndpointsByPlatformApplicationPagesReturns
	fake.recordInvocation("ListEndpointsByPlatformApplicationPages", []interface{}{arg1, arg2})
	fake.listEndpointsByPlatformApplicationPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesCallCount() int {
	fake.listEndpointsByPlatformApplicationPagesMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationPagesMutex.RUnlock()
	return len(fake.listEndpointsByPlatformApplicationPagesArgsForCall)
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesCalls(stub func(*sns.ListEndpointsByPlatformApplicationInput, func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool) error) {
	fake.listEndpointsByPlatformApplicationPagesMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationPagesMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationPagesStub = stub
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesArgsForCall(i int) (*sns.ListEndpointsByPlatformApplicationInput, func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool) {
	fake.listEndpointsByPlatformApplicationPagesMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationPagesMutex.RUnlock()
	argsForCall := fake.listEndpointsByPlatformApplicationPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesReturns(result1 error) {
	fake.listEndpointsByPlatformApplicationPagesMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationPagesMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationPagesStub = nil
	fake.listEndpointsByPlatformApplicationPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesReturnsOnCall(i int, result1 error) {
	fake.listEndpointsByPlatformApplicationPagesMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationPagesMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationPagesStub = nil
	if fake.listEndpointsByPlatformApplicationPagesReturnsOnCall == nil {
		fake.listEndpointsByPlatformApplicationPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listEndpointsByPlatformApplicationPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesWithContext(arg1 context.Context, arg2 *sns.ListEndpointsByPlatformApplicationInput, arg3 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool, arg4 ...request.Option) error {
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listEndpointsByPlatformApplicationPagesWithContextReturnsOnCall[len(fake.listEndpointsByPlatformApplicationPagesWithContextArgsForCall)]
	fake.listEndpointsByPlatformApplicationPagesWithContextArgsForCall = append(fake.listEndpointsByPlatformApplicationPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListEndpointsByPlatformApplicationInput
		arg3 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListEndpointsByPlatformApplicationPagesWithContextStub
	fakeReturns := fake.listEndpointsByPlatformApplicationPagesWithContextReturns
	fake.recordInvocation("ListEndpointsByPlatformApplicationPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesWithContextCallCount() int {
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationPagesWithContextMutex.RUnlock()
	return len(fake.listEndpointsByPlatformApplicationPagesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesWithContextCalls(stub func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool, ...request.Option) error) {
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationPagesWithContextStub = stub
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesWithContextArgsForCall(i int) (context.Context, *sns.ListEndpointsByPlatformApplicationInput, func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool, []request.Option) {
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationPagesWithContextMutex.RUnlock()
	argsForCall := fake.listEndpointsByPlatformApplicationPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesWithContextReturns(result1 error) {
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationPagesWithContextStub = nil
	fake.listEndpointsByPlatformApplicationPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationPagesWithContextMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationPagesWithContextStub = nil
	if fake.listEndpointsByPlatformApplicationPagesWithContextReturnsOnCall == nil {
		fake.listEndpointsByPlatformApplicationPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listEndpointsByPlatformApplicationPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationRequest(arg1 *sns.ListEndpointsByPlatformApplicationInput) (*request.Request, *sns.ListEndpointsByPlatformApplicationOutput) {
	fake.listEndpointsByPlatformApplicationRequestMutex.Lock()
	ret, specificReturn := fake.listEndpointsByPlatformApplicationRequestReturnsOnCall[len(fake.listEndpointsByPlatformApplicationRequestArgsForCall)]
	fake.listEndpointsByPlatformApplicationRequestArgsForCall = append(fake.listEndpointsByPlatformApplicationRequestArgsForCall, struct {
		arg1 *sns.ListEndpointsByPlatformApplicationInput
	}{arg1})
	stub := fake.ListEndpointsByPlatformApplicationRequestStub
	fakeReturns := fake.listEndpointsByPlatformApplicationRequestReturns
	fake.recordInvocation("ListEndpointsByPlatformApplicationRequest", []interface{}{arg1})
	fake.listEndpointsByPlatformApplicationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationRequestCallCount() int {
	fake.listEndpointsByPlatformApplicationRequestMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationRequestMutex.RUnlock()
	return len(fake.listEndpointsByPlatformApplicationRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationRequestCalls(stub func(*sns.ListEndpointsByPlatformApplicationInput) (*request.Request, *sns.ListEndpointsByPlatformApplicationOutput)) {
	fake.listEndpointsByPlatformApplicationRequestMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationRequestMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationRequestStub = stub
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationRequestArgsForCall(i int) *sns.ListEndpointsByPlatformApplicationInput {
	fake.listEndpointsByPlatformApplicationRequestMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationRequestMutex.RUnlock()
	argsForCall := fake.listEndpointsByPlatformApplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationRequestReturns(result1 *request.Request, result2 *sns.ListEndpointsByPlatformApplicationOutput) {
	fake.listEndpointsByPlatformApplicationRequestMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationRequestMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationRequestStub = nil
	fake.listEndpointsByPlatformApplicationRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListEndpointsByPlatformApplicationOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListEndpointsByPlatformApplicationOutput) {
	fake.listEndpointsByPlatformApplicationRequestMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationRequestMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationRequestStub = nil
	if fake.listEndpointsByPlatformApplicationRequestReturnsOnCall == nil {
		fake.listEndpointsByPlatformApplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListEndpointsByPlatformApplicationOutput
		})
	}
	fake.listEndpointsByPlatformApplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListEndpointsByPlatformApplicationOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationWithContext(arg1 context.Context, arg2 *sns.ListEndpointsByPlatformApplicationInput, arg3 ...request.Option) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	fake.listEndpointsByPlatformApplicationWithContextMutex.Lock()
	ret, specificReturn := fake.listEndpointsByPlatformApplicationWithContextReturnsOnCall[len(fake.listEndpointsByPlatformApplicationWithContextArgsForCall)]
	fake.listEndpointsByPlatformApplicationWithContextArgsForCall = append(fake.listEndpointsByPlatformApplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListEndpointsByPlatformApplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListEndpointsByPlatformApplicationWithContextStub
	fakeReturns := fake.listEndpointsByPlatformApplicationWithContextReturns
	fake.recordInvocation("ListEndpointsByPlatformApplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.listEndpointsByPlatformApplicationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationWithContextCallCount() int {
	fake.listEndpointsByPlatformApplicationWithContextMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationWithContextMutex.RUnlock()
	return len(fake.listEndpointsByPlatformApplicationWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationWithContextCalls(stub func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, ...request.Option) (*sns.ListEndpointsByPlatformApplicationOutput, error)) {
	fake.listEndpointsByPlatformApplicationWithContextMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationWithContextMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationWithContextStub = stub
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationWithContextArgsForCall(i int) (context.Context, *sns.ListEndpointsByPlatformApplicationInput, []request.Option) {
	fake.listEndpointsByPlatformApplicationWithContextMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationWithContextMutex.RUnlock()
	argsForCall := fake.listEndpointsByPlatformApplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationWithContextReturns(result1 *sns.ListEndpointsByPlatformApplicationOutput, result2 error) {
	fake.listEndpointsByPlatformApplicationWithContextMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationWithContextMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationWithContextStub = nil
	fake.listEndpointsByPlatformApplicationWithContextReturns = struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListEndpointsByPlatformApplicationWithContextReturnsOnCall(i int, result1 *sns.ListEndpointsByPlatformApplicationOutput, result2 error) {
	fake.listEndpointsByPlatformApplicationWithContextMutex.Lock()
	defer fake.listEndpointsByPlatformApplicationWithContextMutex.Unlock()
	fake.ListEndpointsByPlatformApplicationWithContextStub = nil
	if fake.listEndpointsByPlatformApplicationWithContextReturnsOnCall == nil {
		fake.listEndpointsByPlatformApplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListEndpointsByPlatformApplicationOutput
			result2 error
		})
	}
	fake.listEndpointsByPlatformApplicationWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListEndpointsByPlatformApplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOut(arg1 *sns.ListPhoneNumbersOptedOutInput) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	fake.listPhoneNumbersOptedOutMutex.Lock()
	ret, specificReturn := fake.listPhoneNumbersOptedOutReturnsOnCall[len(fake.listPhoneNumbersOptedOutArgsForCall)]
	fake.listPhoneNumbersOptedOutArgsForCall = append(fake.listPhoneNumbersOptedOutArgsForCall, struct {
		arg1 *sns.ListPhoneNumbersOptedOutInput
	}{arg1})
	stub := fake.ListPhoneNumbersOptedOutStub
	fakeReturns := fake.listPhoneNumbersOptedOutReturns
	fake.recordInvocation("ListPhoneNumbersOptedOut", []interface{}{arg1})
	fake.listPhoneNumbersOptedOutMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutCallCount() int {
	fake.listPhoneNumbersOptedOutMutex.RLock()
	defer fake.listPhoneNumbersOptedOutMutex.RUnlock()
	return len(fake.listPhoneNumbersOptedOutArgsForCall)
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutCalls(stub func(*sns.ListPhoneNumbersOptedOutInput) (*sns.ListPhoneNumbersOptedOutOutput, error)) {
	fake.listPhoneNumbersOptedOutMutex.Lock()
	defer fake.listPhoneNumbersOptedOutMutex.Unlock()
	fake.ListPhoneNumbersOptedOutStub = stub
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutArgsForCall(i int) *sns.ListPhoneNumbersOptedOutInput {
	fake.listPhoneNumbersOptedOutMutex.RLock()
	defer fake.listPhoneNumbersOptedOutMutex.RUnlock()
	argsForCall := fake.listPhoneNumbersOptedOutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutReturns(result1 *sns.ListPhoneNumbersOptedOutOutput, result2 error) {
	fake.listPhoneNumbersOptedOutMutex.Lock()
	defer fake.listPhoneNumbersOptedOutMutex.Unlock()
	fake.ListPhoneNumbersOptedOutStub = nil
	fake.listPhoneNumbersOptedOutReturns = struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutReturnsOnCall(i int, result1 *sns.ListPhoneNumbersOptedOutOutput, result2 error) {
	fake.listPhoneNumbersOptedOutMutex.Lock()
	defer fake.listPhoneNumbersOptedOutMutex.Unlock()
	fake.ListPhoneNumbersOptedOutStub = nil
	if fake.listPhoneNumbersOptedOutReturnsOnCall == nil {
		fake.listPhoneNumbersOptedOutReturnsOnCall = make(map[int]struct {
			result1 *sns.ListPhoneNumbersOptedOutOutput
			result2 error
		})
	}
	fake.listPhoneNumbersOptedOutReturnsOnCall[i] = struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutRequest(arg1 *sns.ListPhoneNumbersOptedOutInput) (*request.Request, *sns.ListPhoneNumbersOptedOutOutput) {
	fake.listPhoneNumbersOptedOutRequestMutex.Lock()
	ret, specificReturn := fake.listPhoneNumbersOptedOutRequestReturnsOnCall[len(fake.listPhoneNumbersOptedOutRequestArgsForCall)]
	fake.listPhoneNumbersOptedOutRequestArgsForCall = append(fake.listPhoneNumbersOptedOutRequestArgsForCall, struct {
		arg1 *sns.ListPhoneNumbersOptedOutInput
	}{arg1})
	stub := fake.ListPhoneNumbersOptedOutRequestStub
	fakeReturns := fake.listPhoneNumbersOptedOutRequestReturns
	fake.recordInvocation("ListPhoneNumbersOptedOutRequest", []interface{}{arg1})
	fake.listPhoneNumbersOptedOutRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutRequestCallCount() int {
	fake.listPhoneNumbersOptedOutRequestMutex.RLock()
	defer fake.listPhoneNumbersOptedOutRequestMutex.RUnlock()
	return len(fake.listPhoneNumbersOptedOutRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutRequestCalls(stub func(*sns.ListPhoneNumbersOptedOutInput) (*request.Request, *sns.ListPhoneNumbersOptedOutOutput)) {
	fake.listPhoneNumbersOptedOutRequestMutex.Lock()
	defer fake.listPhoneNumbersOptedOutRequestMutex.Unlock()
	fake.ListPhoneNumbersOptedOutRequestStub = stub
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutRequestArgsForCall(i int) *sns.ListPhoneNumbersOptedOutInput {
	fake.listPhoneNumbersOptedOutRequestMutex.RLock()
	defer fake.listPhoneNumbersOptedOutRequestMutex.RUnlock()
	argsForCall := fake.listPhoneNumbersOptedOutRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutRequestReturns(result1 *request.Request, result2 *sns.ListPhoneNumbersOptedOutOutput) {
	fake.listPhoneNumbersOptedOutRequestMutex.Lock()
	defer fake.listPhoneNumbersOptedOutRequestMutex.Unlock()
	fake.ListPhoneNumbersOptedOutRequestStub = nil
	fake.listPhoneNumbersOptedOutRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListPhoneNumbersOptedOutOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListPhoneNumbersOptedOutOutput) {
	fake.listPhoneNumbersOptedOutRequestMutex.Lock()
	defer fake.listPhoneNumbersOptedOutRequestMutex.Unlock()
	fake.ListPhoneNumbersOptedOutRequestStub = nil
	if fake.listPhoneNumbersOptedOutRequestReturnsOnCall == nil {
		fake.listPhoneNumbersOptedOutRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListPhoneNumbersOptedOutOutput
		})
	}
	fake.listPhoneNumbersOptedOutRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListPhoneNumbersOptedOutOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutWithContext(arg1 context.Context, arg2 *sns.ListPhoneNumbersOptedOutInput, arg3 ...request.Option) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	fake.listPhoneNumbersOptedOutWithContextMutex.Lock()
	ret, specificReturn := fake.listPhoneNumbersOptedOutWithContextReturnsOnCall[len(fake.listPhoneNumbersOptedOutWithContextArgsForCall)]
	fake.listPhoneNumbersOptedOutWithContextArgsForCall = append(fake.listPhoneNumbersOptedOutWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListPhoneNumbersOptedOutInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListPhoneNumbersOptedOutWithContextStub
	fakeReturns := fake.listPhoneNumbersOptedOutWithContextReturns
	fake.recordInvocation("ListPhoneNumbersOptedOutWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPhoneNumbersOptedOutWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutWithContextCallCount() int {
	fake.listPhoneNumbersOptedOutWithContextMutex.RLock()
	defer fake.listPhoneNumbersOptedOutWithContextMutex.RUnlock()
	return len(fake.listPhoneNumbersOptedOutWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutWithContextCalls(stub func(context.Context, *sns.ListPhoneNumbersOptedOutInput, ...request.Option) (*sns.ListPhoneNumbersOptedOutOutput, error)) {
	fake.listPhoneNumbersOptedOutWithContextMutex.Lock()
	defer fake.listPhoneNumbersOptedOutWithContextMutex.Unlock()
	fake.ListPhoneNumbersOptedOutWithContextStub = stub
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutWithContextArgsForCall(i int) (context.Context, *sns.ListPhoneNumbersOptedOutInput, []request.Option) {
	fake.listPhoneNumbersOptedOutWithContextMutex.RLock()
	defer fake.listPhoneNumbersOptedOutWithContextMutex.RUnlock()
	argsForCall := fake.listPhoneNumbersOptedOutWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutWithContextReturns(result1 *sns.ListPhoneNumbersOptedOutOutput, result2 error) {
	fake.listPhoneNumbersOptedOutWithContextMutex.Lock()
	defer fake.listPhoneNumbersOptedOutWithContextMutex.Unlock()
	fake.ListPhoneNumbersOptedOutWithContextStub = nil
	fake.listPhoneNumbersOptedOutWithContextReturns = struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPhoneNumbersOptedOutWithContextReturnsOnCall(i int, result1 *sns.ListPhoneNumbersOptedOutOutput, result2 error) {
	fake.listPhoneNumbersOptedOutWithContextMutex.Lock()
	defer fake.listPhoneNumbersOptedOutWithContextMutex.Unlock()
	fake.ListPhoneNumbersOptedOutWithContextStub = nil
	if fake.listPhoneNumbersOptedOutWithContextReturnsOnCall == nil {
		fake.listPhoneNumbersOptedOutWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListPhoneNumbersOptedOutOutput
			result2 error
		})
	}
	fake.listPhoneNumbersOptedOutWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListPhoneNumbersOptedOutOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPlatformApplications(arg1 *sns.ListPlatformApplicationsInput) (*sns.ListPlatformApplicationsOutput, error) {
	fake.listPlatformApplicationsMutex.Lock()
	ret, specificReturn := fake.listPlatformApplicationsReturnsOnCall[len(fake.listPlatformApplicationsArgsForCall)]
	fake.listPlatformApplicationsArgsForCall = append(fake.listPlatformApplicationsArgsForCall, struct {
		arg1 *sns.ListPlatformApplicationsInput
	}{arg1})
	stub := fake.ListPlatformApplicationsStub
	fakeReturns := fake.listPlatformApplicationsReturns
	fake.recordInvocation("ListPlatformApplications", []interface{}{arg1})
	fake.listPlatformApplicationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListPlatformApplicationsCallCount() int {
	fake.listPlatformApplicationsMutex.RLock()
	defer fake.listPlatformApplicationsMutex.RUnlock()
	return len(fake.listPlatformApplicationsArgsForCall)
}

func (fake *FakeISNSAPI) ListPlatformApplicationsCalls(stub func(*sns.ListPlatformApplicationsInput) (*sns.ListPlatformApplicationsOutput, error)) {
	fake.listPlatformApplicationsMutex.Lock()
	defer fake.listPlatformApplicationsMutex.Unlock()
	fake.ListPlatformApplicationsStub = stub
}

func (fake *FakeISNSAPI) ListPlatformApplicationsArgsForCall(i int) *sns.ListPlatformApplicationsInput {
	fake.listPlatformApplicationsMutex.RLock()
	defer fake.listPlatformApplicationsMutex.RUnlock()
	argsForCall := fake.listPlatformApplicationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListPlatformApplicationsReturns(result1 *sns.ListPlatformApplicationsOutput, result2 error) {
	fake.listPlatformApplicationsMutex.Lock()
	defer fake.listPlatformApplicationsMutex.Unlock()
	fake.ListPlatformApplicationsStub = nil
	fake.listPlatformApplicationsReturns = struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsReturnsOnCall(i int, result1 *sns.ListPlatformApplicationsOutput, result2 error) {
	fake.listPlatformApplicationsMutex.Lock()
	defer fake.listPlatformApplicationsMutex.Unlock()
	fake.ListPlatformApplicationsStub = nil
	if fake.listPlatformApplicationsReturnsOnCall == nil {
		fake.listPlatformApplicationsReturnsOnCall = make(map[int]struct {
			result1 *sns.ListPlatformApplicationsOutput
			result2 error
		})
	}
	fake.listPlatformApplicationsReturnsOnCall[i] = struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPages(arg1 *sns.ListPlatformApplicationsInput, arg2 func(*sns.ListPlatformApplicationsOutput, bool) bool) error {
	fake.listPlatformApplicationsPagesMutex.Lock()
	ret, specificReturn := fake.listPlatformApplicationsPagesReturnsOnCall[len(fake.listPlatformApplicationsPagesArgsForCall)]
	fake.listPlatformApplicationsPagesArgsForCall = append(fake.listPlatformApplicationsPagesArgsForCall, struct {
		arg1 *sns.ListPlatformApplicationsInput
		arg2 func(*sns.ListPlatformApplicationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListPlatformApplicationsPagesStub
	fakeReturns := fake.listPlatformApplicationsPagesReturns
	fake.recordInvocation("ListPlatformApplicationsPages", []interface{}{arg1, arg2})
	fake.listPlatformApplicationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesCallCount() int {
	fake.listPlatformApplicationsPagesMutex.RLock()
	defer fake.listPlatformApplicationsPagesMutex.RUnlock()
	return len(fake.listPlatformApplicationsPagesArgsForCall)
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesCalls(stub func(*sns.ListPlatformApplicationsInput, func(*sns.ListPlatformApplicationsOutput, bool) bool) error) {
	fake.listPlatformApplicationsPagesMutex.Lock()
	defer fake.listPlatformApplicationsPagesMutex.Unlock()
	fake.ListPlatformApplicationsPagesStub = stub
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesArgsForCall(i int) (*sns.ListPlatformApplicationsInput, func(*sns.ListPlatformApplicationsOutput, bool) bool) {
	fake.listPlatformApplicationsPagesMutex.RLock()
	defer fake.listPlatformApplicationsPagesMutex.RUnlock()
	argsForCall := fake.listPlatformApplicationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesReturns(result1 error) {
	fake.listPlatformApplicationsPagesMutex.Lock()
	defer fake.listPlatformApplicationsPagesMutex.Unlock()
	fake.ListPlatformApplicationsPagesStub = nil
	fake.listPlatformApplicationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesReturnsOnCall(i int, result1 error) {
	fake.listPlatformApplicationsPagesMutex.Lock()
	defer fake.listPlatformApplicationsPagesMutex.Unlock()
	fake.ListPlatformApplicationsPagesStub = nil
	if fake.listPlatformApplicationsPagesReturnsOnCall == nil {
		fake.listPlatformApplicationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPlatformApplicationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesWithContext(arg1 context.Context, arg2 *sns.ListPlatformApplicationsInput, arg3 func(*sns.ListPlatformApplicationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listPlatformApplicationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listPlatformApplicationsPagesWithContextReturnsOnCall[len(fake.listPlatformApplicationsPagesWithContextArgsForCall)]
	fake.listPlatformApplicationsPagesWithContextArgsForCall = append(fake.listPlatformApplicationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListPlatformApplicationsInput
		arg3 func(*sns.ListPlatformApplicationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListPlatformApplicationsPagesWithContextStub
	fakeReturns := fake.listPlatformApplicationsPagesWithContextReturns
	fake.recordInvocation("ListPlatformApplicationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listPlatformApplicationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesWithContextCallCount() int {
	fake.listPlatformApplicationsPagesWithContextMutex.RLock()
	defer fake.listPlatformApplicationsPagesWithContextMutex.RUnlock()
	return len(fake.listPlatformApplicationsPagesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesWithContextCalls(stub func(context.Context, *sns.ListPlatformApplicationsInput, func(*sns.ListPlatformApplicationsOutput, bool) bool, ...request.Option) error) {
	fake.listPlatformApplicationsPagesWithContextMutex.Lock()
	defer fake.listPlatformApplicationsPagesWithContextMutex.Unlock()
	fake.ListPlatformApplicationsPagesWithContextStub = stub
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesWithContextArgsForCall(i int) (context.Context, *sns.ListPlatformApplicationsInput, func(*sns.ListPlatformApplicationsOutput, bool) bool, []request.Option) {
	fake.listPlatformApplicationsPagesWithContextMutex.RLock()
	defer fake.listPlatformApplicationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listPlatformApplicationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesWithContextReturns(result1 error) {
	fake.listPlatformApplicationsPagesWithContextMutex.Lock()
	defer fake.listPlatformApplicationsPagesWithContextMutex.Unlock()
	fake.ListPlatformApplicationsPagesWithContextStub = nil
	fake.listPlatformApplicationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listPlatformApplicationsPagesWithContextMutex.Lock()
	defer fake.listPlatformApplicationsPagesWithContextMutex.Unlock()
	fake.ListPlatformApplicationsPagesWithContextStub = nil
	if fake.listPlatformApplicationsPagesWithContextReturnsOnCall == nil {
		fake.listPlatformApplicationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listPlatformApplicationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsRequest(arg1 *sns.ListPlatformApplicationsInput) (*request.Request, *sns.ListPlatformApplicationsOutput) {
	fake.listPlatformApplicationsRequestMutex.Lock()
	ret, specificReturn := fake.listPlatformApplicationsRequestReturnsOnCall[len(fake.listPlatformApplicationsRequestArgsForCall)]
	fake.listPlatformApplicationsRequestArgsForCall = append(fake.listPlatformApplicationsRequestArgsForCall, struct {
		arg1 *sns.ListPlatformApplicationsInput
	}{arg1})
	stub := fake.ListPlatformApplicationsRequestStub
	fakeReturns := fake.listPlatformApplicationsRequestReturns
	fake.recordInvocation("ListPlatformApplicationsRequest", []interface{}{arg1})
	fake.listPlatformApplicationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListPlatformApplicationsRequestCallCount() int {
	fake.listPlatformApplicationsRequestMutex.RLock()
	defer fake.listPlatformApplicationsRequestMutex.RUnlock()
	return len(fake.listPlatformApplicationsRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListPlatformApplicationsRequestCalls(stub func(*sns.ListPlatformApplicationsInput) (*request.Request, *sns.ListPlatformApplicationsOutput)) {
	fake.listPlatformApplicationsRequestMutex.Lock()
	defer fake.listPlatformApplicationsRequestMutex.Unlock()
	fake.ListPlatformApplicationsRequestStub = stub
}

func (fake *FakeISNSAPI) ListPlatformApplicationsRequestArgsForCall(i int) *sns.ListPlatformApplicationsInput {
	fake.listPlatformApplicationsRequestMutex.RLock()
	defer fake.listPlatformApplicationsRequestMutex.RUnlock()
	argsForCall := fake.listPlatformApplicationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListPlatformApplicationsRequestReturns(result1 *request.Request, result2 *sns.ListPlatformApplicationsOutput) {
	fake.listPlatformApplicationsRequestMutex.Lock()
	defer fake.listPlatformApplicationsRequestMutex.Unlock()
	fake.ListPlatformApplicationsRequestStub = nil
	fake.listPlatformApplicationsRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListPlatformApplicationsOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListPlatformApplicationsOutput) {
	fake.listPlatformApplicationsRequestMutex.Lock()
	defer fake.listPlatformApplicationsRequestMutex.Unlock()
	fake.ListPlatformApplicationsRequestStub = nil
	if fake.listPlatformApplicationsRequestReturnsOnCall == nil {
		fake.listPlatformApplicationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListPlatformApplicationsOutput
		})
	}
	fake.listPlatformApplicationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListPlatformApplicationsOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsWithContext(arg1 context.Context, arg2 *sns.ListPlatformApplicationsInput, arg3 ...request.Option) (*sns.ListPlatformApplicationsOutput, error) {
	fake.listPlatformApplicationsWithContextMutex.Lock()
	ret, specificReturn := fake.listPlatformApplicationsWithContextReturnsOnCall[len(fake.listPlatformApplicationsWithContextArgsForCall)]
	fake.listPlatformApplicationsWithContextArgsForCall = append(fake.listPlatformApplicationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListPlatformApplicationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListPlatformApplicationsWithContextStub
	fakeReturns := fake.listPlatformApplicationsWithContextReturns
	fake.recordInvocation("ListPlatformApplicationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPlatformApplicationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListPlatformApplicationsWithContextCallCount() int {
	fake.listPlatformApplicationsWithContextMutex.RLock()
	defer fake.listPlatformApplicationsWithContextMutex.RUnlock()
	return len(fake.listPlatformApplicationsWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListPlatformApplicationsWithContextCalls(stub func(context.Context, *sns.ListPlatformApplicationsInput, ...request.Option) (*sns.ListPlatformApplicationsOutput, error)) {
	fake.listPlatformApplicationsWithContextMutex.Lock()
	defer fake.listPlatformApplicationsWithContextMutex.Unlock()
	fake.ListPlatformApplicationsWithContextStub = stub
}

func (fake *FakeISNSAPI) ListPlatformApplicationsWithContextArgsForCall(i int) (context.Context, *sns.ListPlatformApplicationsInput, []request.Option) {
	fake.listPlatformApplicationsWithContextMutex.RLock()
	defer fake.listPlatformApplicationsWithContextMutex.RUnlock()
	argsForCall := fake.listPlatformApplicationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListPlatformApplicationsWithContextReturns(result1 *sns.ListPlatformApplicationsOutput, result2 error) {
	fake.listPlatformApplicationsWithContextMutex.Lock()
	defer fake.listPlatformApplicationsWithContextMutex.Unlock()
	fake.ListPlatformApplicationsWithContextStub = nil
	fake.listPlatformApplicationsWithContextReturns = struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListPlatformApplicationsWithContextReturnsOnCall(i int, result1 *sns.ListPlatformApplicationsOutput, result2 error) {
	fake.listPlatformApplicationsWithContextMutex.Lock()
	defer fake.listPlatformApplicationsWithContextMutex.Unlock()
	fake.ListPlatformApplicationsWithContextStub = nil
	if fake.listPlatformApplicationsWithContextReturnsOnCall == nil {
		fake.listPlatformApplicationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListPlatformApplicationsOutput
			result2 error
		})
	}
	fake.listPlatformApplicationsWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListPlatformApplicationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptions(arg1 *sns.ListSubscriptionsInput) (*sns.ListSubscriptionsOutput, error) {
	fake.listSubscriptionsMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsReturnsOnCall[len(fake.listSubscriptionsArgsForCall)]
	fake.listSubscriptionsArgsForCall = append(fake.listSubscriptionsArgsForCall, struct {
		arg1 *sns.ListSubscriptionsInput
	}{arg1})
	stub := fake.ListSubscriptionsStub
	fakeReturns := fake.listSubscriptionsReturns
	fake.recordInvocation("ListSubscriptions", []interface{}{arg1})
	fake.listSubscriptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListSubscriptionsCallCount() int {
	fake.listSubscriptionsMutex.RLock()
	defer fake.listSubscriptionsMutex.RUnlock()
	return len(fake.listSubscriptionsArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsCalls(stub func(*sns.ListSubscriptionsInput) (*sns.ListSubscriptionsOutput, error)) {
	fake.listSubscriptionsMutex.Lock()
	defer fake.listSubscriptionsMutex.Unlock()
	fake.ListSubscriptionsStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsArgsForCall(i int) *sns.ListSubscriptionsInput {
	fake.listSubscriptionsMutex.RLock()
	defer fake.listSubscriptionsMutex.RUnlock()
	argsForCall := fake.listSubscriptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListSubscriptionsReturns(result1 *sns.ListSubscriptionsOutput, result2 error) {
	fake.listSubscriptionsMutex.Lock()
	defer fake.listSubscriptionsMutex.Unlock()
	fake.ListSubscriptionsStub = nil
	fake.listSubscriptionsReturns = struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsReturnsOnCall(i int, result1 *sns.ListSubscriptionsOutput, result2 error) {
	fake.listSubscriptionsMutex.Lock()
	defer fake.listSubscriptionsMutex.Unlock()
	fake.ListSubscriptionsStub = nil
	if fake.listSubscriptionsReturnsOnCall == nil {
		fake.listSubscriptionsReturnsOnCall = make(map[int]struct {
			result1 *sns.ListSubscriptionsOutput
			result2 error
		})
	}
	fake.listSubscriptionsReturnsOnCall[i] = struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopic(arg1 *sns.ListSubscriptionsByTopicInput) (*sns.ListSubscriptionsByTopicOutput, error) {
	fake.listSubscriptionsByTopicMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsByTopicReturnsOnCall[len(fake.listSubscriptionsByTopicArgsForCall)]
	fake.listSubscriptionsByTopicArgsForCall = append(fake.listSubscriptionsByTopicArgsForCall, struct {
		arg1 *sns.ListSubscriptionsByTopicInput
	}{arg1})
	stub := fake.ListSubscriptionsByTopicStub
	fakeReturns := fake.listSubscriptionsByTopicReturns
	fake.recordInvocation("ListSubscriptionsByTopic", []interface{}{arg1})
	fake.listSubscriptionsByTopicMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicCallCount() int {
	fake.listSubscriptionsByTopicMutex.RLock()
	defer fake.listSubscriptionsByTopicMutex.RUnlock()
	return len(fake.listSubscriptionsByTopicArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicCalls(stub func(*sns.ListSubscriptionsByTopicInput) (*sns.ListSubscriptionsByTopicOutput, error)) {
	fake.listSubscriptionsByTopicMutex.Lock()
	defer fake.listSubscriptionsByTopicMutex.Unlock()
	fake.ListSubscriptionsByTopicStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicArgsForCall(i int) *sns.ListSubscriptionsByTopicInput {
	fake.listSubscriptionsByTopicMutex.RLock()
	defer fake.listSubscriptionsByTopicMutex.RUnlock()
	argsForCall := fake.listSubscriptionsByTopicArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicReturns(result1 *sns.ListSubscriptionsByTopicOutput, result2 error) {
	fake.listSubscriptionsByTopicMutex.Lock()
	defer fake.listSubscriptionsByTopicMutex.Unlock()
	fake.ListSubscriptionsByTopicStub = nil
	fake.listSubscriptionsByTopicReturns = struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicReturnsOnCall(i int, result1 *sns.ListSubscriptionsByTopicOutput, result2 error) {
	fake.listSubscriptionsByTopicMutex.Lock()
	defer fake.listSubscriptionsByTopicMutex.Unlock()
	fake.ListSubscriptionsByTopicStub = nil
	if fake.listSubscriptionsByTopicReturnsOnCall == nil {
		fake.listSubscriptionsByTopicReturnsOnCall = make(map[int]struct {
			result1 *sns.ListSubscriptionsByTopicOutput
			result2 error
		})
	}
	fake.listSubscriptionsByTopicReturnsOnCall[i] = struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPages(arg1 *sns.ListSubscriptionsByTopicInput, arg2 func(*sns.ListSubscriptionsByTopicOutput, bool) bool) error {
	fake.listSubscriptionsByTopicPagesMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsByTopicPagesReturnsOnCall[len(fake.listSubscriptionsByTopicPagesArgsForCall)]
	fake.listSubscriptionsByTopicPagesArgsForCall = append(fake.listSubscriptionsByTopicPagesArgsForCall, struct {
		arg1 *sns.ListSubscriptionsByTopicInput
		arg2 func(*sns.ListSubscriptionsByTopicOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListSubscriptionsByTopicPagesStub
	fakeReturns := fake.listSubscriptionsByTopicPagesReturns
	fake.recordInvocation("ListSubscriptionsByTopicPages", []interface{}{arg1, arg2})
	fake.listSubscriptionsByTopicPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesCallCount() int {
	fake.listSubscriptionsByTopicPagesMutex.RLock()
	defer fake.listSubscriptionsByTopicPagesMutex.RUnlock()
	return len(fake.listSubscriptionsByTopicPagesArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesCalls(stub func(*sns.ListSubscriptionsByTopicInput, func(*sns.ListSubscriptionsByTopicOutput, bool) bool) error) {
	fake.listSubscriptionsByTopicPagesMutex.Lock()
	defer fake.listSubscriptionsByTopicPagesMutex.Unlock()
	fake.ListSubscriptionsByTopicPagesStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesArgsForCall(i int) (*sns.ListSubscriptionsByTopicInput, func(*sns.ListSubscriptionsByTopicOutput, bool) bool) {
	fake.listSubscriptionsByTopicPagesMutex.RLock()
	defer fake.listSubscriptionsByTopicPagesMutex.RUnlock()
	argsForCall := fake.listSubscriptionsByTopicPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesReturns(result1 error) {
	fake.listSubscriptionsByTopicPagesMutex.Lock()
	defer fake.listSubscriptionsByTopicPagesMutex.Unlock()
	fake.ListSubscriptionsByTopicPagesStub = nil
	fake.listSubscriptionsByTopicPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesReturnsOnCall(i int, result1 error) {
	fake.listSubscriptionsByTopicPagesMutex.Lock()
	defer fake.listSubscriptionsByTopicPagesMutex.Unlock()
	fake.ListSubscriptionsByTopicPagesStub = nil
	if fake.listSubscriptionsByTopicPagesReturnsOnCall == nil {
		fake.listSubscriptionsByTopicPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSubscriptionsByTopicPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesWithContext(arg1 context.Context, arg2 *sns.ListSubscriptionsByTopicInput, arg3 func(*sns.ListSubscriptionsByTopicOutput, bool) bool, arg4 ...request.Option) error {
	fake.listSubscriptionsByTopicPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsByTopicPagesWithContextReturnsOnCall[len(fake.listSubscriptionsByTopicPagesWithContextArgsForCall)]
	fake.listSubscriptionsByTopicPagesWithContextArgsForCall = append(fake.listSubscriptionsByTopicPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsByTopicInput
		arg3 func(*sns.ListSubscriptionsByTopicOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListSubscriptionsByTopicPagesWithContextStub
	fakeReturns := fake.listSubscriptionsByTopicPagesWithContextReturns
	fake.recordInvocation("ListSubscriptionsByTopicPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listSubscriptionsByTopicPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesWithContextCallCount() int {
	fake.listSubscriptionsByTopicPagesWithContextMutex.RLock()
	defer fake.listSubscriptionsByTopicPagesWithContextMutex.RUnlock()
	return len(fake.listSubscriptionsByTopicPagesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesWithContextCalls(stub func(context.Context, *sns.ListSubscriptionsByTopicInput, func(*sns.ListSubscriptionsByTopicOutput, bool) bool, ...request.Option) error) {
	fake.listSubscriptionsByTopicPagesWithContextMutex.Lock()
	defer fake.listSubscriptionsByTopicPagesWithContextMutex.Unlock()
	fake.ListSubscriptionsByTopicPagesWithContextStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesWithContextArgsForCall(i int) (context.Context, *sns.ListSubscriptionsByTopicInput, func(*sns.ListSubscriptionsByTopicOutput, bool) bool, []request.Option) {
	fake.listSubscriptionsByTopicPagesWithContextMutex.RLock()
	defer fake.listSubscriptionsByTopicPagesWithContextMutex.RUnlock()
	argsForCall := fake.listSubscriptionsByTopicPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesWithContextReturns(result1 error) {
	fake.listSubscriptionsByTopicPagesWithContextMutex.Lock()
	defer fake.listSubscriptionsByTopicPagesWithContextMutex.Unlock()
	fake.ListSubscriptionsByTopicPagesWithContextStub = nil
	fake.listSubscriptionsByTopicPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listSubscriptionsByTopicPagesWithContextMutex.Lock()
	defer fake.listSubscriptionsByTopicPagesWithContextMutex.Unlock()
	fake.ListSubscriptionsByTopicPagesWithContextStub = nil
	if fake.listSubscriptionsByTopicPagesWithContextReturnsOnCall == nil {
		fake.listSubscriptionsByTopicPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSubscriptionsByTopicPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicRequest(arg1 *sns.ListSubscriptionsByTopicInput) (*request.Request, *sns.ListSubscriptionsByTopicOutput) {
	fake.listSubscriptionsByTopicRequestMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsByTopicRequestReturnsOnCall[len(fake.listSubscriptionsByTopicRequestArgsForCall)]
	fake.listSubscriptionsByTopicRequestArgsForCall = append(fake.listSubscriptionsByTopicRequestArgsForCall, struct {
		arg1 *sns.ListSubscriptionsByTopicInput
	}{arg1})
	stub := fake.ListSubscriptionsByTopicRequestStub
	fakeReturns := fake.listSubscriptionsByTopicRequestReturns
	fake.recordInvocation("ListSubscriptionsByTopicRequest", []interface{}{arg1})
	fake.listSubscriptionsByTopicRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicRequestCallCount() int {
	fake.listSubscriptionsByTopicRequestMutex.RLock()
	defer fake.listSubscriptionsByTopicRequestMutex.RUnlock()
	return len(fake.listSubscriptionsByTopicRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicRequestCalls(stub func(*sns.ListSubscriptionsByTopicInput) (*request.Request, *sns.ListSubscriptionsByTopicOutput)) {
	fake.listSubscriptionsByTopicRequestMutex.Lock()
	defer fake.listSubscriptionsByTopicRequestMutex.Unlock()
	fake.ListSubscriptionsByTopicRequestStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicRequestArgsForCall(i int) *sns.ListSubscriptionsByTopicInput {
	fake.listSubscriptionsByTopicRequestMutex.RLock()
	defer fake.listSubscriptionsByTopicRequestMutex.RUnlock()
	argsForCall := fake.listSubscriptionsByTopicRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicRequestReturns(result1 *request.Request, result2 *sns.ListSubscriptionsByTopicOutput) {
	fake.listSubscriptionsByTopicRequestMutex.Lock()
	defer fake.listSubscriptionsByTopicRequestMutex.Unlock()
	fake.ListSubscriptionsByTopicRequestStub = nil
	fake.listSubscriptionsByTopicRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsByTopicOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListSubscriptionsByTopicOutput) {
	fake.listSubscriptionsByTopicRequestMutex.Lock()
	defer fake.listSubscriptionsByTopicRequestMutex.Unlock()
	fake.ListSubscriptionsByTopicRequestStub = nil
	if fake.listSubscriptionsByTopicRequestReturnsOnCall == nil {
		fake.listSubscriptionsByTopicRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListSubscriptionsByTopicOutput
		})
	}
	fake.listSubscriptionsByTopicRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsByTopicOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicWithContext(arg1 context.Context, arg2 *sns.ListSubscriptionsByTopicInput, arg3 ...request.Option) (*sns.ListSubscriptionsByTopicOutput, error) {
	fake.listSubscriptionsByTopicWithContextMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsByTopicWithContextReturnsOnCall[len(fake.listSubscriptionsByTopicWithContextArgsForCall)]
	fake.listSubscriptionsByTopicWithContextArgsForCall = append(fake.listSubscriptionsByTopicWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsByTopicInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListSubscriptionsByTopicWithContextStub
	fakeReturns := fake.listSubscriptionsByTopicWithContextReturns
	fake.recordInvocation("ListSubscriptionsByTopicWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSubscriptionsByTopicWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicWithContextCallCount() int {
	fake.listSubscriptionsByTopicWithContextMutex.RLock()
	defer fake.listSubscriptionsByTopicWithContextMutex.RUnlock()
	return len(fake.listSubscriptionsByTopicWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicWithContextCalls(stub func(context.Context, *sns.ListSubscriptionsByTopicInput, ...request.Option) (*sns.ListSubscriptionsByTopicOutput, error)) {
	fake.listSubscriptionsByTopicWithContextMutex.Lock()
	defer fake.listSubscriptionsByTopicWithContextMutex.Unlock()
	fake.ListSubscriptionsByTopicWithContextStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicWithContextArgsForCall(i int) (context.Context, *sns.ListSubscriptionsByTopicInput, []request.Option) {
	fake.listSubscriptionsByTopicWithContextMutex.RLock()
	defer fake.listSubscriptionsByTopicWithContextMutex.RUnlock()
	argsForCall := fake.listSubscriptionsByTopicWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicWithContextReturns(result1 *sns.ListSubscriptionsByTopicOutput, result2 error) {
	fake.listSubscriptionsByTopicWithContextMutex.Lock()
	defer fake.listSubscriptionsByTopicWithContextMutex.Unlock()
	fake.ListSubscriptionsByTopicWithContextStub = nil
	fake.listSubscriptionsByTopicWithContextReturns = struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsByTopicWithContextReturnsOnCall(i int, result1 *sns.ListSubscriptionsByTopicOutput, result2 error) {
	fake.listSubscriptionsByTopicWithContextMutex.Lock()
	defer fake.listSubscriptionsByTopicWithContextMutex.Unlock()
	fake.ListSubscriptionsByTopicWithContextStub = nil
	if fake.listSubscriptionsByTopicWithContextReturnsOnCall == nil {
		fake.listSubscriptionsByTopicWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListSubscriptionsByTopicOutput
			result2 error
		})
	}
	fake.listSubscriptionsByTopicWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListSubscriptionsByTopicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsPages(arg1 *sns.ListSubscriptionsInput, arg2 func(*sns.ListSubscriptionsOutput, bool) bool) error {
	fake.listSubscriptionsPagesMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsPagesReturnsOnCall[len(fake.listSubscriptionsPagesArgsForCall)]
	fake.listSubscriptionsPagesArgsForCall = append(fake.listSubscriptionsPagesArgsForCall, struct {
		arg1 *sns.ListSubscriptionsInput
		arg2 func(*sns.ListSubscriptionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListSubscriptionsPagesStub
	fakeReturns := fake.listSubscriptionsPagesReturns
	fake.recordInvocation("ListSubscriptionsPages", []interface{}{arg1, arg2})
	fake.listSubscriptionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesCallCount() int {
	fake.listSubscriptionsPagesMutex.RLock()
	defer fake.listSubscriptionsPagesMutex.RUnlock()
	return len(fake.listSubscriptionsPagesArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesCalls(stub func(*sns.ListSubscriptionsInput, func(*sns.ListSubscriptionsOutput, bool) bool) error) {
	fake.listSubscriptionsPagesMutex.Lock()
	defer fake.listSubscriptionsPagesMutex.Unlock()
	fake.ListSubscriptionsPagesStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesArgsForCall(i int) (*sns.ListSubscriptionsInput, func(*sns.ListSubscriptionsOutput, bool) bool) {
	fake.listSubscriptionsPagesMutex.RLock()
	defer fake.listSubscriptionsPagesMutex.RUnlock()
	argsForCall := fake.listSubscriptionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesReturns(result1 error) {
	fake.listSubscriptionsPagesMutex.Lock()
	defer fake.listSubscriptionsPagesMutex.Unlock()
	fake.ListSubscriptionsPagesStub = nil
	fake.listSubscriptionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesReturnsOnCall(i int, result1 error) {
	fake.listSubscriptionsPagesMutex.Lock()
	defer fake.listSubscriptionsPagesMutex.Unlock()
	fake.ListSubscriptionsPagesStub = nil
	if fake.listSubscriptionsPagesReturnsOnCall == nil {
		fake.listSubscriptionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSubscriptionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesWithContext(arg1 context.Context, arg2 *sns.ListSubscriptionsInput, arg3 func(*sns.ListSubscriptionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listSubscriptionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsPagesWithContextReturnsOnCall[len(fake.listSubscriptionsPagesWithContextArgsForCall)]
	fake.listSubscriptionsPagesWithContextArgsForCall = append(fake.listSubscriptionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsInput
		arg3 func(*sns.ListSubscriptionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListSubscriptionsPagesWithContextStub
	fakeReturns := fake.listSubscriptionsPagesWithContextReturns
	fake.recordInvocation("ListSubscriptionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listSubscriptionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesWithContextCallCount() int {
	fake.listSubscriptionsPagesWithContextMutex.RLock()
	defer fake.listSubscriptionsPagesWithContextMutex.RUnlock()
	return len(fake.listSubscriptionsPagesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesWithContextCalls(stub func(context.Context, *sns.ListSubscriptionsInput, func(*sns.ListSubscriptionsOutput, bool) bool, ...request.Option) error) {
	fake.listSubscriptionsPagesWithContextMutex.Lock()
	defer fake.listSubscriptionsPagesWithContextMutex.Unlock()
	fake.ListSubscriptionsPagesWithContextStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesWithContextArgsForCall(i int) (context.Context, *sns.ListSubscriptionsInput, func(*sns.ListSubscriptionsOutput, bool) bool, []request.Option) {
	fake.listSubscriptionsPagesWithContextMutex.RLock()
	defer fake.listSubscriptionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listSubscriptionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesWithContextReturns(result1 error) {
	fake.listSubscriptionsPagesWithContextMutex.Lock()
	defer fake.listSubscriptionsPagesWithContextMutex.Unlock()
	fake.ListSubscriptionsPagesWithContextStub = nil
	fake.listSubscriptionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listSubscriptionsPagesWithContextMutex.Lock()
	defer fake.listSubscriptionsPagesWithContextMutex.Unlock()
	fake.ListSubscriptionsPagesWithContextStub = nil
	if fake.listSubscriptionsPagesWithContextReturnsOnCall == nil {
		fake.listSubscriptionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSubscriptionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListSubscriptionsRequest(arg1 *sns.ListSubscriptionsInput) (*request.Request, *sns.ListSubscriptionsOutput) {
	fake.listSubscriptionsRequestMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsRequestReturnsOnCall[len(fake.listSubscriptionsRequestArgsForCall)]
	fake.listSubscriptionsRequestArgsForCall = append(fake.listSubscriptionsRequestArgsForCall, struct {
		arg1 *sns.ListSubscriptionsInput
	}{arg1})
	stub := fake.ListSubscriptionsRequestStub
	fakeReturns := fake.listSubscriptionsRequestReturns
	fake.recordInvocation("ListSubscriptionsRequest", []interface{}{arg1})
	fake.listSubscriptionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListSubscriptionsRequestCallCount() int {
	fake.listSubscriptionsRequestMutex.RLock()
	defer fake.listSubscriptionsRequestMutex.RUnlock()
	return len(fake.listSubscriptionsRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsRequestCalls(stub func(*sns.ListSubscriptionsInput) (*request.Request, *sns.ListSubscriptionsOutput)) {
	fake.listSubscriptionsRequestMutex.Lock()
	defer fake.listSubscriptionsRequestMutex.Unlock()
	fake.ListSubscriptionsRequestStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsRequestArgsForCall(i int) *sns.ListSubscriptionsInput {
	fake.listSubscriptionsRequestMutex.RLock()
	defer fake.listSubscriptionsRequestMutex.RUnlock()
	argsForCall := fake.listSubscriptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListSubscriptionsRequestReturns(result1 *request.Request, result2 *sns.ListSubscriptionsOutput) {
	fake.listSubscriptionsRequestMutex.Lock()
	defer fake.listSubscriptionsRequestMutex.Unlock()
	fake.ListSubscriptionsRequestStub = nil
	fake.listSubscriptionsRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListSubscriptionsOutput) {
	fake.listSubscriptionsRequestMutex.Lock()
	defer fake.listSubscriptionsRequestMutex.Unlock()
	fake.ListSubscriptionsRequestStub = nil
	if fake.listSubscriptionsRequestReturnsOnCall == nil {
		fake.listSubscriptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListSubscriptionsOutput
		})
	}
	fake.listSubscriptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListSubscriptionsOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsWithContext(arg1 context.Context, arg2 *sns.ListSubscriptionsInput, arg3 ...request.Option) (*sns.ListSubscriptionsOutput, error) {
	fake.listSubscriptionsWithContextMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsWithContextReturnsOnCall[len(fake.listSubscriptionsWithContextArgsForCall)]
	fake.listSubscriptionsWithContextArgsForCall = append(fake.listSubscriptionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListSubscriptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListSubscriptionsWithContextStub
	fakeReturns := fake.listSubscriptionsWithContextReturns
	fake.recordInvocation("ListSubscriptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSubscriptionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListSubscriptionsWithContextCallCount() int {
	fake.listSubscriptionsWithContextMutex.RLock()
	defer fake.listSubscriptionsWithContextMutex.RUnlock()
	return len(fake.listSubscriptionsWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListSubscriptionsWithContextCalls(stub func(context.Context, *sns.ListSubscriptionsInput, ...request.Option) (*sns.ListSubscriptionsOutput, error)) {
	fake.listSubscriptionsWithContextMutex.Lock()
	defer fake.listSubscriptionsWithContextMutex.Unlock()
	fake.ListSubscriptionsWithContextStub = stub
}

func (fake *FakeISNSAPI) ListSubscriptionsWithContextArgsForCall(i int) (context.Context, *sns.ListSubscriptionsInput, []request.Option) {
	fake.listSubscriptionsWithContextMutex.RLock()
	defer fake.listSubscriptionsWithContextMutex.RUnlock()
	argsForCall := fake.listSubscriptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListSubscriptionsWithContextReturns(result1 *sns.ListSubscriptionsOutput, result2 error) {
	fake.listSubscriptionsWithContextMutex.Lock()
	defer fake.listSubscriptionsWithContextMutex.Unlock()
	fake.ListSubscriptionsWithContextStub = nil
	fake.listSubscriptionsWithContextReturns = struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListSubscriptionsWithContextReturnsOnCall(i int, result1 *sns.ListSubscriptionsOutput, result2 error) {
	fake.listSubscriptionsWithContextMutex.Lock()
	defer fake.listSubscriptionsWithContextMutex.Unlock()
	fake.ListSubscriptionsWithContextStub = nil
	if fake.listSubscriptionsWithContextReturnsOnCall == nil {
		fake.listSubscriptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListSubscriptionsOutput
			result2 error
		})
	}
	fake.listSubscriptionsWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTagsForResource(arg1 *sns.ListTagsForResourceInput) (*sns.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *sns.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceStub
	fakeReturns := fake.listTagsForResourceReturns
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeISNSAPI) ListTagsForResourceCalls(stub func(*sns.ListTagsForResourceInput) (*sns.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeISNSAPI) ListTagsForResourceArgsForCall(i int) *sns.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListTagsForResourceReturns(result1 *sns.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTagsForResourceReturnsOnCall(i int, result1 *sns.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *sns.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTagsForResourceRequest(arg1 *sns.ListTagsForResourceInput) (*request.Request, *sns.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *sns.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceRequestStub
	fakeReturns := fake.listTagsForResourceRequestReturns
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListTagsForResourceRequestCalls(stub func(*sns.ListTagsForResourceInput) (*request.Request, *sns.ListTagsForResourceOutput)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeISNSAPI) ListTagsForResourceRequestArgsForCall(i int) *sns.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *sns.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTagsForResourceWithContext(arg1 context.Context, arg2 *sns.ListTagsForResourceInput, arg3 ...request.Option) (*sns.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListTagsForResourceWithContextCalls(stub func(context.Context, *sns.ListTagsForResourceInput, ...request.Option) (*sns.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeISNSAPI) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *sns.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListTagsForResourceWithContextReturns(result1 *sns.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *sns.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTopics(arg1 *sns.ListTopicsInput) (*sns.ListTopicsOutput, error) {
	fake.listTopicsMutex.Lock()
	ret, specificReturn := fake.listTopicsReturnsOnCall[len(fake.listTopicsArgsForCall)]
	fake.listTopicsArgsForCall = append(fake.listTopicsArgsForCall, struct {
		arg1 *sns.ListTopicsInput
	}{arg1})
	stub := fake.ListTopicsStub
	fakeReturns := fake.listTopicsReturns
	fake.recordInvocation("ListTopics", []interface{}{arg1})
	fake.listTopicsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListTopicsCallCount() int {
	fake.listTopicsMutex.RLock()
	defer fake.listTopicsMutex.RUnlock()
	return len(fake.listTopicsArgsForCall)
}

func (fake *FakeISNSAPI) ListTopicsCalls(stub func(*sns.ListTopicsInput) (*sns.ListTopicsOutput, error)) {
	fake.listTopicsMutex.Lock()
	defer fake.listTopicsMutex.Unlock()
	fake.ListTopicsStub = stub
}

func (fake *FakeISNSAPI) ListTopicsArgsForCall(i int) *sns.ListTopicsInput {
	fake.listTopicsMutex.RLock()
	defer fake.listTopicsMutex.RUnlock()
	argsForCall := fake.listTopicsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListTopicsReturns(result1 *sns.ListTopicsOutput, result2 error) {
	fake.listTopicsMutex.Lock()
	defer fake.listTopicsMutex.Unlock()
	fake.ListTopicsStub = nil
	fake.listTopicsReturns = struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTopicsReturnsOnCall(i int, result1 *sns.ListTopicsOutput, result2 error) {
	fake.listTopicsMutex.Lock()
	defer fake.listTopicsMutex.Unlock()
	fake.ListTopicsStub = nil
	if fake.listTopicsReturnsOnCall == nil {
		fake.listTopicsReturnsOnCall = make(map[int]struct {
			result1 *sns.ListTopicsOutput
			result2 error
		})
	}
	fake.listTopicsReturnsOnCall[i] = struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTopicsPages(arg1 *sns.ListTopicsInput, arg2 func(*sns.ListTopicsOutput, bool) bool) error {
	fake.listTopicsPagesMutex.Lock()
	ret, specificReturn := fake.listTopicsPagesReturnsOnCall[len(fake.listTopicsPagesArgsForCall)]
	fake.listTopicsPagesArgsForCall = append(fake.listTopicsPagesArgsForCall, struct {
		arg1 *sns.ListTopicsInput
		arg2 func(*sns.ListTopicsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListTopicsPagesStub
	fakeReturns := fake.listTopicsPagesReturns
	fake.recordInvocation("ListTopicsPages", []interface{}{arg1, arg2})
	fake.listTopicsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListTopicsPagesCallCount() int {
	fake.listTopicsPagesMutex.RLock()
	defer fake.listTopicsPagesMutex.RUnlock()
	return len(fake.listTopicsPagesArgsForCall)
}

func (fake *FakeISNSAPI) ListTopicsPagesCalls(stub func(*sns.ListTopicsInput, func(*sns.ListTopicsOutput, bool) bool) error) {
	fake.listTopicsPagesMutex.Lock()
	defer fake.listTopicsPagesMutex.Unlock()
	fake.ListTopicsPagesStub = stub
}

func (fake *FakeISNSAPI) ListTopicsPagesArgsForCall(i int) (*sns.ListTopicsInput, func(*sns.ListTopicsOutput, bool) bool) {
	fake.listTopicsPagesMutex.RLock()
	defer fake.listTopicsPagesMutex.RUnlock()
	argsForCall := fake.listTopicsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeISNSAPI) ListTopicsPagesReturns(result1 error) {
	fake.listTopicsPagesMutex.Lock()
	defer fake.listTopicsPagesMutex.Unlock()
	fake.ListTopicsPagesStub = nil
	fake.listTopicsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListTopicsPagesReturnsOnCall(i int, result1 error) {
	fake.listTopicsPagesMutex.Lock()
	defer fake.listTopicsPagesMutex.Unlock()
	fake.ListTopicsPagesStub = nil
	if fake.listTopicsPagesReturnsOnCall == nil {
		fake.listTopicsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTopicsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListTopicsPagesWithContext(arg1 context.Context, arg2 *sns.ListTopicsInput, arg3 func(*sns.ListTopicsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listTopicsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listTopicsPagesWithContextReturnsOnCall[len(fake.listTopicsPagesWithContextArgsForCall)]
	fake.listTopicsPagesWithContextArgsForCall = append(fake.listTopicsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListTopicsInput
		arg3 func(*sns.ListTopicsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListTopicsPagesWithContextStub
	fakeReturns := fake.listTopicsPagesWithContextReturns
	fake.recordInvocation("ListTopicsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listTopicsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeISNSAPI) ListTopicsPagesWithContextCallCount() int {
	fake.listTopicsPagesWithContextMutex.RLock()
	defer fake.listTopicsPagesWithContextMutex.RUnlock()
	return len(fake.listTopicsPagesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListTopicsPagesWithContextCalls(stub func(context.Context, *sns.ListTopicsInput, func(*sns.ListTopicsOutput, bool) bool, ...request.Option) error) {
	fake.listTopicsPagesWithContextMutex.Lock()
	defer fake.listTopicsPagesWithContextMutex.Unlock()
	fake.ListTopicsPagesWithContextStub = stub
}

func (fake *FakeISNSAPI) ListTopicsPagesWithContextArgsForCall(i int) (context.Context, *sns.ListTopicsInput, func(*sns.ListTopicsOutput, bool) bool, []request.Option) {
	fake.listTopicsPagesWithContextMutex.RLock()
	defer fake.listTopicsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listTopicsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeISNSAPI) ListTopicsPagesWithContextReturns(result1 error) {
	fake.listTopicsPagesWithContextMutex.Lock()
	defer fake.listTopicsPagesWithContextMutex.Unlock()
	fake.ListTopicsPagesWithContextStub = nil
	fake.listTopicsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListTopicsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listTopicsPagesWithContextMutex.Lock()
	defer fake.listTopicsPagesWithContextMutex.Unlock()
	fake.ListTopicsPagesWithContextStub = nil
	if fake.listTopicsPagesWithContextReturnsOnCall == nil {
		fake.listTopicsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTopicsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeISNSAPI) ListTopicsRequest(arg1 *sns.ListTopicsInput) (*request.Request, *sns.ListTopicsOutput) {
	fake.listTopicsRequestMutex.Lock()
	ret, specificReturn := fake.listTopicsRequestReturnsOnCall[len(fake.listTopicsRequestArgsForCall)]
	fake.listTopicsRequestArgsForCall = append(fake.listTopicsRequestArgsForCall, struct {
		arg1 *sns.ListTopicsInput
	}{arg1})
	stub := fake.ListTopicsRequestStub
	fakeReturns := fake.listTopicsRequestReturns
	fake.recordInvocation("ListTopicsRequest", []interface{}{arg1})
	fake.listTopicsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListTopicsRequestCallCount() int {
	fake.listTopicsRequestMutex.RLock()
	defer fake.listTopicsRequestMutex.RUnlock()
	return len(fake.listTopicsRequestArgsForCall)
}

func (fake *FakeISNSAPI) ListTopicsRequestCalls(stub func(*sns.ListTopicsInput) (*request.Request, *sns.ListTopicsOutput)) {
	fake.listTopicsRequestMutex.Lock()
	defer fake.listTopicsRequestMutex.Unlock()
	fake.ListTopicsRequestStub = stub
}

func (fake *FakeISNSAPI) ListTopicsRequestArgsForCall(i int) *sns.ListTopicsInput {
	fake.listTopicsRequestMutex.RLock()
	defer fake.listTopicsRequestMutex.RUnlock()
	argsForCall := fake.listTopicsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) ListTopicsRequestReturns(result1 *request.Request, result2 *sns.ListTopicsOutput) {
	fake.listTopicsRequestMutex.Lock()
	defer fake.listTopicsRequestMutex.Unlock()
	fake.ListTopicsRequestStub = nil
	fake.listTopicsRequestReturns = struct {
		result1 *request.Request
		result2 *sns.ListTopicsOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTopicsRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.ListTopicsOutput) {
	fake.listTopicsRequestMutex.Lock()
	defer fake.listTopicsRequestMutex.Unlock()
	fake.ListTopicsRequestStub = nil
	if fake.listTopicsRequestReturnsOnCall == nil {
		fake.listTopicsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.ListTopicsOutput
		})
	}
	fake.listTopicsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.ListTopicsOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTopicsWithContext(arg1 context.Context, arg2 *sns.ListTopicsInput, arg3 ...request.Option) (*sns.ListTopicsOutput, error) {
	fake.listTopicsWithContextMutex.Lock()
	ret, specificReturn := fake.listTopicsWithContextReturnsOnCall[len(fake.listTopicsWithContextArgsForCall)]
	fake.listTopicsWithContextArgsForCall = append(fake.listTopicsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.ListTopicsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTopicsWithContextStub
	fakeReturns := fake.listTopicsWithContextReturns
	fake.recordInvocation("ListTopicsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTopicsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) ListTopicsWithContextCallCount() int {
	fake.listTopicsWithContextMutex.RLock()
	defer fake.listTopicsWithContextMutex.RUnlock()
	return len(fake.listTopicsWithContextArgsForCall)
}

func (fake *FakeISNSAPI) ListTopicsWithContextCalls(stub func(context.Context, *sns.ListTopicsInput, ...request.Option) (*sns.ListTopicsOutput, error)) {
	fake.listTopicsWithContextMutex.Lock()
	defer fake.listTopicsWithContextMutex.Unlock()
	fake.ListTopicsWithContextStub = stub
}

func (fake *FakeISNSAPI) ListTopicsWithContextArgsForCall(i int) (context.Context, *sns.ListTopicsInput, []request.Option) {
	fake.listTopicsWithContextMutex.RLock()
	defer fake.listTopicsWithContextMutex.RUnlock()
	argsForCall := fake.listTopicsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) ListTopicsWithContextReturns(result1 *sns.ListTopicsOutput, result2 error) {
	fake.listTopicsWithContextMutex.Lock()
	defer fake.listTopicsWithContextMutex.Unlock()
	fake.ListTopicsWithContextStub = nil
	fake.listTopicsWithContextReturns = struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) ListTopicsWithContextReturnsOnCall(i int, result1 *sns.ListTopicsOutput, result2 error) {
	fake.listTopicsWithContextMutex.Lock()
	defer fake.listTopicsWithContextMutex.Unlock()
	fake.ListTopicsWithContextStub = nil
	if fake.listTopicsWithContextReturnsOnCall == nil {
		fake.listTopicsWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.ListTopicsOutput
			result2 error
		})
	}
	fake.listTopicsWithContextReturnsOnCall[i] = struct {
		result1 *sns.ListTopicsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) OptInPhoneNumber(arg1 *sns.OptInPhoneNumberInput) (*sns.OptInPhoneNumberOutput, error) {
	fake.optInPhoneNumberMutex.Lock()
	ret, specificReturn := fake.optInPhoneNumberReturnsOnCall[len(fake.optInPhoneNumberArgsForCall)]
	fake.optInPhoneNumberArgsForCall = append(fake.optInPhoneNumberArgsForCall, struct {
		arg1 *sns.OptInPhoneNumberInput
	}{arg1})
	stub := fake.OptInPhoneNumberStub
	fakeReturns := fake.optInPhoneNumberReturns
	fake.recordInvocation("OptInPhoneNumber", []interface{}{arg1})
	fake.optInPhoneNumberMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) OptInPhoneNumberCallCount() int {
	fake.optInPhoneNumberMutex.RLock()
	defer fake.optInPhoneNumberMutex.RUnlock()
	return len(fake.optInPhoneNumberArgsForCall)
}

func (fake *FakeISNSAPI) OptInPhoneNumberCalls(stub func(*sns.OptInPhoneNumberInput) (*sns.OptInPhoneNumberOutput, error)) {
	fake.optInPhoneNumberMutex.Lock()
	defer fake.optInPhoneNumberMutex.Unlock()
	fake.OptInPhoneNumberStub = stub
}

func (fake *FakeISNSAPI) OptInPhoneNumberArgsForCall(i int) *sns.OptInPhoneNumberInput {
	fake.optInPhoneNumberMutex.RLock()
	defer fake.optInPhoneNumberMutex.RUnlock()
	argsForCall := fake.optInPhoneNumberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) OptInPhoneNumberReturns(result1 *sns.OptInPhoneNumberOutput, result2 error) {
	fake.optInPhoneNumberMutex.Lock()
	defer fake.optInPhoneNumberMutex.Unlock()
	fake.OptInPhoneNumberStub = nil
	fake.optInPhoneNumberReturns = struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) OptInPhoneNumberReturnsOnCall(i int, result1 *sns.OptInPhoneNumberOutput, result2 error) {
	fake.optInPhoneNumberMutex.Lock()
	defer fake.optInPhoneNumberMutex.Unlock()
	fake.OptInPhoneNumberStub = nil
	if fake.optInPhoneNumberReturnsOnCall == nil {
		fake.optInPhoneNumberReturnsOnCall = make(map[int]struct {
			result1 *sns.OptInPhoneNumberOutput
			result2 error
		})
	}
	fake.optInPhoneNumberReturnsOnCall[i] = struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) OptInPhoneNumberRequest(arg1 *sns.OptInPhoneNumberInput) (*request.Request, *sns.OptInPhoneNumberOutput) {
	fake.optInPhoneNumberRequestMutex.Lock()
	ret, specificReturn := fake.optInPhoneNumberRequestReturnsOnCall[len(fake.optInPhoneNumberRequestArgsForCall)]
	fake.optInPhoneNumberRequestArgsForCall = append(fake.optInPhoneNumberRequestArgsForCall, struct {
		arg1 *sns.OptInPhoneNumberInput
	}{arg1})
	stub := fake.OptInPhoneNumberRequestStub
	fakeReturns := fake.optInPhoneNumberRequestReturns
	fake.recordInvocation("OptInPhoneNumberRequest", []interface{}{arg1})
	fake.optInPhoneNumberRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) OptInPhoneNumberRequestCallCount() int {
	fake.optInPhoneNumberRequestMutex.RLock()
	defer fake.optInPhoneNumberRequestMutex.RUnlock()
	return len(fake.optInPhoneNumberRequestArgsForCall)
}

func (fake *FakeISNSAPI) OptInPhoneNumberRequestCalls(stub func(*sns.OptInPhoneNumberInput) (*request.Request, *sns.OptInPhoneNumberOutput)) {
	fake.optInPhoneNumberRequestMutex.Lock()
	defer fake.optInPhoneNumberRequestMutex.Unlock()
	fake.OptInPhoneNumberRequestStub = stub
}

func (fake *FakeISNSAPI) OptInPhoneNumberRequestArgsForCall(i int) *sns.OptInPhoneNumberInput {
	fake.optInPhoneNumberRequestMutex.RLock()
	defer fake.optInPhoneNumberRequestMutex.RUnlock()
	argsForCall := fake.optInPhoneNumberRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) OptInPhoneNumberRequestReturns(result1 *request.Request, result2 *sns.OptInPhoneNumberOutput) {
	fake.optInPhoneNumberRequestMutex.Lock()
	defer fake.optInPhoneNumberRequestMutex.Unlock()
	fake.OptInPhoneNumberRequestStub = nil
	fake.optInPhoneNumberRequestReturns = struct {
		result1 *request.Request
		result2 *sns.OptInPhoneNumberOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) OptInPhoneNumberRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.OptInPhoneNumberOutput) {
	fake.optInPhoneNumberRequestMutex.Lock()
	defer fake.optInPhoneNumberRequestMutex.Unlock()
	fake.OptInPhoneNumberRequestStub = nil
	if fake.optInPhoneNumberRequestReturnsOnCall == nil {
		fake.optInPhoneNumberRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.OptInPhoneNumberOutput
		})
	}
	fake.optInPhoneNumberRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.OptInPhoneNumberOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) OptInPhoneNumberWithContext(arg1 context.Context, arg2 *sns.OptInPhoneNumberInput, arg3 ...request.Option) (*sns.OptInPhoneNumberOutput, error) {
	fake.optInPhoneNumberWithContextMutex.Lock()
	ret, specificReturn := fake.optInPhoneNumberWithContextReturnsOnCall[len(fake.optInPhoneNumberWithContextArgsForCall)]
	fake.optInPhoneNumberWithContextArgsForCall = append(fake.optInPhoneNumberWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.OptInPhoneNumberInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.OptInPhoneNumberWithContextStub
	fakeReturns := fake.optInPhoneNumberWithContextReturns
	fake.recordInvocation("OptInPhoneNumberWithContext", []interface{}{arg1, arg2, arg3})
	fake.optInPhoneNumberWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) OptInPhoneNumberWithContextCallCount() int {
	fake.optInPhoneNumberWithContextMutex.RLock()
	defer fake.optInPhoneNumberWithContextMutex.RUnlock()
	return len(fake.optInPhoneNumberWithContextArgsForCall)
}

func (fake *FakeISNSAPI) OptInPhoneNumberWithContextCalls(stub func(context.Context, *sns.OptInPhoneNumberInput, ...request.Option) (*sns.OptInPhoneNumberOutput, error)) {
	fake.optInPhoneNumberWithContextMutex.Lock()
	defer fake.optInPhoneNumberWithContextMutex.Unlock()
	fake.OptInPhoneNumberWithContextStub = stub
}

func (fake *FakeISNSAPI) OptInPhoneNumberWithContextArgsForCall(i int) (context.Context, *sns.OptInPhoneNumberInput, []request.Option) {
	fake.optInPhoneNumberWithContextMutex.RLock()
	defer fake.optInPhoneNumberWithContextMutex.RUnlock()
	argsForCall := fake.optInPhoneNumberWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) OptInPhoneNumberWithContextReturns(result1 *sns.OptInPhoneNumberOutput, result2 error) {
	fake.optInPhoneNumberWithContextMutex.Lock()
	defer fake.optInPhoneNumberWithContextMutex.Unlock()
	fake.OptInPhoneNumberWithContextStub = nil
	fake.optInPhoneNumberWithContextReturns = struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) OptInPhoneNumberWithContextReturnsOnCall(i int, result1 *sns.OptInPhoneNumberOutput, result2 error) {
	fake.optInPhoneNumberWithContextMutex.Lock()
	defer fake.optInPhoneNumberWithContextMutex.Unlock()
	fake.OptInPhoneNumberWithContextStub = nil
	if fake.optInPhoneNumberWithContextReturnsOnCall == nil {
		fake.optInPhoneNumberWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.OptInPhoneNumberOutput
			result2 error
		})
	}
	fake.optInPhoneNumberWithContextReturnsOnCall[i] = struct {
		result1 *sns.OptInPhoneNumberOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) Publish(arg1 *sns.PublishInput) (*sns.PublishOutput, error) {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 *sns.PublishInput
	}{arg1})
	stub := fake.PublishStub
	fakeReturns := fake.publishReturns
	fake.recordInvocation("Publish", []interface{}{arg1})
	fake.publishMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeISNSAPI) PublishCalls(stub func(*sns.PublishInput) (*sns.PublishOutput, error)) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeISNSAPI) PublishArgsForCall(i int) *sns.PublishInput {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) PublishReturns(result1 *sns.PublishOutput, result2 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 *sns.PublishOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) PublishReturnsOnCall(i int, result1 *sns.PublishOutput, result2 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 *sns.PublishOutput
			result2 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 *sns.PublishOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) PublishRequest(arg1 *sns.PublishInput) (*request.Request, *sns.PublishOutput) {
	fake.publishRequestMutex.Lock()
	ret, specificReturn := fake.publishRequestReturnsOnCall[len(fake.publishRequestArgsForCall)]
	fake.publishRequestArgsForCall = append(fake.publishRequestArgsForCall, struct {
		arg1 *sns.PublishInput
	}{arg1})
	stub := fake.PublishRequestStub
	fakeReturns := fake.publishRequestReturns
	fake.recordInvocation("PublishRequest", []interface{}{arg1})
	fake.publishRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) PublishRequestCallCount() int {
	fake.publishRequestMutex.RLock()
	defer fake.publishRequestMutex.RUnlock()
	return len(fake.publishRequestArgsForCall)
}

func (fake *FakeISNSAPI) PublishRequestCalls(stub func(*sns.PublishInput) (*request.Request, *sns.PublishOutput)) {
	fake.publishRequestMutex.Lock()
	defer fake.publishRequestMutex.Unlock()
	fake.PublishRequestStub = stub
}

func (fake *FakeISNSAPI) PublishRequestArgsForCall(i int) *sns.PublishInput {
	fake.publishRequestMutex.RLock()
	defer fake.publishRequestMutex.RUnlock()
	argsForCall := fake.publishRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) PublishRequestReturns(result1 *request.Request, result2 *sns.PublishOutput) {
	fake.publishRequestMutex.Lock()
	defer fake.publishRequestMutex.Unlock()
	fake.PublishRequestStub = nil
	fake.publishRequestReturns = struct {
		result1 *request.Request
		result2 *sns.PublishOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) PublishRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.PublishOutput) {
	fake.publishRequestMutex.Lock()
	defer fake.publishRequestMutex.Unlock()
	fake.PublishRequestStub = nil
	if fake.publishRequestReturnsOnCall == nil {
		fake.publishRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.PublishOutput
		})
	}
	fake.publishRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.PublishOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) PublishWithContext(arg1 context.Context, arg2 *sns.PublishInput, arg3 ...request.Option) (*sns.PublishOutput, error) {
	fake.publishWithContextMutex.Lock()
	ret, specificReturn := fake.publishWithContextReturnsOnCall[len(fake.publishWithContextArgsForCall)]
	fake.publishWithContextArgsForCall = append(fake.publishWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.PublishInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PublishWithContextStub
	fakeReturns := fake.publishWithContextReturns
	fake.recordInvocation("PublishWithContext", []interface{}{arg1, arg2, arg3})
	fake.publishWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) PublishWithContextCallCount() int {
	fake.publishWithContextMutex.RLock()
	defer fake.publishWithContextMutex.RUnlock()
	return len(fake.publishWithContextArgsForCall)
}

func (fake *FakeISNSAPI) PublishWithContextCalls(stub func(context.Context, *sns.PublishInput, ...request.Option) (*sns.PublishOutput, error)) {
	fake.publishWithContextMutex.Lock()
	defer fake.publishWithContextMutex.Unlock()
	fake.PublishWithContextStub = stub
}

func (fake *FakeISNSAPI) PublishWithContextArgsForCall(i int) (context.Context, *sns.PublishInput, []request.Option) {
	fake.publishWithContextMutex.RLock()
	defer fake.publishWithContextMutex.RUnlock()
	argsForCall := fake.publishWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) PublishWithContextReturns(result1 *sns.PublishOutput, result2 error) {
	fake.publishWithContextMutex.Lock()
	defer fake.publishWithContextMutex.Unlock()
	fake.PublishWithContextStub = nil
	fake.publishWithContextReturns = struct {
		result1 *sns.PublishOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) PublishWithContextReturnsOnCall(i int, result1 *sns.PublishOutput, result2 error) {
	fake.publishWithContextMutex.Lock()
	defer fake.publishWithContextMutex.Unlock()
	fake.PublishWithContextStub = nil
	if fake.publishWithContextReturnsOnCall == nil {
		fake.publishWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.PublishOutput
			result2 error
		})
	}
	fake.publishWithContextReturnsOnCall[i] = struct {
		result1 *sns.PublishOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) RemovePermission(arg1 *sns.RemovePermissionInput) (*sns.RemovePermissionOutput, error) {
	fake.removePermissionMutex.Lock()
	ret, specificReturn := fake.removePermissionReturnsOnCall[len(fake.removePermissionArgsForCall)]
	fake.removePermissionArgsForCall = append(fake.removePermissionArgsForCall, struct {
		arg1 *sns.RemovePermissionInput
	}{arg1})
	stub := fake.RemovePermissionStub
	fakeReturns := fake.removePermissionReturns
	fake.recordInvocation("RemovePermission", []interface{}{arg1})
	fake.removePermissionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) RemovePermissionCallCount() int {
	fake.removePermissionMutex.RLock()
	defer fake.removePermissionMutex.RUnlock()
	return len(fake.removePermissionArgsForCall)
}

func (fake *FakeISNSAPI) RemovePermissionCalls(stub func(*sns.RemovePermissionInput) (*sns.RemovePermissionOutput, error)) {
	fake.removePermissionMutex.Lock()
	defer fake.removePermissionMutex.Unlock()
	fake.RemovePermissionStub = stub
}

func (fake *FakeISNSAPI) RemovePermissionArgsForCall(i int) *sns.RemovePermissionInput {
	fake.removePermissionMutex.RLock()
	defer fake.removePermissionMutex.RUnlock()
	argsForCall := fake.removePermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) RemovePermissionReturns(result1 *sns.RemovePermissionOutput, result2 error) {
	fake.removePermissionMutex.Lock()
	defer fake.removePermissionMutex.Unlock()
	fake.RemovePermissionStub = nil
	fake.removePermissionReturns = struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) RemovePermissionReturnsOnCall(i int, result1 *sns.RemovePermissionOutput, result2 error) {
	fake.removePermissionMutex.Lock()
	defer fake.removePermissionMutex.Unlock()
	fake.RemovePermissionStub = nil
	if fake.removePermissionReturnsOnCall == nil {
		fake.removePermissionReturnsOnCall = make(map[int]struct {
			result1 *sns.RemovePermissionOutput
			result2 error
		})
	}
	fake.removePermissionReturnsOnCall[i] = struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) RemovePermissionRequest(arg1 *sns.RemovePermissionInput) (*request.Request, *sns.RemovePermissionOutput) {
	fake.removePermissionRequestMutex.Lock()
	ret, specificReturn := fake.removePermissionRequestReturnsOnCall[len(fake.removePermissionRequestArgsForCall)]
	fake.removePermissionRequestArgsForCall = append(fake.removePermissionRequestArgsForCall, struct {
		arg1 *sns.RemovePermissionInput
	}{arg1})
	stub := fake.RemovePermissionRequestStub
	fakeReturns := fake.removePermissionRequestReturns
	fake.recordInvocation("RemovePermissionRequest", []interface{}{arg1})
	fake.removePermissionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) RemovePermissionRequestCallCount() int {
	fake.removePermissionRequestMutex.RLock()
	defer fake.removePermissionRequestMutex.RUnlock()
	return len(fake.removePermissionRequestArgsForCall)
}

func (fake *FakeISNSAPI) RemovePermissionRequestCalls(stub func(*sns.RemovePermissionInput) (*request.Request, *sns.RemovePermissionOutput)) {
	fake.removePermissionRequestMutex.Lock()
	defer fake.removePermissionRequestMutex.Unlock()
	fake.RemovePermissionRequestStub = stub
}

func (fake *FakeISNSAPI) RemovePermissionRequestArgsForCall(i int) *sns.RemovePermissionInput {
	fake.removePermissionRequestMutex.RLock()
	defer fake.removePermissionRequestMutex.RUnlock()
	argsForCall := fake.removePermissionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) RemovePermissionRequestReturns(result1 *request.Request, result2 *sns.RemovePermissionOutput) {
	fake.removePermissionRequestMutex.Lock()
	defer fake.removePermissionRequestMutex.Unlock()
	fake.RemovePermissionRequestStub = nil
	fake.removePermissionRequestReturns = struct {
		result1 *request.Request
		result2 *sns.RemovePermissionOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) RemovePermissionRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.RemovePermissionOutput) {
	fake.removePermissionRequestMutex.Lock()
	defer fake.removePermissionRequestMutex.Unlock()
	fake.RemovePermissionRequestStub = nil
	if fake.removePermissionRequestReturnsOnCall == nil {
		fake.removePermissionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.RemovePermissionOutput
		})
	}
	fake.removePermissionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.RemovePermissionOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) RemovePermissionWithContext(arg1 context.Context, arg2 *sns.RemovePermissionInput, arg3 ...request.Option) (*sns.RemovePermissionOutput, error) {
	fake.removePermissionWithContextMutex.Lock()
	ret, specificReturn := fake.removePermissionWithContextReturnsOnCall[len(fake.removePermissionWithContextArgsForCall)]
	fake.removePermissionWithContextArgsForCall = append(fake.removePermissionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.RemovePermissionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemovePermissionWithContextStub
	fakeReturns := fake.removePermissionWithContextReturns
	fake.recordInvocation("RemovePermissionWithContext", []interface{}{arg1, arg2, arg3})
	fake.removePermissionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) RemovePermissionWithContextCallCount() int {
	fake.removePermissionWithContextMutex.RLock()
	defer fake.removePermissionWithContextMutex.RUnlock()
	return len(fake.removePermissionWithContextArgsForCall)
}

func (fake *FakeISNSAPI) RemovePermissionWithContextCalls(stub func(context.Context, *sns.RemovePermissionInput, ...request.Option) (*sns.RemovePermissionOutput, error)) {
	fake.removePermissionWithContextMutex.Lock()
	defer fake.removePermissionWithContextMutex.Unlock()
	fake.RemovePermissionWithContextStub = stub
}

func (fake *FakeISNSAPI) RemovePermissionWithContextArgsForCall(i int) (context.Context, *sns.RemovePermissionInput, []request.Option) {
	fake.removePermissionWithContextMutex.RLock()
	defer fake.removePermissionWithContextMutex.RUnlock()
	argsForCall := fake.removePermissionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) RemovePermissionWithContextReturns(result1 *sns.RemovePermissionOutput, result2 error) {
	fake.removePermissionWithContextMutex.Lock()
	defer fake.removePermissionWithContextMutex.Unlock()
	fake.RemovePermissionWithContextStub = nil
	fake.removePermissionWithContextReturns = struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) RemovePermissionWithContextReturnsOnCall(i int, result1 *sns.RemovePermissionOutput, result2 error) {
	fake.removePermissionWithContextMutex.Lock()
	defer fake.removePermissionWithContextMutex.Unlock()
	fake.RemovePermissionWithContextStub = nil
	if fake.removePermissionWithContextReturnsOnCall == nil {
		fake.removePermissionWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.RemovePermissionOutput
			result2 error
		})
	}
	fake.removePermissionWithContextReturnsOnCall[i] = struct {
		result1 *sns.RemovePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetEndpointAttributes(arg1 *sns.SetEndpointAttributesInput) (*sns.SetEndpointAttributesOutput, error) {
	fake.setEndpointAttributesMutex.Lock()
	ret, specificReturn := fake.setEndpointAttributesReturnsOnCall[len(fake.setEndpointAttributesArgsForCall)]
	fake.setEndpointAttributesArgsForCall = append(fake.setEndpointAttributesArgsForCall, struct {
		arg1 *sns.SetEndpointAttributesInput
	}{arg1})
	stub := fake.SetEndpointAttributesStub
	fakeReturns := fake.setEndpointAttributesReturns
	fake.recordInvocation("SetEndpointAttributes", []interface{}{arg1})
	fake.setEndpointAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetEndpointAttributesCallCount() int {
	fake.setEndpointAttributesMutex.RLock()
	defer fake.setEndpointAttributesMutex.RUnlock()
	return len(fake.setEndpointAttributesArgsForCall)
}

func (fake *FakeISNSAPI) SetEndpointAttributesCalls(stub func(*sns.SetEndpointAttributesInput) (*sns.SetEndpointAttributesOutput, error)) {
	fake.setEndpointAttributesMutex.Lock()
	defer fake.setEndpointAttributesMutex.Unlock()
	fake.SetEndpointAttributesStub = stub
}

func (fake *FakeISNSAPI) SetEndpointAttributesArgsForCall(i int) *sns.SetEndpointAttributesInput {
	fake.setEndpointAttributesMutex.RLock()
	defer fake.setEndpointAttributesMutex.RUnlock()
	argsForCall := fake.setEndpointAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetEndpointAttributesReturns(result1 *sns.SetEndpointAttributesOutput, result2 error) {
	fake.setEndpointAttributesMutex.Lock()
	defer fake.setEndpointAttributesMutex.Unlock()
	fake.SetEndpointAttributesStub = nil
	fake.setEndpointAttributesReturns = struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetEndpointAttributesReturnsOnCall(i int, result1 *sns.SetEndpointAttributesOutput, result2 error) {
	fake.setEndpointAttributesMutex.Lock()
	defer fake.setEndpointAttributesMutex.Unlock()
	fake.SetEndpointAttributesStub = nil
	if fake.setEndpointAttributesReturnsOnCall == nil {
		fake.setEndpointAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.SetEndpointAttributesOutput
			result2 error
		})
	}
	fake.setEndpointAttributesReturnsOnCall[i] = struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetEndpointAttributesRequest(arg1 *sns.SetEndpointAttributesInput) (*request.Request, *sns.SetEndpointAttributesOutput) {
	fake.setEndpointAttributesRequestMutex.Lock()
	ret, specificReturn := fake.setEndpointAttributesRequestReturnsOnCall[len(fake.setEndpointAttributesRequestArgsForCall)]
	fake.setEndpointAttributesRequestArgsForCall = append(fake.setEndpointAttributesRequestArgsForCall, struct {
		arg1 *sns.SetEndpointAttributesInput
	}{arg1})
	stub := fake.SetEndpointAttributesRequestStub
	fakeReturns := fake.setEndpointAttributesRequestReturns
	fake.recordInvocation("SetEndpointAttributesRequest", []interface{}{arg1})
	fake.setEndpointAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetEndpointAttributesRequestCallCount() int {
	fake.setEndpointAttributesRequestMutex.RLock()
	defer fake.setEndpointAttributesRequestMutex.RUnlock()
	return len(fake.setEndpointAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) SetEndpointAttributesRequestCalls(stub func(*sns.SetEndpointAttributesInput) (*request.Request, *sns.SetEndpointAttributesOutput)) {
	fake.setEndpointAttributesRequestMutex.Lock()
	defer fake.setEndpointAttributesRequestMutex.Unlock()
	fake.SetEndpointAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) SetEndpointAttributesRequestArgsForCall(i int) *sns.SetEndpointAttributesInput {
	fake.setEndpointAttributesRequestMutex.RLock()
	defer fake.setEndpointAttributesRequestMutex.RUnlock()
	argsForCall := fake.setEndpointAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetEndpointAttributesRequestReturns(result1 *request.Request, result2 *sns.SetEndpointAttributesOutput) {
	fake.setEndpointAttributesRequestMutex.Lock()
	defer fake.setEndpointAttributesRequestMutex.Unlock()
	fake.SetEndpointAttributesRequestStub = nil
	fake.setEndpointAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.SetEndpointAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetEndpointAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.SetEndpointAttributesOutput) {
	fake.setEndpointAttributesRequestMutex.Lock()
	defer fake.setEndpointAttributesRequestMutex.Unlock()
	fake.SetEndpointAttributesRequestStub = nil
	if fake.setEndpointAttributesRequestReturnsOnCall == nil {
		fake.setEndpointAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.SetEndpointAttributesOutput
		})
	}
	fake.setEndpointAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.SetEndpointAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetEndpointAttributesWithContext(arg1 context.Context, arg2 *sns.SetEndpointAttributesInput, arg3 ...request.Option) (*sns.SetEndpointAttributesOutput, error) {
	fake.setEndpointAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.setEndpointAttributesWithContextReturnsOnCall[len(fake.setEndpointAttributesWithContextArgsForCall)]
	fake.setEndpointAttributesWithContextArgsForCall = append(fake.setEndpointAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.SetEndpointAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SetEndpointAttributesWithContextStub
	fakeReturns := fake.setEndpointAttributesWithContextReturns
	fake.recordInvocation("SetEndpointAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setEndpointAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetEndpointAttributesWithContextCallCount() int {
	fake.setEndpointAttributesWithContextMutex.RLock()
	defer fake.setEndpointAttributesWithContextMutex.RUnlock()
	return len(fake.setEndpointAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) SetEndpointAttributesWithContextCalls(stub func(context.Context, *sns.SetEndpointAttributesInput, ...request.Option) (*sns.SetEndpointAttributesOutput, error)) {
	fake.setEndpointAttributesWithContextMutex.Lock()
	defer fake.setEndpointAttributesWithContextMutex.Unlock()
	fake.SetEndpointAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) SetEndpointAttributesWithContextArgsForCall(i int) (context.Context, *sns.SetEndpointAttributesInput, []request.Option) {
	fake.setEndpointAttributesWithContextMutex.RLock()
	defer fake.setEndpointAttributesWithContextMutex.RUnlock()
	argsForCall := fake.setEndpointAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) SetEndpointAttributesWithContextReturns(result1 *sns.SetEndpointAttributesOutput, result2 error) {
	fake.setEndpointAttributesWithContextMutex.Lock()
	defer fake.setEndpointAttributesWithContextMutex.Unlock()
	fake.SetEndpointAttributesWithContextStub = nil
	fake.setEndpointAttributesWithContextReturns = struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetEndpointAttributesWithContextReturnsOnCall(i int, result1 *sns.SetEndpointAttributesOutput, result2 error) {
	fake.setEndpointAttributesWithContextMutex.Lock()
	defer fake.setEndpointAttributesWithContextMutex.Unlock()
	fake.SetEndpointAttributesWithContextStub = nil
	if fake.setEndpointAttributesWithContextReturnsOnCall == nil {
		fake.setEndpointAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.SetEndpointAttributesOutput
			result2 error
		})
	}
	fake.setEndpointAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.SetEndpointAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributes(arg1 *sns.SetPlatformApplicationAttributesInput) (*sns.SetPlatformApplicationAttributesOutput, error) {
	fake.setPlatformApplicationAttributesMutex.Lock()
	ret, specificReturn := fake.setPlatformApplicationAttributesReturnsOnCall[len(fake.setPlatformApplicationAttributesArgsForCall)]
	fake.setPlatformApplicationAttributesArgsForCall = append(fake.setPlatformApplicationAttributesArgsForCall, struct {
		arg1 *sns.SetPlatformApplicationAttributesInput
	}{arg1})
	stub := fake.SetPlatformApplicationAttributesStub
	fakeReturns := fake.setPlatformApplicationAttributesReturns
	fake.recordInvocation("SetPlatformApplicationAttributes", []interface{}{arg1})
	fake.setPlatformApplicationAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesCallCount() int {
	fake.setPlatformApplicationAttributesMutex.RLock()
	defer fake.setPlatformApplicationAttributesMutex.RUnlock()
	return len(fake.setPlatformApplicationAttributesArgsForCall)
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesCalls(stub func(*sns.SetPlatformApplicationAttributesInput) (*sns.SetPlatformApplicationAttributesOutput, error)) {
	fake.setPlatformApplicationAttributesMutex.Lock()
	defer fake.setPlatformApplicationAttributesMutex.Unlock()
	fake.SetPlatformApplicationAttributesStub = stub
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesArgsForCall(i int) *sns.SetPlatformApplicationAttributesInput {
	fake.setPlatformApplicationAttributesMutex.RLock()
	defer fake.setPlatformApplicationAttributesMutex.RUnlock()
	argsForCall := fake.setPlatformApplicationAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesReturns(result1 *sns.SetPlatformApplicationAttributesOutput, result2 error) {
	fake.setPlatformApplicationAttributesMutex.Lock()
	defer fake.setPlatformApplicationAttributesMutex.Unlock()
	fake.SetPlatformApplicationAttributesStub = nil
	fake.setPlatformApplicationAttributesReturns = struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesReturnsOnCall(i int, result1 *sns.SetPlatformApplicationAttributesOutput, result2 error) {
	fake.setPlatformApplicationAttributesMutex.Lock()
	defer fake.setPlatformApplicationAttributesMutex.Unlock()
	fake.SetPlatformApplicationAttributesStub = nil
	if fake.setPlatformApplicationAttributesReturnsOnCall == nil {
		fake.setPlatformApplicationAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.SetPlatformApplicationAttributesOutput
			result2 error
		})
	}
	fake.setPlatformApplicationAttributesReturnsOnCall[i] = struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesRequest(arg1 *sns.SetPlatformApplicationAttributesInput) (*request.Request, *sns.SetPlatformApplicationAttributesOutput) {
	fake.setPlatformApplicationAttributesRequestMutex.Lock()
	ret, specificReturn := fake.setPlatformApplicationAttributesRequestReturnsOnCall[len(fake.setPlatformApplicationAttributesRequestArgsForCall)]
	fake.setPlatformApplicationAttributesRequestArgsForCall = append(fake.setPlatformApplicationAttributesRequestArgsForCall, struct {
		arg1 *sns.SetPlatformApplicationAttributesInput
	}{arg1})
	stub := fake.SetPlatformApplicationAttributesRequestStub
	fakeReturns := fake.setPlatformApplicationAttributesRequestReturns
	fake.recordInvocation("SetPlatformApplicationAttributesRequest", []interface{}{arg1})
	fake.setPlatformApplicationAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesRequestCallCount() int {
	fake.setPlatformApplicationAttributesRequestMutex.RLock()
	defer fake.setPlatformApplicationAttributesRequestMutex.RUnlock()
	return len(fake.setPlatformApplicationAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesRequestCalls(stub func(*sns.SetPlatformApplicationAttributesInput) (*request.Request, *sns.SetPlatformApplicationAttributesOutput)) {
	fake.setPlatformApplicationAttributesRequestMutex.Lock()
	defer fake.setPlatformApplicationAttributesRequestMutex.Unlock()
	fake.SetPlatformApplicationAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesRequestArgsForCall(i int) *sns.SetPlatformApplicationAttributesInput {
	fake.setPlatformApplicationAttributesRequestMutex.RLock()
	defer fake.setPlatformApplicationAttributesRequestMutex.RUnlock()
	argsForCall := fake.setPlatformApplicationAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesRequestReturns(result1 *request.Request, result2 *sns.SetPlatformApplicationAttributesOutput) {
	fake.setPlatformApplicationAttributesRequestMutex.Lock()
	defer fake.setPlatformApplicationAttributesRequestMutex.Unlock()
	fake.SetPlatformApplicationAttributesRequestStub = nil
	fake.setPlatformApplicationAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.SetPlatformApplicationAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.SetPlatformApplicationAttributesOutput) {
	fake.setPlatformApplicationAttributesRequestMutex.Lock()
	defer fake.setPlatformApplicationAttributesRequestMutex.Unlock()
	fake.SetPlatformApplicationAttributesRequestStub = nil
	if fake.setPlatformApplicationAttributesRequestReturnsOnCall == nil {
		fake.setPlatformApplicationAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.SetPlatformApplicationAttributesOutput
		})
	}
	fake.setPlatformApplicationAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.SetPlatformApplicationAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesWithContext(arg1 context.Context, arg2 *sns.SetPlatformApplicationAttributesInput, arg3 ...request.Option) (*sns.SetPlatformApplicationAttributesOutput, error) {
	fake.setPlatformApplicationAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.setPlatformApplicationAttributesWithContextReturnsOnCall[len(fake.setPlatformApplicationAttributesWithContextArgsForCall)]
	fake.setPlatformApplicationAttributesWithContextArgsForCall = append(fake.setPlatformApplicationAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.SetPlatformApplicationAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SetPlatformApplicationAttributesWithContextStub
	fakeReturns := fake.setPlatformApplicationAttributesWithContextReturns
	fake.recordInvocation("SetPlatformApplicationAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setPlatformApplicationAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesWithContextCallCount() int {
	fake.setPlatformApplicationAttributesWithContextMutex.RLock()
	defer fake.setPlatformApplicationAttributesWithContextMutex.RUnlock()
	return len(fake.setPlatformApplicationAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesWithContextCalls(stub func(context.Context, *sns.SetPlatformApplicationAttributesInput, ...request.Option) (*sns.SetPlatformApplicationAttributesOutput, error)) {
	fake.setPlatformApplicationAttributesWithContextMutex.Lock()
	defer fake.setPlatformApplicationAttributesWithContextMutex.Unlock()
	fake.SetPlatformApplicationAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesWithContextArgsForCall(i int) (context.Context, *sns.SetPlatformApplicationAttributesInput, []request.Option) {
	fake.setPlatformApplicationAttributesWithContextMutex.RLock()
	defer fake.setPlatformApplicationAttributesWithContextMutex.RUnlock()
	argsForCall := fake.setPlatformApplicationAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesWithContextReturns(result1 *sns.SetPlatformApplicationAttributesOutput, result2 error) {
	fake.setPlatformApplicationAttributesWithContextMutex.Lock()
	defer fake.setPlatformApplicationAttributesWithContextMutex.Unlock()
	fake.SetPlatformApplicationAttributesWithContextStub = nil
	fake.setPlatformApplicationAttributesWithContextReturns = struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetPlatformApplicationAttributesWithContextReturnsOnCall(i int, result1 *sns.SetPlatformApplicationAttributesOutput, result2 error) {
	fake.setPlatformApplicationAttributesWithContextMutex.Lock()
	defer fake.setPlatformApplicationAttributesWithContextMutex.Unlock()
	fake.SetPlatformApplicationAttributesWithContextStub = nil
	if fake.setPlatformApplicationAttributesWithContextReturnsOnCall == nil {
		fake.setPlatformApplicationAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.SetPlatformApplicationAttributesOutput
			result2 error
		})
	}
	fake.setPlatformApplicationAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.SetPlatformApplicationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSMSAttributes(arg1 *sns.SetSMSAttributesInput) (*sns.SetSMSAttributesOutput, error) {
	fake.setSMSAttributesMutex.Lock()
	ret, specificReturn := fake.setSMSAttributesReturnsOnCall[len(fake.setSMSAttributesArgsForCall)]
	fake.setSMSAttributesArgsForCall = append(fake.setSMSAttributesArgsForCall, struct {
		arg1 *sns.SetSMSAttributesInput
	}{arg1})
	stub := fake.SetSMSAttributesStub
	fakeReturns := fake.setSMSAttributesReturns
	fake.recordInvocation("SetSMSAttributes", []interface{}{arg1})
	fake.setSMSAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetSMSAttributesCallCount() int {
	fake.setSMSAttributesMutex.RLock()
	defer fake.setSMSAttributesMutex.RUnlock()
	return len(fake.setSMSAttributesArgsForCall)
}

func (fake *FakeISNSAPI) SetSMSAttributesCalls(stub func(*sns.SetSMSAttributesInput) (*sns.SetSMSAttributesOutput, error)) {
	fake.setSMSAttributesMutex.Lock()
	defer fake.setSMSAttributesMutex.Unlock()
	fake.SetSMSAttributesStub = stub
}

func (fake *FakeISNSAPI) SetSMSAttributesArgsForCall(i int) *sns.SetSMSAttributesInput {
	fake.setSMSAttributesMutex.RLock()
	defer fake.setSMSAttributesMutex.RUnlock()
	argsForCall := fake.setSMSAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetSMSAttributesReturns(result1 *sns.SetSMSAttributesOutput, result2 error) {
	fake.setSMSAttributesMutex.Lock()
	defer fake.setSMSAttributesMutex.Unlock()
	fake.SetSMSAttributesStub = nil
	fake.setSMSAttributesReturns = struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSMSAttributesReturnsOnCall(i int, result1 *sns.SetSMSAttributesOutput, result2 error) {
	fake.setSMSAttributesMutex.Lock()
	defer fake.setSMSAttributesMutex.Unlock()
	fake.SetSMSAttributesStub = nil
	if fake.setSMSAttributesReturnsOnCall == nil {
		fake.setSMSAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.SetSMSAttributesOutput
			result2 error
		})
	}
	fake.setSMSAttributesReturnsOnCall[i] = struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSMSAttributesRequest(arg1 *sns.SetSMSAttributesInput) (*request.Request, *sns.SetSMSAttributesOutput) {
	fake.setSMSAttributesRequestMutex.Lock()
	ret, specificReturn := fake.setSMSAttributesRequestReturnsOnCall[len(fake.setSMSAttributesRequestArgsForCall)]
	fake.setSMSAttributesRequestArgsForCall = append(fake.setSMSAttributesRequestArgsForCall, struct {
		arg1 *sns.SetSMSAttributesInput
	}{arg1})
	stub := fake.SetSMSAttributesRequestStub
	fakeReturns := fake.setSMSAttributesRequestReturns
	fake.recordInvocation("SetSMSAttributesRequest", []interface{}{arg1})
	fake.setSMSAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetSMSAttributesRequestCallCount() int {
	fake.setSMSAttributesRequestMutex.RLock()
	defer fake.setSMSAttributesRequestMutex.RUnlock()
	return len(fake.setSMSAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) SetSMSAttributesRequestCalls(stub func(*sns.SetSMSAttributesInput) (*request.Request, *sns.SetSMSAttributesOutput)) {
	fake.setSMSAttributesRequestMutex.Lock()
	defer fake.setSMSAttributesRequestMutex.Unlock()
	fake.SetSMSAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) SetSMSAttributesRequestArgsForCall(i int) *sns.SetSMSAttributesInput {
	fake.setSMSAttributesRequestMutex.RLock()
	defer fake.setSMSAttributesRequestMutex.RUnlock()
	argsForCall := fake.setSMSAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetSMSAttributesRequestReturns(result1 *request.Request, result2 *sns.SetSMSAttributesOutput) {
	fake.setSMSAttributesRequestMutex.Lock()
	defer fake.setSMSAttributesRequestMutex.Unlock()
	fake.SetSMSAttributesRequestStub = nil
	fake.setSMSAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.SetSMSAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSMSAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.SetSMSAttributesOutput) {
	fake.setSMSAttributesRequestMutex.Lock()
	defer fake.setSMSAttributesRequestMutex.Unlock()
	fake.SetSMSAttributesRequestStub = nil
	if fake.setSMSAttributesRequestReturnsOnCall == nil {
		fake.setSMSAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.SetSMSAttributesOutput
		})
	}
	fake.setSMSAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.SetSMSAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSMSAttributesWithContext(arg1 context.Context, arg2 *sns.SetSMSAttributesInput, arg3 ...request.Option) (*sns.SetSMSAttributesOutput, error) {
	fake.setSMSAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.setSMSAttributesWithContextReturnsOnCall[len(fake.setSMSAttributesWithContextArgsForCall)]
	fake.setSMSAttributesWithContextArgsForCall = append(fake.setSMSAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.SetSMSAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SetSMSAttributesWithContextStub
	fakeReturns := fake.setSMSAttributesWithContextReturns
	fake.recordInvocation("SetSMSAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setSMSAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetSMSAttributesWithContextCallCount() int {
	fake.setSMSAttributesWithContextMutex.RLock()
	defer fake.setSMSAttributesWithContextMutex.RUnlock()
	return len(fake.setSMSAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) SetSMSAttributesWithContextCalls(stub func(context.Context, *sns.SetSMSAttributesInput, ...request.Option) (*sns.SetSMSAttributesOutput, error)) {
	fake.setSMSAttributesWithContextMutex.Lock()
	defer fake.setSMSAttributesWithContextMutex.Unlock()
	fake.SetSMSAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) SetSMSAttributesWithContextArgsForCall(i int) (context.Context, *sns.SetSMSAttributesInput, []request.Option) {
	fake.setSMSAttributesWithContextMutex.RLock()
	defer fake.setSMSAttributesWithContextMutex.RUnlock()
	argsForCall := fake.setSMSAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) SetSMSAttributesWithContextReturns(result1 *sns.SetSMSAttributesOutput, result2 error) {
	fake.setSMSAttributesWithContextMutex.Lock()
	defer fake.setSMSAttributesWithContextMutex.Unlock()
	fake.SetSMSAttributesWithContextStub = nil
	fake.setSMSAttributesWithContextReturns = struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSMSAttributesWithContextReturnsOnCall(i int, result1 *sns.SetSMSAttributesOutput, result2 error) {
	fake.setSMSAttributesWithContextMutex.Lock()
	defer fake.setSMSAttributesWithContextMutex.Unlock()
	fake.SetSMSAttributesWithContextStub = nil
	if fake.setSMSAttributesWithContextReturnsOnCall == nil {
		fake.setSMSAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.SetSMSAttributesOutput
			result2 error
		})
	}
	fake.setSMSAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.SetSMSAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSubscriptionAttributes(arg1 *sns.SetSubscriptionAttributesInput) (*sns.SetSubscriptionAttributesOutput, error) {
	fake.setSubscriptionAttributesMutex.Lock()
	ret, specificReturn := fake.setSubscriptionAttributesReturnsOnCall[len(fake.setSubscriptionAttributesArgsForCall)]
	fake.setSubscriptionAttributesArgsForCall = append(fake.setSubscriptionAttributesArgsForCall, struct {
		arg1 *sns.SetSubscriptionAttributesInput
	}{arg1})
	stub := fake.SetSubscriptionAttributesStub
	fakeReturns := fake.setSubscriptionAttributesReturns
	fake.recordInvocation("SetSubscriptionAttributes", []interface{}{arg1})
	fake.setSubscriptionAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesCallCount() int {
	fake.setSubscriptionAttributesMutex.RLock()
	defer fake.setSubscriptionAttributesMutex.RUnlock()
	return len(fake.setSubscriptionAttributesArgsForCall)
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesCalls(stub func(*sns.SetSubscriptionAttributesInput) (*sns.SetSubscriptionAttributesOutput, error)) {
	fake.setSubscriptionAttributesMutex.Lock()
	defer fake.setSubscriptionAttributesMutex.Unlock()
	fake.SetSubscriptionAttributesStub = stub
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesArgsForCall(i int) *sns.SetSubscriptionAttributesInput {
	fake.setSubscriptionAttributesMutex.RLock()
	defer fake.setSubscriptionAttributesMutex.RUnlock()
	argsForCall := fake.setSubscriptionAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesReturns(result1 *sns.SetSubscriptionAttributesOutput, result2 error) {
	fake.setSubscriptionAttributesMutex.Lock()
	defer fake.setSubscriptionAttributesMutex.Unlock()
	fake.SetSubscriptionAttributesStub = nil
	fake.setSubscriptionAttributesReturns = struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesReturnsOnCall(i int, result1 *sns.SetSubscriptionAttributesOutput, result2 error) {
	fake.setSubscriptionAttributesMutex.Lock()
	defer fake.setSubscriptionAttributesMutex.Unlock()
	fake.SetSubscriptionAttributesStub = nil
	if fake.setSubscriptionAttributesReturnsOnCall == nil {
		fake.setSubscriptionAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.SetSubscriptionAttributesOutput
			result2 error
		})
	}
	fake.setSubscriptionAttributesReturnsOnCall[i] = struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesRequest(arg1 *sns.SetSubscriptionAttributesInput) (*request.Request, *sns.SetSubscriptionAttributesOutput) {
	fake.setSubscriptionAttributesRequestMutex.Lock()
	ret, specificReturn := fake.setSubscriptionAttributesRequestReturnsOnCall[len(fake.setSubscriptionAttributesRequestArgsForCall)]
	fake.setSubscriptionAttributesRequestArgsForCall = append(fake.setSubscriptionAttributesRequestArgsForCall, struct {
		arg1 *sns.SetSubscriptionAttributesInput
	}{arg1})
	stub := fake.SetSubscriptionAttributesRequestStub
	fakeReturns := fake.setSubscriptionAttributesRequestReturns
	fake.recordInvocation("SetSubscriptionAttributesRequest", []interface{}{arg1})
	fake.setSubscriptionAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesRequestCallCount() int {
	fake.setSubscriptionAttributesRequestMutex.RLock()
	defer fake.setSubscriptionAttributesRequestMutex.RUnlock()
	return len(fake.setSubscriptionAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesRequestCalls(stub func(*sns.SetSubscriptionAttributesInput) (*request.Request, *sns.SetSubscriptionAttributesOutput)) {
	fake.setSubscriptionAttributesRequestMutex.Lock()
	defer fake.setSubscriptionAttributesRequestMutex.Unlock()
	fake.SetSubscriptionAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesRequestArgsForCall(i int) *sns.SetSubscriptionAttributesInput {
	fake.setSubscriptionAttributesRequestMutex.RLock()
	defer fake.setSubscriptionAttributesRequestMutex.RUnlock()
	argsForCall := fake.setSubscriptionAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesRequestReturns(result1 *request.Request, result2 *sns.SetSubscriptionAttributesOutput) {
	fake.setSubscriptionAttributesRequestMutex.Lock()
	defer fake.setSubscriptionAttributesRequestMutex.Unlock()
	fake.SetSubscriptionAttributesRequestStub = nil
	fake.setSubscriptionAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.SetSubscriptionAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.SetSubscriptionAttributesOutput) {
	fake.setSubscriptionAttributesRequestMutex.Lock()
	defer fake.setSubscriptionAttributesRequestMutex.Unlock()
	fake.SetSubscriptionAttributesRequestStub = nil
	if fake.setSubscriptionAttributesRequestReturnsOnCall == nil {
		fake.setSubscriptionAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.SetSubscriptionAttributesOutput
		})
	}
	fake.setSubscriptionAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.SetSubscriptionAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesWithContext(arg1 context.Context, arg2 *sns.SetSubscriptionAttributesInput, arg3 ...request.Option) (*sns.SetSubscriptionAttributesOutput, error) {
	fake.setSubscriptionAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.setSubscriptionAttributesWithContextReturnsOnCall[len(fake.setSubscriptionAttributesWithContextArgsForCall)]
	fake.setSubscriptionAttributesWithContextArgsForCall = append(fake.setSubscriptionAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.SetSubscriptionAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SetSubscriptionAttributesWithContextStub
	fakeReturns := fake.setSubscriptionAttributesWithContextReturns
	fake.recordInvocation("SetSubscriptionAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setSubscriptionAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesWithContextCallCount() int {
	fake.setSubscriptionAttributesWithContextMutex.RLock()
	defer fake.setSubscriptionAttributesWithContextMutex.RUnlock()
	return len(fake.setSubscriptionAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesWithContextCalls(stub func(context.Context, *sns.SetSubscriptionAttributesInput, ...request.Option) (*sns.SetSubscriptionAttributesOutput, error)) {
	fake.setSubscriptionAttributesWithContextMutex.Lock()
	defer fake.setSubscriptionAttributesWithContextMutex.Unlock()
	fake.SetSubscriptionAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesWithContextArgsForCall(i int) (context.Context, *sns.SetSubscriptionAttributesInput, []request.Option) {
	fake.setSubscriptionAttributesWithContextMutex.RLock()
	defer fake.setSubscriptionAttributesWithContextMutex.RUnlock()
	argsForCall := fake.setSubscriptionAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesWithContextReturns(result1 *sns.SetSubscriptionAttributesOutput, result2 error) {
	fake.setSubscriptionAttributesWithContextMutex.Lock()
	defer fake.setSubscriptionAttributesWithContextMutex.Unlock()
	fake.SetSubscriptionAttributesWithContextStub = nil
	fake.setSubscriptionAttributesWithContextReturns = struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetSubscriptionAttributesWithContextReturnsOnCall(i int, result1 *sns.SetSubscriptionAttributesOutput, result2 error) {
	fake.setSubscriptionAttributesWithContextMutex.Lock()
	defer fake.setSubscriptionAttributesWithContextMutex.Unlock()
	fake.SetSubscriptionAttributesWithContextStub = nil
	if fake.setSubscriptionAttributesWithContextReturnsOnCall == nil {
		fake.setSubscriptionAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.SetSubscriptionAttributesOutput
			result2 error
		})
	}
	fake.setSubscriptionAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.SetSubscriptionAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetTopicAttributes(arg1 *sns.SetTopicAttributesInput) (*sns.SetTopicAttributesOutput, error) {
	fake.setTopicAttributesMutex.Lock()
	ret, specificReturn := fake.setTopicAttributesReturnsOnCall[len(fake.setTopicAttributesArgsForCall)]
	fake.setTopicAttributesArgsForCall = append(fake.setTopicAttributesArgsForCall, struct {
		arg1 *sns.SetTopicAttributesInput
	}{arg1})
	stub := fake.SetTopicAttributesStub
	fakeReturns := fake.setTopicAttributesReturns
	fake.recordInvocation("SetTopicAttributes", []interface{}{arg1})
	fake.setTopicAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetTopicAttributesCallCount() int {
	fake.setTopicAttributesMutex.RLock()
	defer fake.setTopicAttributesMutex.RUnlock()
	return len(fake.setTopicAttributesArgsForCall)
}

func (fake *FakeISNSAPI) SetTopicAttributesCalls(stub func(*sns.SetTopicAttributesInput) (*sns.SetTopicAttributesOutput, error)) {
	fake.setTopicAttributesMutex.Lock()
	defer fake.setTopicAttributesMutex.Unlock()
	fake.SetTopicAttributesStub = stub
}

func (fake *FakeISNSAPI) SetTopicAttributesArgsForCall(i int) *sns.SetTopicAttributesInput {
	fake.setTopicAttributesMutex.RLock()
	defer fake.setTopicAttributesMutex.RUnlock()
	argsForCall := fake.setTopicAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetTopicAttributesReturns(result1 *sns.SetTopicAttributesOutput, result2 error) {
	fake.setTopicAttributesMutex.Lock()
	defer fake.setTopicAttributesMutex.Unlock()
	fake.SetTopicAttributesStub = nil
	fake.setTopicAttributesReturns = struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetTopicAttributesReturnsOnCall(i int, result1 *sns.SetTopicAttributesOutput, result2 error) {
	fake.setTopicAttributesMutex.Lock()
	defer fake.setTopicAttributesMutex.Unlock()
	fake.SetTopicAttributesStub = nil
	if fake.setTopicAttributesReturnsOnCall == nil {
		fake.setTopicAttributesReturnsOnCall = make(map[int]struct {
			result1 *sns.SetTopicAttributesOutput
			result2 error
		})
	}
	fake.setTopicAttributesReturnsOnCall[i] = struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetTopicAttributesRequest(arg1 *sns.SetTopicAttributesInput) (*request.Request, *sns.SetTopicAttributesOutput) {
	fake.setTopicAttributesRequestMutex.Lock()
	ret, specificReturn := fake.setTopicAttributesRequestReturnsOnCall[len(fake.setTopicAttributesRequestArgsForCall)]
	fake.setTopicAttributesRequestArgsForCall = append(fake.setTopicAttributesRequestArgsForCall, struct {
		arg1 *sns.SetTopicAttributesInput
	}{arg1})
	stub := fake.SetTopicAttributesRequestStub
	fakeReturns := fake.setTopicAttributesRequestReturns
	fake.recordInvocation("SetTopicAttributesRequest", []interface{}{arg1})
	fake.setTopicAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetTopicAttributesRequestCallCount() int {
	fake.setTopicAttributesRequestMutex.RLock()
	defer fake.setTopicAttributesRequestMutex.RUnlock()
	return len(fake.setTopicAttributesRequestArgsForCall)
}

func (fake *FakeISNSAPI) SetTopicAttributesRequestCalls(stub func(*sns.SetTopicAttributesInput) (*request.Request, *sns.SetTopicAttributesOutput)) {
	fake.setTopicAttributesRequestMutex.Lock()
	defer fake.setTopicAttributesRequestMutex.Unlock()
	fake.SetTopicAttributesRequestStub = stub
}

func (fake *FakeISNSAPI) SetTopicAttributesRequestArgsForCall(i int) *sns.SetTopicAttributesInput {
	fake.setTopicAttributesRequestMutex.RLock()
	defer fake.setTopicAttributesRequestMutex.RUnlock()
	argsForCall := fake.setTopicAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SetTopicAttributesRequestReturns(result1 *request.Request, result2 *sns.SetTopicAttributesOutput) {
	fake.setTopicAttributesRequestMutex.Lock()
	defer fake.setTopicAttributesRequestMutex.Unlock()
	fake.SetTopicAttributesRequestStub = nil
	fake.setTopicAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *sns.SetTopicAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetTopicAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.SetTopicAttributesOutput) {
	fake.setTopicAttributesRequestMutex.Lock()
	defer fake.setTopicAttributesRequestMutex.Unlock()
	fake.SetTopicAttributesRequestStub = nil
	if fake.setTopicAttributesRequestReturnsOnCall == nil {
		fake.setTopicAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.SetTopicAttributesOutput
		})
	}
	fake.setTopicAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.SetTopicAttributesOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetTopicAttributesWithContext(arg1 context.Context, arg2 *sns.SetTopicAttributesInput, arg3 ...request.Option) (*sns.SetTopicAttributesOutput, error) {
	fake.setTopicAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.setTopicAttributesWithContextReturnsOnCall[len(fake.setTopicAttributesWithContextArgsForCall)]
	fake.setTopicAttributesWithContextArgsForCall = append(fake.setTopicAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.SetTopicAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SetTopicAttributesWithContextStub
	fakeReturns := fake.setTopicAttributesWithContextReturns
	fake.recordInvocation("SetTopicAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setTopicAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SetTopicAttributesWithContextCallCount() int {
	fake.setTopicAttributesWithContextMutex.RLock()
	defer fake.setTopicAttributesWithContextMutex.RUnlock()
	return len(fake.setTopicAttributesWithContextArgsForCall)
}

func (fake *FakeISNSAPI) SetTopicAttributesWithContextCalls(stub func(context.Context, *sns.SetTopicAttributesInput, ...request.Option) (*sns.SetTopicAttributesOutput, error)) {
	fake.setTopicAttributesWithContextMutex.Lock()
	defer fake.setTopicAttributesWithContextMutex.Unlock()
	fake.SetTopicAttributesWithContextStub = stub
}

func (fake *FakeISNSAPI) SetTopicAttributesWithContextArgsForCall(i int) (context.Context, *sns.SetTopicAttributesInput, []request.Option) {
	fake.setTopicAttributesWithContextMutex.RLock()
	defer fake.setTopicAttributesWithContextMutex.RUnlock()
	argsForCall := fake.setTopicAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) SetTopicAttributesWithContextReturns(result1 *sns.SetTopicAttributesOutput, result2 error) {
	fake.setTopicAttributesWithContextMutex.Lock()
	defer fake.setTopicAttributesWithContextMutex.Unlock()
	fake.SetTopicAttributesWithContextStub = nil
	fake.setTopicAttributesWithContextReturns = struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SetTopicAttributesWithContextReturnsOnCall(i int, result1 *sns.SetTopicAttributesOutput, result2 error) {
	fake.setTopicAttributesWithContextMutex.Lock()
	defer fake.setTopicAttributesWithContextMutex.Unlock()
	fake.SetTopicAttributesWithContextStub = nil
	if fake.setTopicAttributesWithContextReturnsOnCall == nil {
		fake.setTopicAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.SetTopicAttributesOutput
			result2 error
		})
	}
	fake.setTopicAttributesWithContextReturnsOnCall[i] = struct {
		result1 *sns.SetTopicAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) Subscribe(arg1 *sns.SubscribeInput) (*sns.SubscribeOutput, error) {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 *sns.SubscribeInput
	}{arg1})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{arg1})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeISNSAPI) SubscribeCalls(stub func(*sns.SubscribeInput) (*sns.SubscribeOutput, error)) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeISNSAPI) SubscribeArgsForCall(i int) *sns.SubscribeInput {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SubscribeReturns(result1 *sns.SubscribeOutput, result2 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 *sns.SubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SubscribeReturnsOnCall(i int, result1 *sns.SubscribeOutput, result2 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 *sns.SubscribeOutput
			result2 error
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 *sns.SubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SubscribeRequest(arg1 *sns.SubscribeInput) (*request.Request, *sns.SubscribeOutput) {
	fake.subscribeRequestMutex.Lock()
	ret, specificReturn := fake.subscribeRequestReturnsOnCall[len(fake.subscribeRequestArgsForCall)]
	fake.subscribeRequestArgsForCall = append(fake.subscribeRequestArgsForCall, struct {
		arg1 *sns.SubscribeInput
	}{arg1})
	stub := fake.SubscribeRequestStub
	fakeReturns := fake.subscribeRequestReturns
	fake.recordInvocation("SubscribeRequest", []interface{}{arg1})
	fake.subscribeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SubscribeRequestCallCount() int {
	fake.subscribeRequestMutex.RLock()
	defer fake.subscribeRequestMutex.RUnlock()
	return len(fake.subscribeRequestArgsForCall)
}

func (fake *FakeISNSAPI) SubscribeRequestCalls(stub func(*sns.SubscribeInput) (*request.Request, *sns.SubscribeOutput)) {
	fake.subscribeRequestMutex.Lock()
	defer fake.subscribeRequestMutex.Unlock()
	fake.SubscribeRequestStub = stub
}

func (fake *FakeISNSAPI) SubscribeRequestArgsForCall(i int) *sns.SubscribeInput {
	fake.subscribeRequestMutex.RLock()
	defer fake.subscribeRequestMutex.RUnlock()
	argsForCall := fake.subscribeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) SubscribeRequestReturns(result1 *request.Request, result2 *sns.SubscribeOutput) {
	fake.subscribeRequestMutex.Lock()
	defer fake.subscribeRequestMutex.Unlock()
	fake.SubscribeRequestStub = nil
	fake.subscribeRequestReturns = struct {
		result1 *request.Request
		result2 *sns.SubscribeOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SubscribeRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.SubscribeOutput) {
	fake.subscribeRequestMutex.Lock()
	defer fake.subscribeRequestMutex.Unlock()
	fake.SubscribeRequestStub = nil
	if fake.subscribeRequestReturnsOnCall == nil {
		fake.subscribeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.SubscribeOutput
		})
	}
	fake.subscribeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.SubscribeOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) SubscribeWithContext(arg1 context.Context, arg2 *sns.SubscribeInput, arg3 ...request.Option) (*sns.SubscribeOutput, error) {
	fake.subscribeWithContextMutex.Lock()
	ret, specificReturn := fake.subscribeWithContextReturnsOnCall[len(fake.subscribeWithContextArgsForCall)]
	fake.subscribeWithContextArgsForCall = append(fake.subscribeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.SubscribeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SubscribeWithContextStub
	fakeReturns := fake.subscribeWithContextReturns
	fake.recordInvocation("SubscribeWithContext", []interface{}{arg1, arg2, arg3})
	fake.subscribeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) SubscribeWithContextCallCount() int {
	fake.subscribeWithContextMutex.RLock()
	defer fake.subscribeWithContextMutex.RUnlock()
	return len(fake.subscribeWithContextArgsForCall)
}

func (fake *FakeISNSAPI) SubscribeWithContextCalls(stub func(context.Context, *sns.SubscribeInput, ...request.Option) (*sns.SubscribeOutput, error)) {
	fake.subscribeWithContextMutex.Lock()
	defer fake.subscribeWithContextMutex.Unlock()
	fake.SubscribeWithContextStub = stub
}

func (fake *FakeISNSAPI) SubscribeWithContextArgsForCall(i int) (context.Context, *sns.SubscribeInput, []request.Option) {
	fake.subscribeWithContextMutex.RLock()
	defer fake.subscribeWithContextMutex.RUnlock()
	argsForCall := fake.subscribeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) SubscribeWithContextReturns(result1 *sns.SubscribeOutput, result2 error) {
	fake.subscribeWithContextMutex.Lock()
	defer fake.subscribeWithContextMutex.Unlock()
	fake.SubscribeWithContextStub = nil
	fake.subscribeWithContextReturns = struct {
		result1 *sns.SubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) SubscribeWithContextReturnsOnCall(i int, result1 *sns.SubscribeOutput, result2 error) {
	fake.subscribeWithContextMutex.Lock()
	defer fake.subscribeWithContextMutex.Unlock()
	fake.SubscribeWithContextStub = nil
	if fake.subscribeWithContextReturnsOnCall == nil {
		fake.subscribeWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.SubscribeOutput
			result2 error
		})
	}
	fake.subscribeWithContextReturnsOnCall[i] = struct {
		result1 *sns.SubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) TagResource(arg1 *sns.TagResourceInput) (*sns.TagResourceOutput, error) {
	fake.tagResourceMutex.Lock()
	ret, specificReturn := fake.tagResourceReturnsOnCall[len(fake.tagResourceArgsForCall)]
	fake.tagResourceArgsForCall = append(fake.tagResourceArgsForCall, struct {
		arg1 *sns.TagResourceInput
	}{arg1})
	stub := fake.TagResourceStub
	fakeReturns := fake.tagResourceReturns
	fake.recordInvocation("TagResource", []interface{}{arg1})
	fake.tagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) TagResourceCallCount() int {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return len(fake.tagResourceArgsForCall)
}

func (fake *FakeISNSAPI) TagResourceCalls(stub func(*sns.TagResourceInput) (*sns.TagResourceOutput, error)) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = stub
}

func (fake *FakeISNSAPI) TagResourceArgsForCall(i int) *sns.TagResourceInput {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	argsForCall := fake.tagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) TagResourceReturns(result1 *sns.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	fake.tagResourceReturns = struct {
		result1 *sns.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) TagResourceReturnsOnCall(i int, result1 *sns.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	if fake.tagResourceReturnsOnCall == nil {
		fake.tagResourceReturnsOnCall = make(map[int]struct {
			result1 *sns.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceReturnsOnCall[i] = struct {
		result1 *sns.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) TagResourceRequest(arg1 *sns.TagResourceInput) (*request.Request, *sns.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	ret, specificReturn := fake.tagResourceRequestReturnsOnCall[len(fake.tagResourceRequestArgsForCall)]
	fake.tagResourceRequestArgsForCall = append(fake.tagResourceRequestArgsForCall, struct {
		arg1 *sns.TagResourceInput
	}{arg1})
	stub := fake.TagResourceRequestStub
	fakeReturns := fake.tagResourceRequestReturns
	fake.recordInvocation("TagResourceRequest", []interface{}{arg1})
	fake.tagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) TagResourceRequestCallCount() int {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return len(fake.tagResourceRequestArgsForCall)
}

func (fake *FakeISNSAPI) TagResourceRequestCalls(stub func(*sns.TagResourceInput) (*request.Request, *sns.TagResourceOutput)) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = stub
}

func (fake *FakeISNSAPI) TagResourceRequestArgsForCall(i int) *sns.TagResourceInput {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	argsForCall := fake.tagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) TagResourceRequestReturns(result1 *request.Request, result2 *sns.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	fake.tagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *sns.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) TagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	if fake.tagResourceRequestReturnsOnCall == nil {
		fake.tagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.TagResourceOutput
		})
	}
	fake.tagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) TagResourceWithContext(arg1 context.Context, arg2 *sns.TagResourceInput, arg3 ...request.Option) (*sns.TagResourceOutput, error) {
	fake.tagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.tagResourceWithContextReturnsOnCall[len(fake.tagResourceWithContextArgsForCall)]
	fake.tagResourceWithContextArgsForCall = append(fake.tagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.TagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TagResourceWithContextStub
	fakeReturns := fake.tagResourceWithContextReturns
	fake.recordInvocation("TagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) TagResourceWithContextCallCount() int {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return len(fake.tagResourceWithContextArgsForCall)
}

func (fake *FakeISNSAPI) TagResourceWithContextCalls(stub func(context.Context, *sns.TagResourceInput, ...request.Option) (*sns.TagResourceOutput, error)) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = stub
}

func (fake *FakeISNSAPI) TagResourceWithContextArgsForCall(i int) (context.Context, *sns.TagResourceInput, []request.Option) {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	argsForCall := fake.tagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) TagResourceWithContextReturns(result1 *sns.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	fake.tagResourceWithContextReturns = struct {
		result1 *sns.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) TagResourceWithContextReturnsOnCall(i int, result1 *sns.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	if fake.tagResourceWithContextReturnsOnCall == nil {
		fake.tagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceWithContextReturnsOnCall[i] = struct {
		result1 *sns.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) Unsubscribe(arg1 *sns.UnsubscribeInput) (*sns.UnsubscribeOutput, error) {
	fake.unsubscribeMutex.Lock()
	ret, specificReturn := fake.unsubscribeReturnsOnCall[len(fake.unsubscribeArgsForCall)]
	fake.unsubscribeArgsForCall = append(fake.unsubscribeArgsForCall, struct {
		arg1 *sns.UnsubscribeInput
	}{arg1})
	stub := fake.UnsubscribeStub
	fakeReturns := fake.unsubscribeReturns
	fake.recordInvocation("Unsubscribe", []interface{}{arg1})
	fake.unsubscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) UnsubscribeCallCount() int {
	fake.unsubscribeMutex.RLock()
	defer fake.unsubscribeMutex.RUnlock()
	return len(fake.unsubscribeArgsForCall)
}

func (fake *FakeISNSAPI) UnsubscribeCalls(stub func(*sns.UnsubscribeInput) (*sns.UnsubscribeOutput, error)) {
	fake.unsubscribeMutex.Lock()
	defer fake.unsubscribeMutex.Unlock()
	fake.UnsubscribeStub = stub
}

func (fake *FakeISNSAPI) UnsubscribeArgsForCall(i int) *sns.UnsubscribeInput {
	fake.unsubscribeMutex.RLock()
	defer fake.unsubscribeMutex.RUnlock()
	argsForCall := fake.unsubscribeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) UnsubscribeReturns(result1 *sns.UnsubscribeOutput, result2 error) {
	fake.unsubscribeMutex.Lock()
	defer fake.unsubscribeMutex.Unlock()
	fake.UnsubscribeStub = nil
	fake.unsubscribeReturns = struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UnsubscribeReturnsOnCall(i int, result1 *sns.UnsubscribeOutput, result2 error) {
	fake.unsubscribeMutex.Lock()
	defer fake.unsubscribeMutex.Unlock()
	fake.UnsubscribeStub = nil
	if fake.unsubscribeReturnsOnCall == nil {
		fake.unsubscribeReturnsOnCall = make(map[int]struct {
			result1 *sns.UnsubscribeOutput
			result2 error
		})
	}
	fake.unsubscribeReturnsOnCall[i] = struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UnsubscribeRequest(arg1 *sns.UnsubscribeInput) (*request.Request, *sns.UnsubscribeOutput) {
	fake.unsubscribeRequestMutex.Lock()
	ret, specificReturn := fake.unsubscribeRequestReturnsOnCall[len(fake.unsubscribeRequestArgsForCall)]
	fake.unsubscribeRequestArgsForCall = append(fake.unsubscribeRequestArgsForCall, struct {
		arg1 *sns.UnsubscribeInput
	}{arg1})
	stub := fake.UnsubscribeRequestStub
	fakeReturns := fake.unsubscribeRequestReturns
	fake.recordInvocation("UnsubscribeRequest", []interface{}{arg1})
	fake.unsubscribeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) UnsubscribeRequestCallCount() int {
	fake.unsubscribeRequestMutex.RLock()
	defer fake.unsubscribeRequestMutex.RUnlock()
	return len(fake.unsubscribeRequestArgsForCall)
}

func (fake *FakeISNSAPI) UnsubscribeRequestCalls(stub func(*sns.UnsubscribeInput) (*request.Request, *sns.UnsubscribeOutput)) {
	fake.unsubscribeRequestMutex.Lock()
	defer fake.unsubscribeRequestMutex.Unlock()
	fake.UnsubscribeRequestStub = stub
}

func (fake *FakeISNSAPI) UnsubscribeRequestArgsForCall(i int) *sns.UnsubscribeInput {
	fake.unsubscribeRequestMutex.RLock()
	defer fake.unsubscribeRequestMutex.RUnlock()
	argsForCall := fake.unsubscribeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) UnsubscribeRequestReturns(result1 *request.Request, result2 *sns.UnsubscribeOutput) {
	fake.unsubscribeRequestMutex.Lock()
	defer fake.unsubscribeRequestMutex.Unlock()
	fake.UnsubscribeRequestStub = nil
	fake.unsubscribeRequestReturns = struct {
		result1 *request.Request
		result2 *sns.UnsubscribeOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) UnsubscribeRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.UnsubscribeOutput) {
	fake.unsubscribeRequestMutex.Lock()
	defer fake.unsubscribeRequestMutex.Unlock()
	fake.UnsubscribeRequestStub = nil
	if fake.unsubscribeRequestReturnsOnCall == nil {
		fake.unsubscribeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.UnsubscribeOutput
		})
	}
	fake.unsubscribeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.UnsubscribeOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) UnsubscribeWithContext(arg1 context.Context, arg2 *sns.UnsubscribeInput, arg3 ...request.Option) (*sns.UnsubscribeOutput, error) {
	fake.unsubscribeWithContextMutex.Lock()
	ret, specificReturn := fake.unsubscribeWithContextReturnsOnCall[len(fake.unsubscribeWithContextArgsForCall)]
	fake.unsubscribeWithContextArgsForCall = append(fake.unsubscribeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.UnsubscribeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UnsubscribeWithContextStub
	fakeReturns := fake.unsubscribeWithContextReturns
	fake.recordInvocation("UnsubscribeWithContext", []interface{}{arg1, arg2, arg3})
	fake.unsubscribeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) UnsubscribeWithContextCallCount() int {
	fake.unsubscribeWithContextMutex.RLock()
	defer fake.unsubscribeWithContextMutex.RUnlock()
	return len(fake.unsubscribeWithContextArgsForCall)
}

func (fake *FakeISNSAPI) UnsubscribeWithContextCalls(stub func(context.Context, *sns.UnsubscribeInput, ...request.Option) (*sns.UnsubscribeOutput, error)) {
	fake.unsubscribeWithContextMutex.Lock()
	defer fake.unsubscribeWithContextMutex.Unlock()
	fake.UnsubscribeWithContextStub = stub
}

func (fake *FakeISNSAPI) UnsubscribeWithContextArgsForCall(i int) (context.Context, *sns.UnsubscribeInput, []request.Option) {
	fake.unsubscribeWithContextMutex.RLock()
	defer fake.unsubscribeWithContextMutex.RUnlock()
	argsForCall := fake.unsubscribeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) UnsubscribeWithContextReturns(result1 *sns.UnsubscribeOutput, result2 error) {
	fake.unsubscribeWithContextMutex.Lock()
	defer fake.unsubscribeWithContextMutex.Unlock()
	fake.UnsubscribeWithContextStub = nil
	fake.unsubscribeWithContextReturns = struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UnsubscribeWithContextReturnsOnCall(i int, result1 *sns.UnsubscribeOutput, result2 error) {
	fake.unsubscribeWithContextMutex.Lock()
	defer fake.unsubscribeWithContextMutex.Unlock()
	fake.UnsubscribeWithContextStub = nil
	if fake.unsubscribeWithContextReturnsOnCall == nil {
		fake.unsubscribeWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.UnsubscribeOutput
			result2 error
		})
	}
	fake.unsubscribeWithContextReturnsOnCall[i] = struct {
		result1 *sns.UnsubscribeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UntagResource(arg1 *sns.UntagResourceInput) (*sns.UntagResourceOutput, error) {
	fake.untagResourceMutex.Lock()
	ret, specificReturn := fake.untagResourceReturnsOnCall[len(fake.untagResourceArgsForCall)]
	fake.untagResourceArgsForCall = append(fake.untagResourceArgsForCall, struct {
		arg1 *sns.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceStub
	fakeReturns := fake.untagResourceReturns
	fake.recordInvocation("UntagResource", []interface{}{arg1})
	fake.untagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) UntagResourceCallCount() int {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return len(fake.untagResourceArgsForCall)
}

func (fake *FakeISNSAPI) UntagResourceCalls(stub func(*sns.UntagResourceInput) (*sns.UntagResourceOutput, error)) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = stub
}

func (fake *FakeISNSAPI) UntagResourceArgsForCall(i int) *sns.UntagResourceInput {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	argsForCall := fake.untagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) UntagResourceReturns(result1 *sns.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	fake.untagResourceReturns = struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UntagResourceReturnsOnCall(i int, result1 *sns.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	if fake.untagResourceReturnsOnCall == nil {
		fake.untagResourceReturnsOnCall = make(map[int]struct {
			result1 *sns.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceReturnsOnCall[i] = struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UntagResourceRequest(arg1 *sns.UntagResourceInput) (*request.Request, *sns.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	ret, specificReturn := fake.untagResourceRequestReturnsOnCall[len(fake.untagResourceRequestArgsForCall)]
	fake.untagResourceRequestArgsForCall = append(fake.untagResourceRequestArgsForCall, struct {
		arg1 *sns.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceRequestStub
	fakeReturns := fake.untagResourceRequestReturns
	fake.recordInvocation("UntagResourceRequest", []interface{}{arg1})
	fake.untagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) UntagResourceRequestCallCount() int {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return len(fake.untagResourceRequestArgsForCall)
}

func (fake *FakeISNSAPI) UntagResourceRequestCalls(stub func(*sns.UntagResourceInput) (*request.Request, *sns.UntagResourceOutput)) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = stub
}

func (fake *FakeISNSAPI) UntagResourceRequestArgsForCall(i int) *sns.UntagResourceInput {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	argsForCall := fake.untagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeISNSAPI) UntagResourceRequestReturns(result1 *request.Request, result2 *sns.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	fake.untagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *sns.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) UntagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *sns.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	if fake.untagResourceRequestReturnsOnCall == nil {
		fake.untagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *sns.UntagResourceOutput
		})
	}
	fake.untagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *sns.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeISNSAPI) UntagResourceWithContext(arg1 context.Context, arg2 *sns.UntagResourceInput, arg3 ...request.Option) (*sns.UntagResourceOutput, error) {
	fake.untagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.untagResourceWithContextReturnsOnCall[len(fake.untagResourceWithContextArgsForCall)]
	fake.untagResourceWithContextArgsForCall = append(fake.untagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *sns.UntagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UntagResourceWithContextStub
	fakeReturns := fake.untagResourceWithContextReturns
	fake.recordInvocation("UntagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeISNSAPI) UntagResourceWithContextCallCount() int {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return len(fake.untagResourceWithContextArgsForCall)
}

func (fake *FakeISNSAPI) UntagResourceWithContextCalls(stub func(context.Context, *sns.UntagResourceInput, ...request.Option) (*sns.UntagResourceOutput, error)) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = stub
}

func (fake *FakeISNSAPI) UntagResourceWithContextArgsForCall(i int) (context.Context, *sns.UntagResourceInput, []request.Option) {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	argsForCall := fake.untagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeISNSAPI) UntagResourceWithContextReturns(result1 *sns.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	fake.untagResourceWithContextReturns = struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) UntagResourceWithContextReturnsOnCall(i int, result1 *sns.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	if fake.untagResourceWithContextReturnsOnCall == nil {
		fake.untagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *sns.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceWithContextReturnsOnCall[i] = struct {
		result1 *sns.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeISNSAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	fake.addPermissionRequestMutex.RLock()
	defer fake.addPermissionRequestMutex.RUnlock()
	fake.addPermissionWithContextMutex.RLock()
	defer fake.addPermissionWithContextMutex.RUnlock()
	fake.checkIfPhoneNumberIsOptedOutMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutMutex.RUnlock()
	fake.checkIfPhoneNumberIsOptedOutRequestMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutRequestMutex.RUnlock()
	fake.checkIfPhoneNumberIsOptedOutWithContextMutex.RLock()
	defer fake.checkIfPhoneNumberIsOptedOutWithContextMutex.RUnlock()
	fake.confirmSubscriptionMutex.RLock()
	defer fake.confirmSubscriptionMutex.RUnlock()
	fake.confirmSubscriptionRequestMutex.RLock()
	defer fake.confirmSubscriptionRequestMutex.RUnlock()
	fake.confirmSubscriptionWithContextMutex.RLock()
	defer fake.confirmSubscriptionWithContextMutex.RUnlock()
	fake.createPlatformApplicationMutex.RLock()
	defer fake.createPlatformApplicationMutex.RUnlock()
	fake.createPlatformApplicationRequestMutex.RLock()
	defer fake.createPlatformApplicationRequestMutex.RUnlock()
	fake.createPlatformApplicationWithContextMutex.RLock()
	defer fake.createPlatformApplicationWithContextMutex.RUnlock()
	fake.createPlatformEndpointMutex.RLock()
	defer fake.createPlatformEndpointMutex.RUnlock()
	fake.createPlatformEndpointRequestMutex.RLock()
	defer fake.createPlatformEndpointRequestMutex.RUnlock()
	fake.createPlatformEndpointWithContextMutex.RLock()
	defer fake.createPlatformEndpointWithContextMutex.RUnlock()
	fake.createTopicMutex.RLock()
	defer fake.createTopicMutex.RUnlock()
	fake.createTopicRequestMutex.RLock()
	defer fake.createTopicRequestMutex.RUnlock()
	fake.createTopicWithContextMutex.RLock()
	defer fake.createTopicWithContextMutex.RUnlock()
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	fake.deleteEndpointRequestMutex.RLock()
	defer fake.deleteEndpointRequestMutex.RUnlock()
	fake.deleteEndpointWithContextMutex.RLock()
	defer fake.deleteEndpointWithContextMutex.RUnlock()
	fake.deletePlatformApplicationMutex.RLock()
	defer fake.deletePlatformApplicationMutex.RUnlock()
	fake.deletePlatformApplicationRequestMutex.RLock()
	defer fake.deletePlatformApplicationRequestMutex.RUnlock()
	fake.deletePlatformApplicationWithContextMutex.RLock()
	defer fake.deletePlatformApplicationWithContextMutex.RUnlock()
	fake.deleteTopicMutex.RLock()
	defer fake.deleteTopicMutex.RUnlock()
	fake.deleteTopicRequestMutex.RLock()
	defer fake.deleteTopicRequestMutex.RUnlock()
	fake.deleteTopicWithContextMutex.RLock()
	defer fake.deleteTopicWithContextMutex.RUnlock()
	fake.getEndpointAttributesMutex.RLock()
	defer fake.getEndpointAttributesMutex.RUnlock()
	fake.getEndpointAttributesRequestMutex.RLock()
	defer fake.getEndpointAttributesRequestMutex.RUnlock()
	fake.getEndpointAttributesWithContextMutex.RLock()
	defer fake.getEndpointAttributesWithContextMutex.RUnlock()
	fake.getPlatformApplicationAttributesMutex.RLock()
	defer fake.getPlatformApplicationAttributesMutex.RUnlock()
	fake.getPlatformApplicationAttributesRequestMutex.RLock()
	defer fake.getPlatformApplicationAttributesRequestMutex.RUnlock()
	fake.getPlatformApplicationAttributesWithContextMutex.RLock()
	defer fake.getPlatformApplicationAttributesWithContextMutex.RUnlock()
	fake.getSMSAttributesMutex.RLock()
	defer fake.getSMSAttributesMutex.RUnlock()
	fake.getSMSAttributesRequestMutex.RLock()
	defer fake.getSMSAttributesRequestMutex.RUnlock()
	fake.getSMSAttributesWithContextMutex.RLock()
	defer fake.getSMSAttributesWithContextMutex.RUnlock()
	fake.getSubscriptionAttributesMutex.RLock()
	defer fake.getSubscriptionAttributesMutex.RUnlock()
	fake.getSubscriptionAttributesRequestMutex.RLock()
	defer fake.getSubscriptionAttributesRequestMutex.RUnlock()
	fake.getSubscriptionAttributesWithContextMutex.RLock()
	defer fake.getSubscriptionAttributesWithContextMutex.RUnlock()
	fake.getTopicAttributesMutex.RLock()
	defer fake.getTopicAttributesMutex.RUnlock()
	fake.getTopicAttributesRequestMutex.RLock()
	defer fake.getTopicAttributesRequestMutex.RUnlock()
	fake.getTopicAttributesWithContextMutex.RLock()
	defer fake.getTopicAttributesWithContextMutex.RUnlock()
	fake.listEndpointsByPlatformApplicationMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationMutex.RUnlock()
	fake.listEndpointsByPlatformApplicationPagesMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationPagesMutex.RUnlock()
	fake.listEndpointsByPlatformApplicationPagesWithContextMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationPagesWithContextMutex.RUnlock()
	fake.listEndpointsByPlatformApplicationRequestMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationRequestMutex.RUnlock()
	fake.listEndpointsByPlatformApplicationWithContextMutex.RLock()
	defer fake.listEndpointsByPlatformApplicationWithContextMutex.RUnlock()
	fake.listPhoneNumbersOptedOutMutex.RLock()
	defer fake.listPhoneNumbersOptedOutMutex.RUnlock()
	fake.listPhoneNumbersOptedOutRequestMutex.RLock()
	defer fake.listPhoneNumbersOptedOutRequestMutex.RUnlock()
	fake.listPhoneNumbersOptedOutWithContextMutex.RLock()
	defer fake.listPhoneNumbersOptedOutWithContextMutex.RUnlock()
	fake.listPlatformApplicationsMutex.RLock()
	defer fake.listPlatformApplicationsMutex.RUnlock()
	fake.listPlatformApplicationsPagesMutex.RLock()
	defer fake.listPlatformApplicationsPagesMutex.RUnlock()
	fake.listPlatformApplicationsPagesWithContextMutex.RLock()
	defer fake.listPlatformApplicationsPagesWithContextMutex.RUnlock()
	fake.listPlatformApplicationsRequestMutex.RLock()
	defer fake.listPlatformApplicationsRequestMutex.RUnlock()
	fake.listPlatformApplicationsWithContextMutex.RLock()
	defer fake.listPlatformApplicationsWithContextMutex.RUnlock()
	fake.listSubscriptionsMutex.RLock()
	defer fake.listSubscriptionsMutex.RUnlock()
	fake.listSubscriptionsByTopicMutex.RLock()
	defer fake.listSubscriptionsByTopicMutex.RUnlock()
	fake.listSubscriptionsByTopicPagesMutex.RLock()
	defer fake.listSubscriptionsByTopicPagesMutex.RUnlock()
	fake.listSubscriptionsByTopicPagesWithContextMutex.RLock()
	defer fake.listSubscriptionsByTopicPagesWithContextMutex.RUnlock()
	fake.listSubscriptionsByTopicRequestMutex.RLock()
	defer fake.listSubscriptionsByTopicRequestMutex.RUnlock()
	fake.listSubscriptionsByTopicWithContextMutex.RLock()
	defer fake.listSubscriptionsByTopicWithContextMutex.RUnlock()
	fake.listSubscriptionsPagesMutex.RLock()
	defer fake.listSubscriptionsPagesMutex.RUnlock()
	fake.listSubscriptionsPagesWithContextMutex.RLock()
	defer fake.listSubscriptionsPagesWithContextMutex.RUnlock()
	fake.listSubscriptionsRequestMutex.RLock()
	defer fake.listSubscriptionsRequestMutex.RUnlock()
	fake.listSubscriptionsWithContextMutex.RLock()
	defer fake.listSubscriptionsWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.listTopicsMutex.RLock()
	defer fake.listTopicsMutex.RUnlock()
	fake.listTopicsPagesMutex.RLock()
	defer fake.listTopicsPagesMutex.RUnlock()
	fake.listTopicsPagesWithContextMutex.RLock()
	defer fake.listTopicsPagesWithContextMutex.RUnlock()
	fake.listTopicsRequestMutex.RLock()
	defer fake.listTopicsRequestMutex.RUnlock()
	fake.listTopicsWithContextMutex.RLock()
	defer fake.listTopicsWithContextMutex.RUnlock()
	fake.optInPhoneNumberMutex.RLock()
	defer fake.optInPhoneNumberMutex.RUnlock()
	fake.optInPhoneNumberRequestMutex.RLock()
	defer fake.optInPhoneNumberRequestMutex.RUnlock()
	fake.optInPhoneNumberWithContextMutex.RLock()
	defer fake.optInPhoneNumberWithContextMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.publishRequestMutex.RLock()
	defer fake.publishRequestMutex.RUnlock()
	fake.publishWithContextMutex.RLock()
	defer fake.publishWithContextMutex.RUnlock()
	fake.removePermissionMutex.RLock()
	defer fake.removePermissionMutex.RUnlock()
	fake.removePermissionRequestMutex.RLock()
	defer fake.removePermissionRequestMutex.RUnlock()
	fake.removePermissionWithContextMutex.RLock()
	defer fake.removePermissionWithContextMutex.RUnlock()
	fake.setEndpointAttributesMutex.RLock()
	defer fake.setEndpointAttributesMutex.RUnlock()
	fake.setEndpointAttributesRequestMutex.RLock()
	defer fake.setEndpointAttributesRequestMutex.RUnlock()
	fake.setEndpointAttributesWithContextMutex.RLock()
	defer fake.setEndpointAttributesWithContextMutex.RUnlock()
	fake.setPlatformApplicationAttributesMutex.RLock()
	defer fake.setPlatformApplicationAttributesMutex.RUnlock()
	fake.setPlatformApplicationAttributesRequestMutex.RLock()
	defer fake.setPlatformApplicationAttributesRequestMutex.RUnlock()
	fake.setPlatformApplicationAttributesWithContextMutex.RLock()
	defer fake.setPlatformApplicationAttributesWithContextMutex.RUnlock()
	fake.setSMSAttributesMutex.RLock()
	defer fake.setSMSAttributesMutex.RUnlock()
	fake.setSMSAttributesRequestMutex.RLock()
	defer fake.setSMSAttributesRequestMutex.RUnlock()
	fake.setSMSAttributesWithContextMutex.RLock()
	defer fake.setSMSAttributesWithContextMutex.RUnlock()
	fake.setSubscriptionAttributesMutex.RLock()
	defer fake.setSubscriptionAttributesMutex.RUnlock()
	fake.setSubscriptionAttributesRequestMutex.RLock()
	defer fake.setSubscriptionAttributesRequestMutex.RUnlock()
	fake.setSubscriptionAttributesWithContextMutex.RLock()
	defer fake.setSubscriptionAttributesWithContextMutex.RUnlock()
	fake.setTopicAttributesMutex.RLock()
	defer fake.setTopicAttributesMutex.RUnlock()
	fake.setTopicAttributesRequestMutex.RLock()
	defer fake.setTopicAttributesRequestMutex.RUnlock()
	fake.setTopicAttributesWithContextMutex.RLock()
	defer fake.setTopicAttributesWithContextMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	fake.subscribeRequestMutex.RLock()
	defer fake.subscribeRequestMutex.RUnlock()
	fake.subscribeWithContextMutex.RLock()
	defer fake.subscribeWithContextMutex.RUnlock()
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	fake.unsubscribeMutex.RLock()
	defer fake.unsubscribeMutex.RUnlock()
	fake.unsubscribeRequestMutex.RLock()
	defer fake.unsubscribeRequestMutex.RUnlock()
	fake.unsubscribeWithContextMutex.RLock()
	defer fake.unsubscribeWithContextMutex.RUnlock()
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeISNSAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.ISNSAPI = new(FakeISNSAPI)
