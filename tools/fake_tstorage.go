// Code generated by counterfeiter. DO NOT EDIT.
package tools

import (
	"sync"

	"github.com/nakabonne/tstorage"
)

type FakeStorage struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	InsertRowsStub        func([]tstorage.Row) error
	insertRowsMutex       sync.RWMutex
	insertRowsArgsForCall []struct {
		arg1 []tstorage.Row
	}
	insertRowsReturns struct {
		result1 error
	}
	insertRowsReturnsOnCall map[int]struct {
		result1 error
	}
	SelectStub        func(string, []tstorage.Label, int64, int64) ([]*tstorage.DataPoint, error)
	selectMutex       sync.RWMutex
	selectArgsForCall []struct {
		arg1 string
		arg2 []tstorage.Label
		arg3 int64
		arg4 int64
	}
	selectReturns struct {
		result1 []*tstorage.DataPoint
		result2 error
	}
	selectReturnsOnCall map[int]struct {
		result1 []*tstorage.DataPoint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeStorage) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeStorage) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) InsertRows(arg1 []tstorage.Row) error {
	var arg1Copy []tstorage.Row
	if arg1 != nil {
		arg1Copy = make([]tstorage.Row, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.insertRowsMutex.Lock()
	ret, specificReturn := fake.insertRowsReturnsOnCall[len(fake.insertRowsArgsForCall)]
	fake.insertRowsArgsForCall = append(fake.insertRowsArgsForCall, struct {
		arg1 []tstorage.Row
	}{arg1Copy})
	stub := fake.InsertRowsStub
	fakeReturns := fake.insertRowsReturns
	fake.recordInvocation("InsertRows", []interface{}{arg1Copy})
	fake.insertRowsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) InsertRowsCallCount() int {
	fake.insertRowsMutex.RLock()
	defer fake.insertRowsMutex.RUnlock()
	return len(fake.insertRowsArgsForCall)
}

func (fake *FakeStorage) InsertRowsCalls(stub func([]tstorage.Row) error) {
	fake.insertRowsMutex.Lock()
	defer fake.insertRowsMutex.Unlock()
	fake.InsertRowsStub = stub
}

func (fake *FakeStorage) InsertRowsArgsForCall(i int) []tstorage.Row {
	fake.insertRowsMutex.RLock()
	defer fake.insertRowsMutex.RUnlock()
	argsForCall := fake.insertRowsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) InsertRowsReturns(result1 error) {
	fake.insertRowsMutex.Lock()
	defer fake.insertRowsMutex.Unlock()
	fake.InsertRowsStub = nil
	fake.insertRowsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) InsertRowsReturnsOnCall(i int, result1 error) {
	fake.insertRowsMutex.Lock()
	defer fake.insertRowsMutex.Unlock()
	fake.InsertRowsStub = nil
	if fake.insertRowsReturnsOnCall == nil {
		fake.insertRowsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertRowsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Select(arg1 string, arg2 []tstorage.Label, arg3 int64, arg4 int64) ([]*tstorage.DataPoint, error) {
	var arg2Copy []tstorage.Label
	if arg2 != nil {
		arg2Copy = make([]tstorage.Label, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.selectMutex.Lock()
	ret, specificReturn := fake.selectReturnsOnCall[len(fake.selectArgsForCall)]
	fake.selectArgsForCall = append(fake.selectArgsForCall, struct {
		arg1 string
		arg2 []tstorage.Label
		arg3 int64
		arg4 int64
	}{arg1, arg2Copy, arg3, arg4})
	stub := fake.SelectStub
	fakeReturns := fake.selectReturns
	fake.recordInvocation("Select", []interface{}{arg1, arg2Copy, arg3, arg4})
	fake.selectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) SelectCallCount() int {
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	return len(fake.selectArgsForCall)
}

func (fake *FakeStorage) SelectCalls(stub func(string, []tstorage.Label, int64, int64) ([]*tstorage.DataPoint, error)) {
	fake.selectMutex.Lock()
	defer fake.selectMutex.Unlock()
	fake.SelectStub = stub
}

func (fake *FakeStorage) SelectArgsForCall(i int) (string, []tstorage.Label, int64, int64) {
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	argsForCall := fake.selectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeStorage) SelectReturns(result1 []*tstorage.DataPoint, result2 error) {
	fake.selectMutex.Lock()
	defer fake.selectMutex.Unlock()
	fake.SelectStub = nil
	fake.selectReturns = struct {
		result1 []*tstorage.DataPoint
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) SelectReturnsOnCall(i int, result1 []*tstorage.DataPoint, result2 error) {
	fake.selectMutex.Lock()
	defer fake.selectMutex.Unlock()
	fake.SelectStub = nil
	if fake.selectReturnsOnCall == nil {
		fake.selectReturnsOnCall = make(map[int]struct {
			result1 []*tstorage.DataPoint
			result2 error
		})
	}
	fake.selectReturnsOnCall[i] = struct {
		result1 []*tstorage.DataPoint
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.insertRowsMutex.RLock()
	defer fake.insertRowsMutex.RUnlock()
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tstorage.Storage = new(FakeStorage)
