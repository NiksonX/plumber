// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc-collector.proto

package services

import (
	context "context"
	fmt "fmt"
	events "github.com/batchcorp/schemas/build/go/events"
	records "github.com/batchcorp/schemas/build/go/events/records"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GenericRecordRequest struct {
	Records              []*records.GenericRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GenericRecordRequest) Reset()         { *m = GenericRecordRequest{} }
func (m *GenericRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GenericRecordRequest) ProtoMessage()    {}
func (*GenericRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{0}
}

func (m *GenericRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericRecordRequest.Unmarshal(m, b)
}
func (m *GenericRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericRecordRequest.Marshal(b, m, deterministic)
}
func (m *GenericRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericRecordRequest.Merge(m, src)
}
func (m *GenericRecordRequest) XXX_Size() int {
	return xxx_messageInfo_GenericRecordRequest.Size(m)
}
func (m *GenericRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenericRecordRequest proto.InternalMessageInfo

func (m *GenericRecordRequest) GetRecords() []*records.GenericRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type GenericRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GenericRecordResponse) Reset()         { *m = GenericRecordResponse{} }
func (m *GenericRecordResponse) String() string { return proto.CompactTextString(m) }
func (*GenericRecordResponse) ProtoMessage()    {}
func (*GenericRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{1}
}

func (m *GenericRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericRecordResponse.Unmarshal(m, b)
}
func (m *GenericRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericRecordResponse.Marshal(b, m, deterministic)
}
func (m *GenericRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericRecordResponse.Merge(m, src)
}
func (m *GenericRecordResponse) XXX_Size() int {
	return xxx_messageInfo_GenericRecordResponse.Size(m)
}
func (m *GenericRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericRecordResponse proto.InternalMessageInfo

func (m *GenericRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *GenericRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type AMQPRecordRequest struct {
	Records              []*records.AMQPSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AMQPRecordRequest) Reset()         { *m = AMQPRecordRequest{} }
func (m *AMQPRecordRequest) String() string { return proto.CompactTextString(m) }
func (*AMQPRecordRequest) ProtoMessage()    {}
func (*AMQPRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{2}
}

func (m *AMQPRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AMQPRecordRequest.Unmarshal(m, b)
}
func (m *AMQPRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AMQPRecordRequest.Marshal(b, m, deterministic)
}
func (m *AMQPRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AMQPRecordRequest.Merge(m, src)
}
func (m *AMQPRecordRequest) XXX_Size() int {
	return xxx_messageInfo_AMQPRecordRequest.Size(m)
}
func (m *AMQPRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AMQPRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AMQPRecordRequest proto.InternalMessageInfo

func (m *AMQPRecordRequest) GetRecords() []*records.AMQPSinkRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type AMQPRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AMQPRecordResponse) Reset()         { *m = AMQPRecordResponse{} }
func (m *AMQPRecordResponse) String() string { return proto.CompactTextString(m) }
func (*AMQPRecordResponse) ProtoMessage()    {}
func (*AMQPRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{3}
}

func (m *AMQPRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AMQPRecordResponse.Unmarshal(m, b)
}
func (m *AMQPRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AMQPRecordResponse.Marshal(b, m, deterministic)
}
func (m *AMQPRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AMQPRecordResponse.Merge(m, src)
}
func (m *AMQPRecordResponse) XXX_Size() int {
	return xxx_messageInfo_AMQPRecordResponse.Size(m)
}
func (m *AMQPRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AMQPRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AMQPRecordResponse proto.InternalMessageInfo

func (m *AMQPRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *AMQPRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type KafkaSinkRecordRequest struct {
	Records              []*records.KafkaSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *KafkaSinkRecordRequest) Reset()         { *m = KafkaSinkRecordRequest{} }
func (m *KafkaSinkRecordRequest) String() string { return proto.CompactTextString(m) }
func (*KafkaSinkRecordRequest) ProtoMessage()    {}
func (*KafkaSinkRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{4}
}

func (m *KafkaSinkRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaSinkRecordRequest.Unmarshal(m, b)
}
func (m *KafkaSinkRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaSinkRecordRequest.Marshal(b, m, deterministic)
}
func (m *KafkaSinkRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaSinkRecordRequest.Merge(m, src)
}
func (m *KafkaSinkRecordRequest) XXX_Size() int {
	return xxx_messageInfo_KafkaSinkRecordRequest.Size(m)
}
func (m *KafkaSinkRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaSinkRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaSinkRecordRequest proto.InternalMessageInfo

func (m *KafkaSinkRecordRequest) GetRecords() []*records.KafkaSinkRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type KafkaSinkRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *KafkaSinkRecordResponse) Reset()         { *m = KafkaSinkRecordResponse{} }
func (m *KafkaSinkRecordResponse) String() string { return proto.CompactTextString(m) }
func (*KafkaSinkRecordResponse) ProtoMessage()    {}
func (*KafkaSinkRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{5}
}

func (m *KafkaSinkRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaSinkRecordResponse.Unmarshal(m, b)
}
func (m *KafkaSinkRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaSinkRecordResponse.Marshal(b, m, deterministic)
}
func (m *KafkaSinkRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaSinkRecordResponse.Merge(m, src)
}
func (m *KafkaSinkRecordResponse) XXX_Size() int {
	return xxx_messageInfo_KafkaSinkRecordResponse.Size(m)
}
func (m *KafkaSinkRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaSinkRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaSinkRecordResponse proto.InternalMessageInfo

func (m *KafkaSinkRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *KafkaSinkRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type SQSRecordRequest struct {
	Records              []*records.SQSRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SQSRecordRequest) Reset()         { *m = SQSRecordRequest{} }
func (m *SQSRecordRequest) String() string { return proto.CompactTextString(m) }
func (*SQSRecordRequest) ProtoMessage()    {}
func (*SQSRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{6}
}

func (m *SQSRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SQSRecordRequest.Unmarshal(m, b)
}
func (m *SQSRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SQSRecordRequest.Marshal(b, m, deterministic)
}
func (m *SQSRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQSRecordRequest.Merge(m, src)
}
func (m *SQSRecordRequest) XXX_Size() int {
	return xxx_messageInfo_SQSRecordRequest.Size(m)
}
func (m *SQSRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQSRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQSRecordRequest proto.InternalMessageInfo

func (m *SQSRecordRequest) GetRecords() []*records.SQSRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type SQSRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SQSRecordResponse) Reset()         { *m = SQSRecordResponse{} }
func (m *SQSRecordResponse) String() string { return proto.CompactTextString(m) }
func (*SQSRecordResponse) ProtoMessage()    {}
func (*SQSRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{7}
}

func (m *SQSRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SQSRecordResponse.Unmarshal(m, b)
}
func (m *SQSRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SQSRecordResponse.Marshal(b, m, deterministic)
}
func (m *SQSRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQSRecordResponse.Merge(m, src)
}
func (m *SQSRecordResponse) XXX_Size() int {
	return xxx_messageInfo_SQSRecordResponse.Size(m)
}
func (m *SQSRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQSRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQSRecordResponse proto.InternalMessageInfo

func (m *SQSRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *SQSRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type AzureRecordRequest struct {
	Records              []*records.AzureSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AzureRecordRequest) Reset()         { *m = AzureRecordRequest{} }
func (m *AzureRecordRequest) String() string { return proto.CompactTextString(m) }
func (*AzureRecordRequest) ProtoMessage()    {}
func (*AzureRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{8}
}

func (m *AzureRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureRecordRequest.Unmarshal(m, b)
}
func (m *AzureRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureRecordRequest.Marshal(b, m, deterministic)
}
func (m *AzureRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureRecordRequest.Merge(m, src)
}
func (m *AzureRecordRequest) XXX_Size() int {
	return xxx_messageInfo_AzureRecordRequest.Size(m)
}
func (m *AzureRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AzureRecordRequest proto.InternalMessageInfo

func (m *AzureRecordRequest) GetRecords() []*records.AzureSinkRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type AzureRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AzureRecordResponse) Reset()         { *m = AzureRecordResponse{} }
func (m *AzureRecordResponse) String() string { return proto.CompactTextString(m) }
func (*AzureRecordResponse) ProtoMessage()    {}
func (*AzureRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{9}
}

func (m *AzureRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureRecordResponse.Unmarshal(m, b)
}
func (m *AzureRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureRecordResponse.Marshal(b, m, deterministic)
}
func (m *AzureRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureRecordResponse.Merge(m, src)
}
func (m *AzureRecordResponse) XXX_Size() int {
	return xxx_messageInfo_AzureRecordResponse.Size(m)
}
func (m *AzureRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AzureRecordResponse proto.InternalMessageInfo

func (m *AzureRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *AzureRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type GCPRecordRequest struct {
	Records              []*records.GCPRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GCPRecordRequest) Reset()         { *m = GCPRecordRequest{} }
func (m *GCPRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GCPRecordRequest) ProtoMessage()    {}
func (*GCPRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{10}
}

func (m *GCPRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCPRecordRequest.Unmarshal(m, b)
}
func (m *GCPRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCPRecordRequest.Marshal(b, m, deterministic)
}
func (m *GCPRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCPRecordRequest.Merge(m, src)
}
func (m *GCPRecordRequest) XXX_Size() int {
	return xxx_messageInfo_GCPRecordRequest.Size(m)
}
func (m *GCPRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GCPRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GCPRecordRequest proto.InternalMessageInfo

func (m *GCPRecordRequest) GetRecords() []*records.GCPRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type GCPRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GCPRecordResponse) Reset()         { *m = GCPRecordResponse{} }
func (m *GCPRecordResponse) String() string { return proto.CompactTextString(m) }
func (*GCPRecordResponse) ProtoMessage()    {}
func (*GCPRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{11}
}

func (m *GCPRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCPRecordResponse.Unmarshal(m, b)
}
func (m *GCPRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCPRecordResponse.Marshal(b, m, deterministic)
}
func (m *GCPRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCPRecordResponse.Merge(m, src)
}
func (m *GCPRecordResponse) XXX_Size() int {
	return xxx_messageInfo_GCPRecordResponse.Size(m)
}
func (m *GCPRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GCPRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GCPRecordResponse proto.InternalMessageInfo

func (m *GCPRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *GCPRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type RedisRecordRequest struct {
	Records              []*records.RedisRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RedisRecordRequest) Reset()         { *m = RedisRecordRequest{} }
func (m *RedisRecordRequest) String() string { return proto.CompactTextString(m) }
func (*RedisRecordRequest) ProtoMessage()    {}
func (*RedisRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{12}
}

func (m *RedisRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisRecordRequest.Unmarshal(m, b)
}
func (m *RedisRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisRecordRequest.Marshal(b, m, deterministic)
}
func (m *RedisRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisRecordRequest.Merge(m, src)
}
func (m *RedisRecordRequest) XXX_Size() int {
	return xxx_messageInfo_RedisRecordRequest.Size(m)
}
func (m *RedisRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedisRecordRequest proto.InternalMessageInfo

func (m *RedisRecordRequest) GetRecords() []*records.RedisRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RedisRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RedisRecordResponse) Reset()         { *m = RedisRecordResponse{} }
func (m *RedisRecordResponse) String() string { return proto.CompactTextString(m) }
func (*RedisRecordResponse) ProtoMessage()    {}
func (*RedisRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{13}
}

func (m *RedisRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisRecordResponse.Unmarshal(m, b)
}
func (m *RedisRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisRecordResponse.Marshal(b, m, deterministic)
}
func (m *RedisRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisRecordResponse.Merge(m, src)
}
func (m *RedisRecordResponse) XXX_Size() int {
	return xxx_messageInfo_RedisRecordResponse.Size(m)
}
func (m *RedisRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedisRecordResponse proto.InternalMessageInfo

func (m *RedisRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *RedisRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type RedisStreamsRecordRequest struct {
	Records              []*records.RedisStreamsRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RedisStreamsRecordRequest) Reset()         { *m = RedisStreamsRecordRequest{} }
func (m *RedisStreamsRecordRequest) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsRecordRequest) ProtoMessage()    {}
func (*RedisStreamsRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{14}
}

func (m *RedisStreamsRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsRecordRequest.Unmarshal(m, b)
}
func (m *RedisStreamsRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsRecordRequest.Marshal(b, m, deterministic)
}
func (m *RedisStreamsRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsRecordRequest.Merge(m, src)
}
func (m *RedisStreamsRecordRequest) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsRecordRequest.Size(m)
}
func (m *RedisStreamsRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsRecordRequest proto.InternalMessageInfo

func (m *RedisStreamsRecordRequest) GetRecords() []*records.RedisStreamsRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RedisStreamsRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RedisStreamsRecordResponse) Reset()         { *m = RedisStreamsRecordResponse{} }
func (m *RedisStreamsRecordResponse) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsRecordResponse) ProtoMessage()    {}
func (*RedisStreamsRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{15}
}

func (m *RedisStreamsRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsRecordResponse.Unmarshal(m, b)
}
func (m *RedisStreamsRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsRecordResponse.Marshal(b, m, deterministic)
}
func (m *RedisStreamsRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsRecordResponse.Merge(m, src)
}
func (m *RedisStreamsRecordResponse) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsRecordResponse.Size(m)
}
func (m *RedisStreamsRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsRecordResponse proto.InternalMessageInfo

func (m *RedisStreamsRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *RedisStreamsRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type TestRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{16}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

type TestResponse struct {
	Status               *events.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14fa3ba2d2da9b2, []int{17}
}

func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*GenericRecordRequest)(nil), "services.GenericRecordRequest")
	proto.RegisterType((*GenericRecordResponse)(nil), "services.GenericRecordResponse")
	proto.RegisterType((*AMQPRecordRequest)(nil), "services.AMQPRecordRequest")
	proto.RegisterType((*AMQPRecordResponse)(nil), "services.AMQPRecordResponse")
	proto.RegisterType((*KafkaSinkRecordRequest)(nil), "services.KafkaSinkRecordRequest")
	proto.RegisterType((*KafkaSinkRecordResponse)(nil), "services.KafkaSinkRecordResponse")
	proto.RegisterType((*SQSRecordRequest)(nil), "services.SQSRecordRequest")
	proto.RegisterType((*SQSRecordResponse)(nil), "services.SQSRecordResponse")
	proto.RegisterType((*AzureRecordRequest)(nil), "services.AzureRecordRequest")
	proto.RegisterType((*AzureRecordResponse)(nil), "services.AzureRecordResponse")
	proto.RegisterType((*GCPRecordRequest)(nil), "services.GCPRecordRequest")
	proto.RegisterType((*GCPRecordResponse)(nil), "services.GCPRecordResponse")
	proto.RegisterType((*RedisRecordRequest)(nil), "services.RedisRecordRequest")
	proto.RegisterType((*RedisRecordResponse)(nil), "services.RedisRecordResponse")
	proto.RegisterType((*RedisStreamsRecordRequest)(nil), "services.RedisStreamsRecordRequest")
	proto.RegisterType((*RedisStreamsRecordResponse)(nil), "services.RedisStreamsRecordResponse")
	proto.RegisterType((*TestRequest)(nil), "services.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "services.TestResponse")
}

func init() { proto.RegisterFile("grpc-collector.proto", fileDescriptor_b14fa3ba2d2da9b2) }

var fileDescriptor_b14fa3ba2d2da9b2 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x15, 0x06, 0x03, 0xee, 0xfe, 0x88, 0x79, 0xeb, 0xd6, 0x79, 0x03, 0x4a, 0x41, 0x68,
	0x0f, 0x2c, 0x81, 0xa2, 0xf1, 0x4c, 0x18, 0xd0, 0x09, 0x36, 0xa9, 0x4b, 0xe1, 0x85, 0x97, 0x29,
	0xb5, 0x4d, 0x1b, 0x6d, 0xf9, 0x53, 0x3b, 0x99, 0x10, 0x5f, 0x91, 0x2f, 0x85, 0x9a, 0x38, 0x89,
	0xe3, 0xa6, 0xd5, 0x9e, 0xf2, 0x98, 0x9c, 0x73, 0x8f, 0x7f, 0x76, 0x7d, 0x6f, 0x0a, 0x3b, 0x63,
	0x1e, 0x91, 0x63, 0x12, 0xde, 0xdc, 0x30, 0x12, 0x87, 0xdc, 0x8c, 0x78, 0x18, 0x87, 0xe8, 0x91,
	0x60, 0xfc, 0xd6, 0x23, 0x4c, 0xe0, 0x6d, 0x76, 0xcb, 0x82, 0x58, 0x58, 0x22, 0x76, 0xe3, 0x44,
	0x64, 0x32, 0x3e, 0x94, 0x2f, 0x39, 0x23, 0x21, 0xa7, 0xc2, 0x1a, 0xb3, 0x80, 0x71, 0x8f, 0x48,
	0x75, 0x5f, 0x53, 0x5d, 0x7f, 0x1a, 0x49, 0x09, 0x6b, 0xd2, 0xb5, 0xfb, 0xfb, 0xda, 0x95, 0x5a,
	0x5b, 0xd3, 0xc4, 0x54, 0x2c, 0xa8, 0x72, 0xff, 0x26, 0x9c, 0x2d, 0xa8, 0x1a, 0x93, 0x45, 0x6b,
	0x71, 0x46, 0xbd, 0x3c, 0xb1, 0x5b, 0xa7, 0x1d, 0x8b, 0x98, 0x33, 0xd7, 0x97, 0x9e, 0xee, 0x19,
	0xec, 0xf4, 0xb3, 0x7d, 0x39, 0xa9, 0xcb, 0x61, 0xd3, 0x84, 0x89, 0x18, 0xbd, 0x85, 0x87, 0xb2,
	0xac, 0x6d, 0x74, 0x56, 0x8e, 0xd6, 0x7a, 0xbb, 0xa6, 0x7c, 0x36, 0xab, 0xfe, 0xdc, 0xd6, 0x15,
	0xd0, 0xd2, 0x92, 0x44, 0x14, 0x06, 0x82, 0xa1, 0x1e, 0xb4, 0x82, 0xc4, 0xbf, 0x92, 0xbe, 0xab,
	0x88, 0x87, 0x84, 0x09, 0xc1, 0x68, 0xdb, 0xe8, 0x18, 0x47, 0x2b, 0xce, 0x76, 0x90, 0xf8, 0x59,
	0x85, 0x18, 0xe4, 0x12, 0x7a, 0x0d, 0xab, 0xd9, 0x6f, 0xd1, 0xbe, 0xd7, 0x31, 0x8e, 0xd6, 0x7a,
	0x9b, 0x66, 0xb6, 0x17, 0x73, 0x98, 0xbe, 0x75, 0xa4, 0xda, 0xfd, 0x0a, 0x5b, 0xf6, 0xc5, 0xe5,
	0xa0, 0xca, 0xfe, 0x4e, 0x67, 0xdf, 0x2b, 0xd8, 0x67, 0xe6, 0xa1, 0x17, 0x5c, 0xeb, 0xf0, 0x11,
	0x20, 0x35, 0xa7, 0x01, 0xf2, 0x73, 0xd8, 0xfd, 0x3e, 0xbb, 0x17, 0x0a, 0x8d, 0xc4, 0xef, 0xe9,
	0xf8, 0xed, 0x02, 0x5f, 0xaf, 0x28, 0xf8, 0x13, 0xd8, 0x9b, 0x4b, 0x6b, 0x60, 0x13, 0x1f, 0xe1,
	0xc9, 0xf0, 0x72, 0x58, 0xc5, 0x7f, 0xa3, 0xe3, 0xa3, 0x02, 0xbf, 0xf4, 0x16, 0xe0, 0x21, 0x6c,
	0x29, 0x09, 0x0d, 0x20, 0x9f, 0x01, 0xb2, 0x67, 0x9d, 0x75, 0xe7, 0x33, 0x4f, 0xdd, 0x75, 0x67,
	0x3e, 0x85, 0xed, 0x4a, 0x52, 0x33, 0xe7, 0xdd, 0x3f, 0x1d, 0xdc, 0xf9, 0xbc, 0x4b, 0xaf, 0x7a,
	0xde, 0x4a, 0x42, 0x03, 0xc8, 0x9f, 0x01, 0x39, 0xb3, 0xb9, 0x53, 0x85, 0x36, 0x75, 0xe8, 0x9d,
	0x02, 0x5a, 0x75, 0xab, 0x67, 0x5d, 0x49, 0x69, 0x00, 0xdc, 0x81, 0xfd, 0x74, 0xc9, 0x61, 0x36,
	0x2f, 0xab, 0xfc, 0x27, 0x3a, 0xff, 0x41, 0x95, 0xbf, 0x5a, 0x54, 0x6c, 0xe3, 0x0f, 0xe0, 0xba,
	0xcc, 0x06, 0x76, 0xb3, 0x01, 0x6b, 0x3f, 0x98, 0x88, 0x25, 0x7f, 0xf7, 0x03, 0xac, 0x67, 0x8f,
	0x72, 0xe9, 0x32, 0xc6, 0x58, 0x16, 0xd3, 0xfb, 0xf7, 0x00, 0x36, 0xfa, 0xce, 0xe0, 0xf4, 0x34,
	0xff, 0x94, 0xa2, 0x73, 0x78, 0x6c, 0x53, 0x9a, 0x71, 0xa1, 0x67, 0x66, 0xfe, 0x49, 0x35, 0xeb,
	0xbe, 0x2a, 0xf8, 0xf9, 0x42, 0x5d, 0x72, 0x7c, 0x83, 0x0d, 0x9b, 0xd2, 0x72, 0x14, 0xa3, 0x83,
	0xb2, 0x62, 0x6e, 0xd0, 0xe3, 0xc3, 0x7a, 0x51, 0x66, 0xfd, 0x84, 0x4d, 0x9b, 0xd2, 0x74, 0x2c,
	0xca, 0xb0, 0x4e, 0xe9, 0xaf, 0x9f, 0xbd, 0xf8, 0xc5, 0x12, 0x87, 0x8c, 0xed, 0xc3, 0xba, 0x4d,
	0x69, 0x31, 0xb4, 0x10, 0x2e, 0x4b, 0xf4, 0x59, 0x88, 0x0f, 0x6a, 0x35, 0x19, 0x74, 0x91, 0xf2,
	0x29, 0x23, 0x04, 0xa9, 0xfb, 0x99, 0x9b, 0x51, 0xf8, 0xe9, 0x02, 0xb5, 0xc2, 0x55, 0x34, 0xb7,
	0xca, 0xa5, 0xcf, 0x0c, 0x95, 0x6b, 0x7e, 0x1a, 0x64, 0x5c, 0x4a, 0xbb, 0xa9, 0x5c, 0xf3, 0xbd,
	0xac, 0x72, 0xd5, 0xf5, 0xe8, 0x08, 0x5a, 0x79, 0x5c, 0xe5, 0xda, 0xa3, 0x97, 0x5a, 0x5d, 0x5d,
	0xa3, 0xe1, 0x57, 0xcb, 0x4d, 0x72, 0x8d, 0x13, 0xb8, 0x3f, 0xbb, 0xce, 0xa8, 0x55, 0xba, 0x95,
	0xdb, 0x8e, 0x77, 0xf5, 0xd7, 0x59, 0xd9, 0xa7, 0x2f, 0xb0, 0x25, 0x26, 0xe6, 0xc8, 0x8d, 0xc9,
	0xa4, 0x70, 0x0c, 0x8c, 0x5f, 0xe6, 0xd8, 0x8b, 0x27, 0xc9, 0xc8, 0x24, 0xa1, 0x6f, 0xa5, 0x22,
	0x09, 0x79, 0x64, 0x09, 0x32, 0x61, 0xbe, 0x2b, 0xac, 0x51, 0xe2, 0xdd, 0x50, 0x6b, 0x1c, 0x5a,
	0x79, 0xc5, 0x68, 0x35, 0xfd, 0x2b, 0xf5, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x05,
	0xce, 0x84, 0x66, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCCollectorClient is the client API for GRPCCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCCollectorClient interface {
	AddRecord(ctx context.Context, in *GenericRecordRequest, opts ...grpc.CallOption) (*GenericRecordResponse, error)
	AddAMQPRecord(ctx context.Context, in *AMQPRecordRequest, opts ...grpc.CallOption) (*AMQPRecordResponse, error)
	AddKafkaRecord(ctx context.Context, in *KafkaSinkRecordRequest, opts ...grpc.CallOption) (*KafkaSinkRecordResponse, error)
	AddSQSRecord(ctx context.Context, in *SQSRecordRequest, opts ...grpc.CallOption) (*SQSRecordResponse, error)
	AddAzureRecord(ctx context.Context, in *AzureRecordRequest, opts ...grpc.CallOption) (*AzureRecordResponse, error)
	AddGCPRecord(ctx context.Context, in *GCPRecordRequest, opts ...grpc.CallOption) (*GCPRecordResponse, error)
	AddRedisRecord(ctx context.Context, in *RedisRecordRequest, opts ...grpc.CallOption) (*RedisRecordResponse, error)
	AddRedisStreamsRecord(ctx context.Context, in *RedisStreamsRecordRequest, opts ...grpc.CallOption) (*RedisStreamsRecordResponse, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type gRPCCollectorClient struct {
	cc *grpc.ClientConn
}

func NewGRPCCollectorClient(cc *grpc.ClientConn) GRPCCollectorClient {
	return &gRPCCollectorClient{cc}
}

func (c *gRPCCollectorClient) AddRecord(ctx context.Context, in *GenericRecordRequest, opts ...grpc.CallOption) (*GenericRecordResponse, error) {
	out := new(GenericRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddAMQPRecord(ctx context.Context, in *AMQPRecordRequest, opts ...grpc.CallOption) (*AMQPRecordResponse, error) {
	out := new(AMQPRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddAMQPRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddKafkaRecord(ctx context.Context, in *KafkaSinkRecordRequest, opts ...grpc.CallOption) (*KafkaSinkRecordResponse, error) {
	out := new(KafkaSinkRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddKafkaRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddSQSRecord(ctx context.Context, in *SQSRecordRequest, opts ...grpc.CallOption) (*SQSRecordResponse, error) {
	out := new(SQSRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddSQSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddAzureRecord(ctx context.Context, in *AzureRecordRequest, opts ...grpc.CallOption) (*AzureRecordResponse, error) {
	out := new(AzureRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddAzureRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddGCPRecord(ctx context.Context, in *GCPRecordRequest, opts ...grpc.CallOption) (*GCPRecordResponse, error) {
	out := new(GCPRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddGCPRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddRedisRecord(ctx context.Context, in *RedisRecordRequest, opts ...grpc.CallOption) (*RedisRecordResponse, error) {
	out := new(RedisRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddRedisRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddRedisStreamsRecord(ctx context.Context, in *RedisStreamsRecordRequest, opts ...grpc.CallOption) (*RedisStreamsRecordResponse, error) {
	out := new(RedisStreamsRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddRedisStreamsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCCollectorServer is the server API for GRPCCollector service.
type GRPCCollectorServer interface {
	AddRecord(context.Context, *GenericRecordRequest) (*GenericRecordResponse, error)
	AddAMQPRecord(context.Context, *AMQPRecordRequest) (*AMQPRecordResponse, error)
	AddKafkaRecord(context.Context, *KafkaSinkRecordRequest) (*KafkaSinkRecordResponse, error)
	AddSQSRecord(context.Context, *SQSRecordRequest) (*SQSRecordResponse, error)
	AddAzureRecord(context.Context, *AzureRecordRequest) (*AzureRecordResponse, error)
	AddGCPRecord(context.Context, *GCPRecordRequest) (*GCPRecordResponse, error)
	AddRedisRecord(context.Context, *RedisRecordRequest) (*RedisRecordResponse, error)
	AddRedisStreamsRecord(context.Context, *RedisStreamsRecordRequest) (*RedisStreamsRecordResponse, error)
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedGRPCCollectorServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCCollectorServer struct {
}

func (*UnimplementedGRPCCollectorServer) AddRecord(ctx context.Context, req *GenericRecordRequest) (*GenericRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddAMQPRecord(ctx context.Context, req *AMQPRecordRequest) (*AMQPRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAMQPRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddKafkaRecord(ctx context.Context, req *KafkaSinkRecordRequest) (*KafkaSinkRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKafkaRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddSQSRecord(ctx context.Context, req *SQSRecordRequest) (*SQSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSQSRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddAzureRecord(ctx context.Context, req *AzureRecordRequest) (*AzureRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddGCPRecord(ctx context.Context, req *GCPRecordRequest) (*GCPRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGCPRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddRedisRecord(ctx context.Context, req *RedisRecordRequest) (*RedisRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRedisRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) AddRedisStreamsRecord(ctx context.Context, req *RedisStreamsRecordRequest) (*RedisStreamsRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRedisStreamsRecord not implemented")
}
func (*UnimplementedGRPCCollectorServer) Test(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterGRPCCollectorServer(s *grpc.Server, srv GRPCCollectorServer) {
	s.RegisterService(&_GRPCCollector_serviceDesc, srv)
}

func _GRPCCollector_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddRecord(ctx, req.(*GenericRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddAMQPRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMQPRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddAMQPRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddAMQPRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddAMQPRecord(ctx, req.(*AMQPRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddKafkaRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KafkaSinkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddKafkaRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddKafkaRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddKafkaRecord(ctx, req.(*KafkaSinkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddSQSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddSQSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddSQSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddSQSRecord(ctx, req.(*SQSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddAzureRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AzureRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddAzureRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddAzureRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddAzureRecord(ctx, req.(*AzureRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddGCPRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCPRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddGCPRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddGCPRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddGCPRecord(ctx, req.(*GCPRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddRedisRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddRedisRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddRedisRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddRedisRecord(ctx, req.(*RedisRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddRedisStreamsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisStreamsRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddRedisStreamsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddRedisStreamsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddRedisStreamsRecord(ctx, req.(*RedisStreamsRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.GRPCCollector",
	HandlerType: (*GRPCCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _GRPCCollector_AddRecord_Handler,
		},
		{
			MethodName: "AddAMQPRecord",
			Handler:    _GRPCCollector_AddAMQPRecord_Handler,
		},
		{
			MethodName: "AddKafkaRecord",
			Handler:    _GRPCCollector_AddKafkaRecord_Handler,
		},
		{
			MethodName: "AddSQSRecord",
			Handler:    _GRPCCollector_AddSQSRecord_Handler,
		},
		{
			MethodName: "AddAzureRecord",
			Handler:    _GRPCCollector_AddAzureRecord_Handler,
		},
		{
			MethodName: "AddGCPRecord",
			Handler:    _GRPCCollector_AddGCPRecord_Handler,
		},
		{
			MethodName: "AddRedisRecord",
			Handler:    _GRPCCollector_AddRedisRecord_Handler,
		},
		{
			MethodName: "AddRedisStreamsRecord",
			Handler:    _GRPCCollector_AddRedisStreamsRecord_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _GRPCCollector_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-collector.proto",
}
