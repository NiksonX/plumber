// Code generated by protoc-gen-go. DO NOT EDIT.
// source: amqp-collector.proto

package services

import (
	context "context"
	fmt "fmt"
	events "github.com/batchcorp/schemas/build/go/events"
	records "github.com/batchcorp/schemas/build/go/events/records"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddAMQPRecordRequest struct {
	Records              []*records.AMQPSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AddAMQPRecordRequest) Reset()         { *m = AddAMQPRecordRequest{} }
func (m *AddAMQPRecordRequest) String() string { return proto.CompactTextString(m) }
func (*AddAMQPRecordRequest) ProtoMessage()    {}
func (*AddAMQPRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4579d94f15056d, []int{0}
}

func (m *AddAMQPRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddAMQPRecordRequest.Unmarshal(m, b)
}
func (m *AddAMQPRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddAMQPRecordRequest.Marshal(b, m, deterministic)
}
func (m *AddAMQPRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAMQPRecordRequest.Merge(m, src)
}
func (m *AddAMQPRecordRequest) XXX_Size() int {
	return xxx_messageInfo_AddAMQPRecordRequest.Size(m)
}
func (m *AddAMQPRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAMQPRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddAMQPRecordRequest proto.InternalMessageInfo

func (m *AddAMQPRecordRequest) GetRecords() []*records.AMQPSinkRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type AddAMQPRecordResponse struct {
	NumRecordsProcessed  int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status               *events.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddAMQPRecordResponse) Reset()         { *m = AddAMQPRecordResponse{} }
func (m *AddAMQPRecordResponse) String() string { return proto.CompactTextString(m) }
func (*AddAMQPRecordResponse) ProtoMessage()    {}
func (*AddAMQPRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4579d94f15056d, []int{1}
}

func (m *AddAMQPRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddAMQPRecordResponse.Unmarshal(m, b)
}
func (m *AddAMQPRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddAMQPRecordResponse.Marshal(b, m, deterministic)
}
func (m *AddAMQPRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAMQPRecordResponse.Merge(m, src)
}
func (m *AddAMQPRecordResponse) XXX_Size() int {
	return xxx_messageInfo_AddAMQPRecordResponse.Size(m)
}
func (m *AddAMQPRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAMQPRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddAMQPRecordResponse proto.InternalMessageInfo

func (m *AddAMQPRecordResponse) GetNumRecordsProcessed() int64 {
	if m != nil {
		return m.NumRecordsProcessed
	}
	return 0
}

func (m *AddAMQPRecordResponse) GetStatus() *events.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*AddAMQPRecordRequest)(nil), "services.AddAMQPRecordRequest")
	proto.RegisterType((*AddAMQPRecordResponse)(nil), "services.AddAMQPRecordResponse")
}

func init() { proto.RegisterFile("amqp-collector.proto", fileDescriptor_5f4579d94f15056d) }

var fileDescriptor_5f4579d94f15056d = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x2a, 0x15, 0x70, 0x05, 0x83, 0xdb, 0x8a, 0x92, 0x01, 0xa2, 0x0e, 0x28, 0x0b,
	0x36, 0x84, 0x5f, 0x10, 0x98, 0x90, 0x40, 0x2a, 0xe9, 0x86, 0x84, 0xaa, 0xc4, 0x3e, 0x35, 0x11,
	0x49, 0x9c, 0xfa, 0xec, 0xfe, 0x7e, 0x94, 0xd8, 0x59, 0x10, 0x8c, 0xbe, 0xef, 0xdd, 0xf3, 0xbd,
	0x47, 0x16, 0x79, 0x73, 0xe8, 0xee, 0x85, 0xaa, 0x6b, 0x10, 0x46, 0x69, 0xd6, 0x69, 0x65, 0x14,
	0x3d, 0x43, 0xd0, 0xc7, 0x4a, 0x00, 0x86, 0x73, 0x38, 0x42, 0x6b, 0x90, 0xa3, 0xc9, 0x8d, 0x45,
	0x87, 0xc3, 0x6b, 0x3f, 0xd4, 0x20, 0x94, 0x96, 0xc8, 0x7b, 0x0f, 0x87, 0xd6, 0xaf, 0x64, 0x91,
	0x4a, 0x99, 0xbe, 0x7f, 0x6c, 0xb2, 0x01, 0x66, 0x70, 0xb0, 0x80, 0x86, 0x3e, 0x92, 0x53, 0xaf,
	0x5e, 0x05, 0xd1, 0x24, 0x9e, 0x25, 0x57, 0xcc, 0xbf, 0x59, 0x2f, 0xde, 0x56, 0xed, 0xb7, 0x5f,
	0x18, 0x75, 0x6b, 0x24, 0xcb, 0x5f, 0x56, 0xd8, 0xa9, 0x16, 0x81, 0x26, 0x64, 0xd9, 0xda, 0x66,
	0xe7, 0x75, 0xbb, 0x4e, 0x2b, 0x01, 0x88, 0x20, 0x57, 0x41, 0x14, 0xc4, 0x93, 0x6c, 0xde, 0xda,
	0xc6, 0x6d, 0xe0, 0x66, 0x44, 0xf4, 0x8e, 0x4c, 0x5d, 0x84, 0xd5, 0x49, 0x14, 0xc4, 0xb3, 0xe4,
	0x92, 0xb9, 0x0c, 0x6c, 0x3b, 0x4c, 0x33, 0x4f, 0x93, 0x2f, 0x72, 0xd1, 0xff, 0xf8, 0x32, 0x16,
	0x42, 0xdf, 0xc8, 0x79, 0x2a, 0xa5, 0xf3, 0xa3, 0x37, 0x6c, 0x2c, 0x86, 0xfd, 0x95, 0x32, 0xbc,
	0xfd, 0x97, 0xbb, 0xd3, 0x9f, 0x1f, 0x3e, 0xd9, 0xbe, 0x32, 0xa5, 0x2d, 0x98, 0x50, 0x0d, 0x2f,
	0x72, 0x23, 0x4a, 0xa1, 0x74, 0xc7, 0x51, 0x94, 0xd0, 0xe4, 0xc8, 0x0b, 0x5b, 0xd5, 0x92, 0xef,
	0x15, 0x1f, 0x7d, 0x8a, 0xe9, 0xd0, 0xeb, 0xd3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x79,
	0x2d, 0x2e, 0xa9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AMQPCollectorClient is the client API for AMQPCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AMQPCollectorClient interface {
	AddRecord(ctx context.Context, in *AddAMQPRecordRequest, opts ...grpc.CallOption) (*AddAMQPRecordResponse, error)
}

type aMQPCollectorClient struct {
	cc *grpc.ClientConn
}

func NewAMQPCollectorClient(cc *grpc.ClientConn) AMQPCollectorClient {
	return &aMQPCollectorClient{cc}
}

func (c *aMQPCollectorClient) AddRecord(ctx context.Context, in *AddAMQPRecordRequest, opts ...grpc.CallOption) (*AddAMQPRecordResponse, error) {
	out := new(AddAMQPRecordResponse)
	err := c.cc.Invoke(ctx, "/services.AMQPCollector/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AMQPCollectorServer is the server API for AMQPCollector service.
type AMQPCollectorServer interface {
	AddRecord(context.Context, *AddAMQPRecordRequest) (*AddAMQPRecordResponse, error)
}

// UnimplementedAMQPCollectorServer can be embedded to have forward compatible implementations.
type UnimplementedAMQPCollectorServer struct {
}

func (*UnimplementedAMQPCollectorServer) AddRecord(ctx context.Context, req *AddAMQPRecordRequest) (*AddAMQPRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}

func RegisterAMQPCollectorServer(s *grpc.Server, srv AMQPCollectorServer) {
	s.RegisterService(&_AMQPCollector_serviceDesc, srv)
}

func _AMQPCollector_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAMQPRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQPCollectorServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.AMQPCollector/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQPCollectorServer).AddRecord(ctx, req.(*AddAMQPRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AMQPCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.AMQPCollector",
	HandlerType: (*AMQPCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _AMQPCollector_AddRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "amqp-collector.proto",
}
