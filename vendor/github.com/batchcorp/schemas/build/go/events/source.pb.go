// Code generated by protoc-gen-go. DO NOT EDIT.
// source: source.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Source_Type int32

const (
	Source_UNSET   Source_Type = 0
	Source_PLUMBER Source_Type = 1
)

var Source_Type_name = map[int32]string{
	0: "UNSET",
	1: "PLUMBER",
}

var Source_Type_value = map[string]int32{
	"UNSET":   0,
	"PLUMBER": 1,
}

func (x Source_Type) String() string {
	return proto.EnumName(Source_Type_name, int32(x))
}

func (Source_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{0, 0}
}

type Source struct {
	// Type of source that this is. Only plumber for now
	Type Source_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Source_Type" json:"type,omitempty"`
	Id   string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Friendly name of the hosted plumber instance
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Team that the instance belongs to
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Collection ID that this source is relaying to
	CollectionId string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// Number of containers to launch. Some sources, such as CDC, might only support one plumber instance
	// while others can be as many as needed
	InstanceCount int32 `protobuf:"varint,6,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	// Flags and features may change in plumber, so we need to be sure we're always
	// launching the correct docker image version on RESUME_SOURCE
	PlumberVersion string `protobuf:"bytes,7,opt,name=plumber_version,json=plumberVersion,proto3" json:"plumber_version,omitempty"`
	// Map of ENVAR -> Value for plumber relay flags
	PlumberArgs          map[string]string `protobuf:"bytes,8,rep,name=plumber_args,json=plumberArgs,proto3" json:"plumber_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{0}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetType() Source_Type {
	if m != nil {
		return m.Type
	}
	return Source_UNSET
}

func (m *Source) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Source) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Source) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *Source) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *Source) GetInstanceCount() int32 {
	if m != nil {
		return m.InstanceCount
	}
	return 0
}

func (m *Source) GetPlumberVersion() string {
	if m != nil {
		return m.PlumberVersion
	}
	return ""
}

func (m *Source) GetPlumberArgs() map[string]string {
	if m != nil {
		return m.PlumberArgs
	}
	return nil
}

func init() {
	proto.RegisterEnum("events.Source_Type", Source_Type_name, Source_Type_value)
	proto.RegisterType((*Source)(nil), "events.Source")
	proto.RegisterMapType((map[string]string)(nil), "events.Source.PlumberArgsEntry")
}

func init() { proto.RegisterFile("source.proto", fileDescriptor_9229c9b6eb8e6b85) }

var fileDescriptor_9229c9b6eb8e6b85 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x8a, 0xdb, 0x30,
	0x14, 0x85, 0xeb, 0xdf, 0x34, 0x37, 0x89, 0x6b, 0xd4, 0x42, 0x4d, 0x17, 0xad, 0x49, 0x29, 0xf1,
	0xa2, 0xd8, 0x90, 0x6e, 0x4a, 0x17, 0x85, 0xa6, 0x64, 0x11, 0x68, 0x87, 0xe0, 0x24, 0xb3, 0x98,
	0x4d, 0xb0, 0x65, 0xe1, 0x88, 0xb1, 0x25, 0x23, 0xc9, 0x01, 0x3f, 0xc1, 0xbc, 0xf6, 0x60, 0x39,
	0x21, 0x90, 0xdd, 0xbd, 0xdf, 0xf9, 0x10, 0xd2, 0x11, 0x4c, 0x25, 0x6f, 0x05, 0x26, 0x71, 0x23,
	0xb8, 0xe2, 0xc8, 0x25, 0x67, 0xc2, 0x94, 0x9c, 0xbf, 0x58, 0xe0, 0xee, 0x74, 0x80, 0x16, 0x60,
	0xab, 0xae, 0x21, 0x81, 0x11, 0x1a, 0x91, 0xb7, 0x7c, 0x1f, 0x0f, 0x46, 0x3c, 0xa4, 0xf1, 0xbe,
	0x6b, 0x48, 0xaa, 0x05, 0xe4, 0x81, 0x49, 0x8b, 0xc0, 0x0c, 0x8d, 0x68, 0x9c, 0x9a, 0xb4, 0x40,
	0x08, 0x6c, 0x96, 0xd5, 0x24, 0xb0, 0x34, 0xd1, 0x33, 0xfa, 0x08, 0x23, 0x45, 0xb2, 0xfa, 0x48,
	0x8b, 0xc0, 0xd6, 0xd8, 0xed, 0xd7, 0x4d, 0x81, 0xbe, 0xc2, 0x0c, 0xf3, 0xaa, 0x22, 0x58, 0x51,
	0xce, 0xfa, 0xd8, 0xd1, 0xf1, 0xf4, 0x06, 0x37, 0x05, 0xfa, 0x06, 0x1e, 0x65, 0x52, 0x65, 0x0c,
	0x93, 0x23, 0xe6, 0x2d, 0x53, 0x81, 0x1b, 0x1a, 0x91, 0x93, 0xce, 0xae, 0xf4, 0x6f, 0x0f, 0xd1,
	0x02, 0xde, 0x35, 0x55, 0x5b, 0xe7, 0x44, 0x1c, 0xcf, 0x44, 0x48, 0xca, 0x59, 0x30, 0xd2, 0xa7,
	0x79, 0x17, 0xfc, 0x38, 0x50, 0xb4, 0x82, 0xe9, 0x55, 0xcc, 0x44, 0x29, 0x83, 0xb7, 0xa1, 0x15,
	0x4d, 0x96, 0x5f, 0xee, 0x9e, 0xb8, 0x1d, 0x94, 0x3f, 0xa2, 0x94, 0x6b, 0xa6, 0x44, 0x97, 0x4e,
	0x9a, 0x1b, 0xf9, 0xf4, 0x1b, 0xfc, 0x7b, 0x01, 0xf9, 0x60, 0x3d, 0x93, 0x4e, 0x37, 0x36, 0x4e,
	0xfb, 0x11, 0x7d, 0x00, 0xe7, 0x9c, 0x55, 0x2d, 0xb9, 0xd4, 0x33, 0x2c, 0xbf, 0xcc, 0x9f, 0xc6,
	0xfc, 0x33, 0xd8, 0x7d, 0x87, 0x68, 0x0c, 0xce, 0xe1, 0x61, 0xb7, 0xde, 0xfb, 0x6f, 0xd0, 0x04,
	0x46, 0xdb, 0x7f, 0x87, 0xff, 0xab, 0x75, 0xea, 0x1b, 0xab, 0xf8, 0xe9, 0x7b, 0x49, 0xd5, 0xa9,
	0xcd, 0x63, 0xcc, 0xeb, 0x24, 0xcf, 0x14, 0x3e, 0x61, 0x2e, 0x9a, 0x44, 0xe2, 0x13, 0xa9, 0x33,
	0x99, 0xe4, 0x2d, 0xad, 0x8a, 0xa4, 0xe4, 0xc9, 0x70, 0xe9, 0xdc, 0xd5, 0x1f, 0xf9, 0xe3, 0x35,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x23, 0x4c, 0x9b, 0xd8, 0x01, 0x00, 0x00,
}
