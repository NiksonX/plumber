// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message_Type int32

const (
	// Emitted by UI-BFF
	// Consumed by all collectors in order to pre-load collection configuration
	Message_CREATE_COLLECTION Message_Type = 0
	// Emitted by UI-BFF
	// Consumed by writer in order to pre-generate and cache a protobuf
	// message descriptor (to facilitate fast writes from HSB -> E*)
	Message_CREATE_SCHEMA Message_Type = 1
	// Emitted by UI-BFF
	// Consumed by collectors - causes cached config to be released
	Message_DELETE_COLLECTION Message_Type = 2
	// Emitted by UI-BFF
	// Consumed by readers to start reading data from ES
	// Consumed by replayer to know which topic to start reading from
	Message_CREATE_REPLAY Message_Type = 3
	// Emitted by UI-BFF
	// Consumed by readers and replayers
	Message_DELETE_REPLAY Message_Type = 4
	// Emitted by UI-BFF
	// ??? How is this used?
	Message_UPDATE_REPLAY Message_Type = 5
	// Emitted by UI-BFF to temporarily stop an active replay
	// Consumed by readers and replayers
	Message_PAUSE_REPLAY Message_Type = 6
	// Emitted by UI-BFF to resume a paused replay
	Message_RESUME_REPLAY Message_Type = 7
	// Emitted by a replayer
	// Consumed by other replayers.
	//
	// Indicates that a replayer has come across an outbound message with
	// "last" bool set to true and that all other replayers should stop
	// replaying data for the specified replay_id.
	Message_FINISH_REPLAY Message_Type = 8
)

var Message_Type_name = map[int32]string{
	0: "CREATE_COLLECTION",
	1: "CREATE_SCHEMA",
	2: "DELETE_COLLECTION",
	3: "CREATE_REPLAY",
	4: "DELETE_REPLAY",
	5: "UPDATE_REPLAY",
	6: "PAUSE_REPLAY",
	7: "RESUME_REPLAY",
	8: "FINISH_REPLAY",
}

var Message_Type_value = map[string]int32{
	"CREATE_COLLECTION": 0,
	"CREATE_SCHEMA":     1,
	"DELETE_COLLECTION": 2,
	"CREATE_REPLAY":     3,
	"DELETE_REPLAY":     4,
	"UPDATE_REPLAY":     5,
	"PAUSE_REPLAY":      6,
	"RESUME_REPLAY":     7,
	"FINISH_REPLAY":     8,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}

func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 0}
}

type Message struct {
	// What kind of a message is this?
	Type Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Message_Type" json:"type,omitempty"`
	// Who does this message pertain to?
	Team *Team `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	// Contains event debug info
	Info *Info `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Message_Collect
	//	*Message_Replay
	//	*Message_Schema
	Event                isMessage_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_CREATE_COLLECTION
}

func (m *Message) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Message) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type isMessage_Event interface {
	isMessage_Event()
}

type Message_Collect struct {
	Collect *Collect `protobuf:"bytes,100,opt,name=collect,proto3,oneof"`
}

type Message_Replay struct {
	Replay *Replay `protobuf:"bytes,101,opt,name=replay,proto3,oneof"`
}

type Message_Schema struct {
	Schema *Schema `protobuf:"bytes,102,opt,name=schema,proto3,oneof"`
}

func (*Message_Collect) isMessage_Event() {}

func (*Message_Replay) isMessage_Event() {}

func (*Message_Schema) isMessage_Event() {}

func (m *Message) GetEvent() isMessage_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Message) GetCollect() *Collect {
	if x, ok := m.GetEvent().(*Message_Collect); ok {
		return x.Collect
	}
	return nil
}

func (m *Message) GetReplay() *Replay {
	if x, ok := m.GetEvent().(*Message_Replay); ok {
		return x.Replay
	}
	return nil
}

func (m *Message) GetSchema() *Schema {
	if x, ok := m.GetEvent().(*Message_Schema); ok {
		return x.Schema
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Collect)(nil),
		(*Message_Replay)(nil),
		(*Message_Schema)(nil),
	}
}

func init() {
	proto.RegisterEnum("events.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterType((*Message)(nil), "events.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcd, 0x8e, 0xaa, 0x30,
	0x18, 0x86, 0x45, 0x11, 0x4e, 0x7a, 0xd4, 0x83, 0xcd, 0x99, 0x84, 0xb8, 0x32, 0xae, 0x48, 0x66,
	0x02, 0x89, 0x73, 0x05, 0x88, 0x9d, 0x40, 0x82, 0x3f, 0x29, 0xb8, 0x98, 0xd9, 0x4c, 0x00, 0xeb,
	0x4f, 0x02, 0x96, 0x08, 0x4e, 0xe2, 0x9d, 0xcd, 0x62, 0x2e, 0x6e, 0xd2, 0x96, 0x1a, 0xdd, 0xc1,
	0xf3, 0x3e, 0xf9, 0xbe, 0xbe, 0x2d, 0xe8, 0x17, 0xa4, 0xaa, 0x92, 0x3d, 0xb1, 0xcb, 0x33, 0xad,
	0x29, 0xd4, 0xc8, 0x17, 0x39, 0xd5, 0xd5, 0xa8, 0x9f, 0xd1, 0x3c, 0x27, 0x59, 0x2d, 0xf0, 0xa8,
	0x77, 0x26, 0x65, 0x9e, 0x5c, 0x9b, 0x3f, 0x70, 0x3c, 0xed, 0xa8, 0x4c, 0xaa, 0xec, 0x40, 0x8a,
	0x44, 0x26, 0x35, 0x49, 0x0a, 0xf1, 0x3d, 0xf9, 0xe9, 0x00, 0x7d, 0x21, 0x86, 0x43, 0x0b, 0xa8,
	0xf5, 0xb5, 0x24, 0xa6, 0x32, 0x56, 0xac, 0xc1, 0xf4, 0xbf, 0x2d, 0xb6, 0xd8, 0x4d, 0x6c, 0xc7,
	0xd7, 0x92, 0x60, 0x6e, 0xc0, 0x31, 0x50, 0xd9, 0x0c, 0xb3, 0x3d, 0x56, 0xac, 0xbf, 0xd3, 0x9e,
	0x34, 0x63, 0x92, 0x14, 0x98, 0x27, 0xcc, 0x60, 0xfb, 0xcd, 0xce, 0xa3, 0x11, 0x9c, 0x76, 0x14,
	0xf3, 0x04, 0x3e, 0x03, 0xbd, 0x39, 0xbe, 0xb9, 0xe5, 0xd2, 0x3f, 0x29, 0x79, 0x02, 0xfb, 0x2d,
	0x2c, 0x0d, 0x68, 0x01, 0x4d, 0x94, 0x33, 0x09, 0x77, 0x07, 0xd2, 0xc5, 0x9c, 0xfa, 0x2d, 0xdc,
	0xe4, 0xcc, 0x14, 0x65, 0xcd, 0xdd, 0xa3, 0x19, 0x71, 0xca, 0x4c, 0x91, 0x4f, 0xbe, 0x15, 0xa0,
	0xb2, 0x4e, 0xf0, 0x09, 0x0c, 0x3d, 0x8c, 0xdc, 0x18, 0x7d, 0x7a, 0xab, 0x30, 0x44, 0x5e, 0x1c,
	0xac, 0x96, 0x46, 0x0b, 0x0e, 0x41, 0xbf, 0xc1, 0x91, 0xe7, 0xa3, 0x85, 0x6b, 0x28, 0xcc, 0x9c,
	0xa3, 0x10, 0x3d, 0x9a, 0xed, 0x3b, 0x13, 0xa3, 0x75, 0xe8, 0xbe, 0x1b, 0x1d, 0x86, 0x1a, 0xb3,
	0x41, 0x2a, 0x43, 0x9b, 0xf5, 0xfc, 0xce, 0xea, 0x42, 0x03, 0xf4, 0xd6, 0xee, 0x26, 0xba, 0x11,
	0x8d, 0x49, 0x18, 0x45, 0x9b, 0xc5, 0x0d, 0xe9, 0x0c, 0xbd, 0x05, 0xcb, 0x20, 0xf2, 0x25, 0xfa,
	0x33, 0xd3, 0x41, 0x97, 0xb7, 0x9a, 0xd9, 0x1f, 0x2f, 0xfb, 0x63, 0x7d, 0xb8, 0xa4, 0x76, 0x46,
	0x0b, 0x27, 0x4d, 0xea, 0xec, 0x90, 0xd1, 0x73, 0xe9, 0x88, 0x8a, 0x95, 0x93, 0x5e, 0x8e, 0xf9,
	0xd6, 0xd9, 0x53, 0x47, 0x5c, 0x42, 0xaa, 0xf1, 0x57, 0x7f, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xa5, 0x4f, 0xeb, 0x2b, 0x51, 0x02, 0x00, 0x00,
}
