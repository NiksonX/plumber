// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message_Type int32

const (
	// Emitted by UI-BFF
	// Consumed by all collectors in order to pre-load collection configuration
	Message_CREATE_COLLECTION Message_Type = 0
	// Emitted by UI-BFF specifically for protobuf schemas.
	// Consumed by athena-writer which generates a parquet schema (and
	// emits STATUS_ELECT_SCHEMA)
	Message_CREATE_SCHEMA Message_Type = 1
	// Emitted by UI-BFF
	// Consumed by collectors - causes cached config to be released
	Message_DELETE_COLLECTION Message_Type = 2
	// Emitted by UI-BFF
	// Consumed by readers to start reading data from ES
	// Consumed by replayer to know which topic to start reading from
	Message_CREATE_REPLAY Message_Type = 3
	// Emitted by UI-BFF
	// Consumed by readers and replayers
	Message_DELETE_REPLAY Message_Type = 4
	// Emitted by UI-BFF
	// ??? How is this used?
	Message_UPDATE_REPLAY Message_Type = 5
	// Emitted by UI-BFF to temporarily stop an active replay
	// Consumed by readers and replayers
	Message_PAUSE_REPLAY Message_Type = 6
	// Emitted by UI-BFF to resume a paused replay
	Message_RESUME_REPLAY Message_Type = 7
	// Emitted by a replayer
	// Consumed by other replayers.
	//
	// Indicates that a replayer has come across an outbound message with
	// "last" bool set to true and that all other replayers should stop
	// replaying data for the specified replay_id.
	Message_FINISH_REPLAY Message_Type = 8
	// Emitted by reader (as of 10.25.2020)
	// Consumed by replayer
	//
	// Indicates that the active replay must be cancelled; reason for abort
	// may be listed in info.notes)
	Message_ABORT_REPLAY Message_Type = 9
	// Emitted by schema-manager (as of 11.04.2020)
	// Consumed by collectors
	//
	// Indicates that a schema has been updated and contains fingerprint,
	// parquet and/or sql schema. This is in turn used by collectors to
	// update their internal caches in order to facilitate (fast)
	// identification of inbound events.
	//
	// UPDATE 05.05.2020
	// Schema-inference v2 does not use this message type.
	Message_UPDATE_SCHEMA Message_Type = 10 // Deprecated: Do not use.
	// Emitted by any service (as of 11.17.2020)
	// Consumed by task service
	//
	// Indicates that an async task was created.
	Message_CREATE_TASK Message_Type = 11
	// Emitted by any service (as of 11.17.2020)
	// Consumed by task service
	//
	// Indicates that an async task has been updated.
	Message_UPDATE_TASK Message_Type = 12
	// Emitted by UI-BFF service (as of 12.04.2020)
	// Consumed by writer (as of 06.17.2021)
	Message_UPDATE_COLLECTION Message_Type = 13
	// Emitted by UI-BFF, consumed by health service
	Message_CREATE_DESTINATION Message_Type = 14
	// Emitted by UI-BFF, consumed by health service
	Message_UPDATE_DESTINATION Message_Type = 15
	// Emitted by UI-BFF, consumed by health service
	Message_DELETE_DESTINATION Message_Type = 16
	// Emitted by UI-BFF, consumed by billing
	Message_CREATE_ACCOUNT Message_Type = 17
	// Emitted by UI-BFF, consumed by billing
	Message_UPDATE_ACCOUNT Message_Type = 18
	// Emitted by UI-BFF, consumed by billing
	Message_DELETE_ACCOUNT Message_Type = 19
	// Emitted by billing (for informational purposes)
	Message_STATUS_SUBSCRIPTION Message_Type = 20
	// Emitted by billing, consumed by other billing instances for
	// facilitate cache updates
	Message_STATUS_STRIPE_WEBHOOK Message_Type = 21
	// Emitted by billing when subscription is unpaid or cancelled
	// Will include "Subscription" event
	Message_LOCK_ACCOUNT Message_Type = 22
	// Emitted by billing when an unpaid subscription becomes active
	// Will include "Subscription" event
	Message_UNLOCK_ACCOUNT Message_Type = 23
	// Emitted by collectors when an event comes in that needs either a new or updated schema
	// Consumed only by schema-manager
	//
	// UPDATE 05.05.2020
	// Schema-inference v2 does not use this message type.
	Message_GENERATE_SCHEMA Message_Type = 24 // Deprecated: Do not use.
	// Emitted by UI-BFF (as of 03.17.2021)
	// Consumed by schema-manager
	Message_UPDATE_PROTOS Message_Type = 25
	// Emitted by athena-writer instances
	// Consumed by schema-manager
	Message_ELECT_SCHEMA Message_Type = 26
	// Emitted by schema-manager
	// Consumed by athena-writer instances and schema-manager itself
	Message_STATUS_ELECT_SCHEMA Message_Type = 27
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_CREATE_SOURCE Message_Type = 28
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_UPDATE_SOURCE Message_Type = 29
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_DELETE_SOURCE Message_Type = 30
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_PAUSE_SOURCE Message_Type = 31
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_RESUME_SOURCE Message_Type = 32
	// Emitted by ui-bff
	// Consumed by dproxy
	Message_CREATE_API_TOKEN Message_Type = 33
	// Emitted by ui-bff
	// Consumed by dproxy
	Message_DELETE_API_TOKEN Message_Type = 34
	// Emitted by dproxy
	// Consumed by dproxy and ui-bff
	Message_CREATE_DYNAMIC_DESTINATION Message_Type = 35
	// Emitted by dproxy
	// Consumed by dproxy and ui-bff
	Message_DELETE_DYNAMIC_DESTINATION Message_Type = 36
	// Emitted by ui-bff
	// Consumed by collectors
	Message_PAUSE_COLLECTION Message_Type = 37
	// Emitted by ui-bff
	// Emitted by writer after successful plan change (as of 06.17.2021)
	// Consumed by grpc-collector, http-collector, and writer
	Message_RESUME_COLLECTION Message_Type = 38
	// Emitted by grpc-collector and http-collector (as of 09.07.2021)
	// Consumed by writer and athena-writer
	Message_STATUS_COLLECT Message_Type = 39
)

var Message_Type_name = map[int32]string{
	0:  "CREATE_COLLECTION",
	1:  "CREATE_SCHEMA",
	2:  "DELETE_COLLECTION",
	3:  "CREATE_REPLAY",
	4:  "DELETE_REPLAY",
	5:  "UPDATE_REPLAY",
	6:  "PAUSE_REPLAY",
	7:  "RESUME_REPLAY",
	8:  "FINISH_REPLAY",
	9:  "ABORT_REPLAY",
	10: "UPDATE_SCHEMA",
	11: "CREATE_TASK",
	12: "UPDATE_TASK",
	13: "UPDATE_COLLECTION",
	14: "CREATE_DESTINATION",
	15: "UPDATE_DESTINATION",
	16: "DELETE_DESTINATION",
	17: "CREATE_ACCOUNT",
	18: "UPDATE_ACCOUNT",
	19: "DELETE_ACCOUNT",
	20: "STATUS_SUBSCRIPTION",
	21: "STATUS_STRIPE_WEBHOOK",
	22: "LOCK_ACCOUNT",
	23: "UNLOCK_ACCOUNT",
	24: "GENERATE_SCHEMA",
	25: "UPDATE_PROTOS",
	26: "ELECT_SCHEMA",
	27: "STATUS_ELECT_SCHEMA",
	28: "CREATE_SOURCE",
	29: "UPDATE_SOURCE",
	30: "DELETE_SOURCE",
	31: "PAUSE_SOURCE",
	32: "RESUME_SOURCE",
	33: "CREATE_API_TOKEN",
	34: "DELETE_API_TOKEN",
	35: "CREATE_DYNAMIC_DESTINATION",
	36: "DELETE_DYNAMIC_DESTINATION",
	37: "PAUSE_COLLECTION",
	38: "RESUME_COLLECTION",
	39: "STATUS_COLLECT",
}

var Message_Type_value = map[string]int32{
	"CREATE_COLLECTION":          0,
	"CREATE_SCHEMA":              1,
	"DELETE_COLLECTION":          2,
	"CREATE_REPLAY":              3,
	"DELETE_REPLAY":              4,
	"UPDATE_REPLAY":              5,
	"PAUSE_REPLAY":               6,
	"RESUME_REPLAY":              7,
	"FINISH_REPLAY":              8,
	"ABORT_REPLAY":               9,
	"UPDATE_SCHEMA":              10,
	"CREATE_TASK":                11,
	"UPDATE_TASK":                12,
	"UPDATE_COLLECTION":          13,
	"CREATE_DESTINATION":         14,
	"UPDATE_DESTINATION":         15,
	"DELETE_DESTINATION":         16,
	"CREATE_ACCOUNT":             17,
	"UPDATE_ACCOUNT":             18,
	"DELETE_ACCOUNT":             19,
	"STATUS_SUBSCRIPTION":        20,
	"STATUS_STRIPE_WEBHOOK":      21,
	"LOCK_ACCOUNT":               22,
	"UNLOCK_ACCOUNT":             23,
	"GENERATE_SCHEMA":            24,
	"UPDATE_PROTOS":              25,
	"ELECT_SCHEMA":               26,
	"STATUS_ELECT_SCHEMA":        27,
	"CREATE_SOURCE":              28,
	"UPDATE_SOURCE":              29,
	"DELETE_SOURCE":              30,
	"PAUSE_SOURCE":               31,
	"RESUME_SOURCE":              32,
	"CREATE_API_TOKEN":           33,
	"DELETE_API_TOKEN":           34,
	"CREATE_DYNAMIC_DESTINATION": 35,
	"DELETE_DYNAMIC_DESTINATION": 36,
	"PAUSE_COLLECTION":           37,
	"RESUME_COLLECTION":          38,
	"STATUS_COLLECT":             39,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}

func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 0}
}

type Message struct {
	// What kind of a message is this?
	Type Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Message_Type" json:"type,omitempty"`
	// Who does this message pertain to?
	Team *Team `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	// Contains event debug info
	Info *Info `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Message_Collect
	//	*Message_Replay
	//	*Message_Schema
	//	*Message_Task
	//	*Message_Destination
	//	*Message_Account
	//	*Message_Subscription
	//	*Message_StripeWebhook
	//	*Message_Source
	//	*Message_ApiToken
	Event                isMessage_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_CREATE_COLLECTION
}

func (m *Message) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Message) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type isMessage_Event interface {
	isMessage_Event()
}

type Message_Collect struct {
	Collect *Collect `protobuf:"bytes,100,opt,name=collect,proto3,oneof"`
}

type Message_Replay struct {
	Replay *Replay `protobuf:"bytes,101,opt,name=replay,proto3,oneof"`
}

type Message_Schema struct {
	Schema *Schema `protobuf:"bytes,102,opt,name=schema,proto3,oneof"`
}

type Message_Task struct {
	Task *Task `protobuf:"bytes,103,opt,name=task,proto3,oneof"`
}

type Message_Destination struct {
	Destination *Destination `protobuf:"bytes,104,opt,name=destination,proto3,oneof"`
}

type Message_Account struct {
	Account *Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type Message_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,106,opt,name=subscription,proto3,oneof"`
}

type Message_StripeWebhook struct {
	StripeWebhook *StripeWebhook `protobuf:"bytes,107,opt,name=stripe_webhook,json=stripeWebhook,proto3,oneof"`
}

type Message_Source struct {
	Source *Source `protobuf:"bytes,108,opt,name=source,proto3,oneof"`
}

type Message_ApiToken struct {
	ApiToken *APIToken `protobuf:"bytes,109,opt,name=api_token,json=apiToken,proto3,oneof"`
}

func (*Message_Collect) isMessage_Event() {}

func (*Message_Replay) isMessage_Event() {}

func (*Message_Schema) isMessage_Event() {}

func (*Message_Task) isMessage_Event() {}

func (*Message_Destination) isMessage_Event() {}

func (*Message_Account) isMessage_Event() {}

func (*Message_Subscription) isMessage_Event() {}

func (*Message_StripeWebhook) isMessage_Event() {}

func (*Message_Source) isMessage_Event() {}

func (*Message_ApiToken) isMessage_Event() {}

func (m *Message) GetEvent() isMessage_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Message) GetCollect() *Collect {
	if x, ok := m.GetEvent().(*Message_Collect); ok {
		return x.Collect
	}
	return nil
}

func (m *Message) GetReplay() *Replay {
	if x, ok := m.GetEvent().(*Message_Replay); ok {
		return x.Replay
	}
	return nil
}

func (m *Message) GetSchema() *Schema {
	if x, ok := m.GetEvent().(*Message_Schema); ok {
		return x.Schema
	}
	return nil
}

func (m *Message) GetTask() *Task {
	if x, ok := m.GetEvent().(*Message_Task); ok {
		return x.Task
	}
	return nil
}

func (m *Message) GetDestination() *Destination {
	if x, ok := m.GetEvent().(*Message_Destination); ok {
		return x.Destination
	}
	return nil
}

func (m *Message) GetAccount() *Account {
	if x, ok := m.GetEvent().(*Message_Account); ok {
		return x.Account
	}
	return nil
}

func (m *Message) GetSubscription() *Subscription {
	if x, ok := m.GetEvent().(*Message_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (m *Message) GetStripeWebhook() *StripeWebhook {
	if x, ok := m.GetEvent().(*Message_StripeWebhook); ok {
		return x.StripeWebhook
	}
	return nil
}

func (m *Message) GetSource() *Source {
	if x, ok := m.GetEvent().(*Message_Source); ok {
		return x.Source
	}
	return nil
}

func (m *Message) GetApiToken() *APIToken {
	if x, ok := m.GetEvent().(*Message_ApiToken); ok {
		return x.ApiToken
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Collect)(nil),
		(*Message_Replay)(nil),
		(*Message_Schema)(nil),
		(*Message_Task)(nil),
		(*Message_Destination)(nil),
		(*Message_Account)(nil),
		(*Message_Subscription)(nil),
		(*Message_StripeWebhook)(nil),
		(*Message_Source)(nil),
		(*Message_ApiToken)(nil),
	}
}

func init() {
	proto.RegisterEnum("events.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterType((*Message)(nil), "events.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x5d, 0x8f, 0xe2, 0x36,
	0x14, 0x86, 0xc3, 0x2c, 0x0b, 0xb3, 0xe6, 0x2b, 0x78, 0x86, 0x9d, 0x2c, 0x6d, 0xb7, 0x94, 0x7e,
	0x21, 0xb5, 0x02, 0x69, 0x7b, 0x51, 0xa9, 0x17, 0x95, 0x42, 0x70, 0x9b, 0x08, 0x48, 0x22, 0x27,
	0x68, 0x34, 0xbd, 0x41, 0x21, 0xe3, 0x81, 0x94, 0x8f, 0x44, 0x24, 0xb4, 0x9a, 0x5f, 0xd7, 0xff,
	0xd1, 0x5f, 0x53, 0xd9, 0xb1, 0x33, 0xce, 0xa8, 0x77, 0xe6, 0x79, 0x5f, 0x1f, 0x7c, 0xde, 0x73,
	0x00, 0xb4, 0x8e, 0x24, 0x4d, 0x83, 0x2d, 0x19, 0x27, 0xe7, 0x38, 0x8b, 0x61, 0x8d, 0xfc, 0x45,
	0x4e, 0x59, 0xda, 0x6f, 0x05, 0x61, 0x18, 0x5f, 0x4e, 0x59, 0x8e, 0xfb, 0xad, 0x30, 0x3e, 0x1c,
	0x48, 0x28, 0x3e, 0x36, 0xcf, 0x24, 0x39, 0x04, 0xcf, 0xfc, 0x13, 0x88, 0x4e, 0x4f, 0xb1, 0x50,
	0xd2, 0x70, 0x47, 0x8e, 0x81, 0x50, 0x32, 0x12, 0x1c, 0x8b, 0x73, 0x90, 0xee, 0xf9, 0xb9, 0xfb,
	0x48, 0xd2, 0x2c, 0x3a, 0x05, 0x59, 0x14, 0x9f, 0x38, 0x82, 0xe9, 0x65, 0x93, 0x86, 0xe7, 0x28,
	0x91, 0x58, 0xeb, 0x6f, 0xb2, 0xd9, 0xc5, 0xf1, 0xbe, 0xa8, 0x1d, 0x5f, 0xce, 0x21, 0x7f, 0x69,
	0xbf, 0x1d, 0x24, 0x51, 0x16, 0xef, 0x09, 0x37, 0x0f, 0xff, 0x69, 0x80, 0xfa, 0x32, 0xef, 0x05,
	0x8e, 0x40, 0x35, 0x7b, 0x4e, 0x88, 0x56, 0x19, 0x54, 0x46, 0xed, 0x4f, 0xb7, 0xe3, 0xbc, 0xa9,
	0x31, 0x97, 0xc7, 0xfe, 0x73, 0x42, 0x30, 0x73, 0xc0, 0x01, 0xa8, 0xd2, 0x37, 0x6a, 0x57, 0x83,
	0xca, 0xa8, 0xf1, 0xa9, 0x29, 0x9c, 0x3e, 0x09, 0x8e, 0x98, 0x29, 0xd4, 0x41, 0xfb, 0xd3, 0xde,
	0x94, 0x1d, 0xd6, 0xe9, 0x29, 0xc6, 0x4c, 0x81, 0x3f, 0x80, 0x3a, 0x8f, 0x47, 0x7b, 0x64, 0xa6,
	0x8e, 0x30, 0x19, 0x39, 0x36, 0x15, 0x2c, 0x1c, 0x70, 0x04, 0x6a, 0x79, 0x78, 0x1a, 0x61, 0xde,
	0xb6, 0xf0, 0x62, 0x46, 0x4d, 0x05, 0x73, 0x9d, 0x3a, 0xf3, 0x30, 0xb5, 0xa7, 0xb2, 0xd3, 0x63,
	0x94, 0x3a, 0x73, 0x1d, 0x0e, 0x41, 0x95, 0x86, 0xab, 0x6d, 0x5f, 0x35, 0x11, 0xa4, 0x7b, 0x53,
	0xc1, 0x4c, 0x83, 0x3f, 0x83, 0x86, 0x14, 0xba, 0xb6, 0x63, 0xd6, 0x1b, 0x61, 0x9d, 0xbd, 0x48,
	0xa6, 0x82, 0x65, 0x27, 0xed, 0x8e, 0xef, 0x82, 0x16, 0x95, 0xbb, 0xd3, 0x73, 0x4c, 0xbb, 0xe3,
	0x0e, 0xf8, 0x0b, 0x68, 0xca, 0x73, 0xd4, 0xfe, 0x64, 0x37, 0x8a, 0x01, 0x78, 0x92, 0x66, 0x2a,
	0xb8, 0xe4, 0x85, 0xbf, 0x82, 0x76, 0x9a, 0x9d, 0xa3, 0x84, 0xac, 0xf9, 0xd8, 0xb5, 0x3d, 0xbb,
	0xdd, 0x2b, 0x6e, 0x33, 0xf5, 0x3e, 0x17, 0x4d, 0x05, 0xb7, 0x52, 0x19, 0xb0, 0xbc, 0xd8, 0x82,
	0x68, 0x87, 0x57, 0x79, 0x31, 0xca, 0xf2, 0x62, 0x27, 0x38, 0x01, 0xef, 0x82, 0x24, 0x5a, 0xb3,
	0xed, 0xd1, 0x8e, 0xcc, 0xac, 0x16, 0x4d, 0xb9, 0x96, 0x4f, 0xb9, 0xa9, 0xe0, 0xeb, 0x20, 0x89,
	0xd8, 0x79, 0xf8, 0x6f, 0x0d, 0x54, 0xe9, 0xd2, 0xc0, 0x1e, 0xe8, 0x1a, 0x18, 0xe9, 0x3e, 0x5a,
	0x1b, 0xce, 0x62, 0x81, 0x0c, 0xdf, 0x72, 0x6c, 0x55, 0x81, 0x5d, 0xd0, 0xe2, 0xd8, 0x33, 0x4c,
	0xb4, 0xd4, 0xd5, 0x0a, 0x75, 0xce, 0xd0, 0x02, 0x95, 0x9d, 0x57, 0x92, 0x13, 0x23, 0x77, 0xa1,
	0x3f, 0xa8, 0x6f, 0x28, 0xe2, 0x4e, 0x8e, 0xaa, 0x14, 0xad, 0xdc, 0x99, 0xe4, 0x7a, 0x0b, 0x55,
	0xd0, 0x74, 0xf5, 0x95, 0x57, 0x90, 0x1a, 0x35, 0x61, 0xe4, 0xad, 0x96, 0x05, 0xaa, 0x53, 0xf4,
	0x9b, 0x65, 0x5b, 0x9e, 0x29, 0xd0, 0x35, 0xbd, 0xa7, 0x4f, 0x1d, 0xec, 0x0b, 0xf2, 0x0e, 0xf6,
	0x8a, 0xe2, 0xfc, 0xb1, 0xa0, 0x7f, 0x75, 0x5d, 0x81, 0x1d, 0xd0, 0xe0, 0x2f, 0xf3, 0x75, 0x6f,
	0xae, 0x36, 0x28, 0xe0, 0x3e, 0x06, 0x9a, 0xb4, 0x25, 0x0e, 0xa4, 0x96, 0x5a, 0xf0, 0x3d, 0x80,
	0xfc, 0xe2, 0x0c, 0x79, 0xbe, 0x65, 0xeb, 0x8c, 0xb7, 0x29, 0xe7, 0x76, 0x99, 0x77, 0x28, 0xe7,
	0xfd, 0xca, 0x5c, 0x85, 0x10, 0xb4, 0x79, 0x1d, 0xdd, 0x30, 0x9c, 0x95, 0xed, 0xab, 0x5d, 0xca,
	0x78, 0x0d, 0xc1, 0x20, 0x65, 0xfc, 0xbe, 0x60, 0x37, 0xf0, 0x0e, 0xdc, 0x78, 0xbe, 0xee, 0xaf,
	0xbc, 0xb5, 0xb7, 0x9a, 0x7a, 0x06, 0xb6, 0x5c, 0x56, 0xf4, 0x16, 0x7e, 0x00, 0x3d, 0x21, 0xf8,
	0xd8, 0x72, 0xd1, 0xfa, 0x1e, 0x4d, 0x4d, 0xc7, 0x99, 0xab, 0x3d, 0x9a, 0xcc, 0xc2, 0x31, 0xe6,
	0x45, 0x95, 0xf7, 0xec, 0xdb, 0xec, 0x12, 0xbb, 0x83, 0x77, 0xa0, 0xf3, 0x3b, 0xb2, 0x11, 0x96,
	0xf2, 0xd2, 0x58, 0x5e, 0x2f, 0x33, 0x72, 0xb1, 0xe3, 0x3b, 0x9e, 0xfa, 0x81, 0x56, 0x44, 0x34,
	0x17, 0x61, 0xec, 0x4b, 0xef, 0x2a, 0x09, 0x9f, 0xc9, 0x1b, 0xe3, 0xac, 0xb0, 0x81, 0xd4, 0xcf,
	0xa5, 0x82, 0x1c, 0x7d, 0x21, 0xad, 0x06, 0x47, 0x1f, 0x5f, 0xf6, 0x80, 0x93, 0x2f, 0xa5, 0x3d,
	0xe0, 0x68, 0x00, 0x6f, 0x81, 0x2a, 0xa2, 0x74, 0xad, 0xb5, 0xef, 0xcc, 0x91, 0xad, 0x7e, 0x45,
	0xa9, 0x08, 0xae, 0xa0, 0x43, 0xf8, 0x11, 0xf4, 0xc5, 0xf8, 0x1e, 0x6c, 0x7d, 0x69, 0x19, 0xa5,
	0xb1, 0x7c, 0x4d, 0x75, 0x31, 0xae, 0xff, 0xd1, 0xbf, 0xa1, 0x55, 0xf3, 0x07, 0x49, 0x4b, 0xf1,
	0x2d, 0xdd, 0x15, 0xfe, 0x28, 0x09, 0x7f, 0x47, 0x13, 0xe6, 0x79, 0x70, 0xac, 0x7e, 0x3f, 0xad,
	0x83, 0xb7, 0xec, 0xb7, 0x37, 0x1d, 0xff, 0xf1, 0xe3, 0x36, 0xca, 0x76, 0x97, 0xcd, 0x38, 0x8c,
	0x8f, 0x93, 0x4d, 0x90, 0x85, 0xbb, 0x30, 0x3e, 0x27, 0x93, 0xfc, 0x5f, 0x2e, 0x9d, 0x6c, 0x2e,
	0xd1, 0xe1, 0x71, 0xb2, 0x8d, 0x27, 0xf9, 0x4f, 0x75, 0x53, 0x63, 0x7f, 0xfc, 0x3f, 0xfd, 0x17,
	0x00, 0x00, 0xff, 0xff, 0xf3, 0xde, 0xb5, 0x47, 0xc3, 0x06, 0x00, 0x00,
}
